
prem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00006388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005398  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00004b34  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b90  20004b90  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba9f  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f46  00000000  00000000  00012b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  00014a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cd  00000000  00000000  000154a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d71  00000000  00000000  00015c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4ca  00000000  00000000  000389e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2094  00000000  00000000  00044eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116f44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ecc  00000000  00000000  00116f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00119e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005180 	.word	0x08005180

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005180 	.word	0x08005180

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <buffersize>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
//	char log[100];
//	sprintf(log,"Data received of size %d", sizeof(log));
//	HAL_UART_Transmit(&DEBUG_UART, log,sizeof(log),1000);
//}
int buffersize(char *buff) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 800058c:	e002      	b.n	8000594 <buffersize+0x14>
		i++;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	607a      	str	r2, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f6      	bne.n	800058e <buffersize+0xe>
	return i;
 80005a0:	68fb      	ldr	r3, [r7, #12]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <myprintf>:
void myprintf(const char *fmt, ...) {
 80005b0:	b40f      	push	{r0, r1, r2, r3}
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	2164      	movs	r1, #100	@ 0x64
 80005c4:	480a      	ldr	r0, [pc, #40]	@ (80005f0 <myprintf+0x40>)
 80005c6:	f004 f9fb 	bl	80049c0 <vsniprintf>
	va_end(args);
	int len = buffersize(temp);
 80005ca:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <myprintf+0x40>)
 80005cc:	f7ff ffd8 	bl	8000580 <buffersize>
 80005d0:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) temp, len);
//	HAL_Delay(1);
#endif

#ifdef UART_DEBUG
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) temp, len, 1000);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	4905      	ldr	r1, [pc, #20]	@ (80005f0 <myprintf+0x40>)
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <myprintf+0x44>)
 80005de:	f002 fd93 	bl	8003108 <HAL_UART_Transmit>
//	while (DEBUG_TX_FLAG != 1) {
//	}
//	DEBUG_TX_FLAG = 0;
#endif
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr
 80005f0:	20000078 	.word	0x20000078
 80005f4:	200001c4 	.word	0x200001c4

080005f8 <HAL_UART_RxCpltCallback>:
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
int buffersize(char *buff);
void myprintf(const char *fmt, ...);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	char log1[20];

	sprintf(log1, "data size : %d received\n", ptr1);
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <HAL_UART_RxCpltCallback+0x50>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4910      	ldr	r1, [pc, #64]	@ (800064c <HAL_UART_RxCpltCallback+0x54>)
 800060a:	4618      	mov	r0, r3
 800060c:	f004 f98c 	bl	8004928 <siprintf>
	HAL_UART_Transmit(&DEBUG_UART1, "CPLT called: \n",
 8000610:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000614:	220f      	movs	r2, #15
 8000616:	490e      	ldr	r1, [pc, #56]	@ (8000650 <HAL_UART_RxCpltCallback+0x58>)
 8000618:	480e      	ldr	r0, [pc, #56]	@ (8000654 <HAL_UART_RxCpltCallback+0x5c>)
 800061a:	f002 fd75 	bl	8003108 <HAL_UART_Transmit>
			sizeof("CPLT called: \n"), 1000);
	HAL_UART_Transmit(&DEBUG_UART1, log1, sizeof(log1), 1000);
 800061e:	f107 010c 	add.w	r1, r7, #12
 8000622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000626:	2214      	movs	r2, #20
 8000628:	480a      	ldr	r0, [pc, #40]	@ (8000654 <HAL_UART_RxCpltCallback+0x5c>)
 800062a:	f002 fd6d 	bl	8003108 <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(&DEBUG_UART1, data_rec1, ptr1);
	HAL_UART_Transmit(&DEBUG_UART1, rrr, ptr1, 20000);
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_UART_RxCpltCallback+0x50>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	b29a      	uxth	r2, r3
 8000634:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000638:	4907      	ldr	r1, [pc, #28]	@ (8000658 <HAL_UART_RxCpltCallback+0x60>)
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <HAL_UART_RxCpltCallback+0x5c>)
 800063c:	f002 fd64 	bl	8003108 <HAL_UART_Transmit>
//	for(int i=00;i<4000;i++){
//		HAL_UART_Transmit(&DEBUG_UART1, rrr[i], 1,1000);
//		HAL_Delay(100);
//	}

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200003d8 	.word	0x200003d8
 800064c:	08005198 	.word	0x08005198
 8000650:	080051b4 	.word	0x080051b4
 8000654:	200001c4 	.word	0x200001c4
 8000658:	200003dc 	.word	0x200003dc

0800065c <OBC_HANDSHAKE1>:
void OBC_HANDSHAKE1() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	while (OBC_RX_FLAG1 != 1) {
 8000660:	e028      	b.n	80006b4 <OBC_HANDSHAKE1+0x58>
		if (HAL_UART_Receive(&huart4, &obc_data1, 1, 1000) == HAL_OK) {
 8000662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000666:	2201      	movs	r2, #1
 8000668:	491e      	ldr	r1, [pc, #120]	@ (80006e4 <OBC_HANDSHAKE1+0x88>)
 800066a:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <OBC_HANDSHAKE1+0x8c>)
 800066c:	f002 fdd7 	bl	800321e <HAL_UART_Receive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d11e      	bne.n	80006b4 <OBC_HANDSHAKE1+0x58>
			HAL_UART_Transmit(&DEBUG_UART1, &obc_data1, 1, 100);
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	2201      	movs	r2, #1
 800067a:	491a      	ldr	r1, [pc, #104]	@ (80006e4 <OBC_HANDSHAKE1+0x88>)
 800067c:	481b      	ldr	r0, [pc, #108]	@ (80006ec <OBC_HANDSHAKE1+0x90>)
 800067e:	f002 fd43 	bl	8003108 <HAL_UART_Transmit>
			rx_data1[i1++] = obc_data1;
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <OBC_HANDSHAKE1+0x94>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	b2d1      	uxtb	r1, r2
 800068a:	4a19      	ldr	r2, [pc, #100]	@ (80006f0 <OBC_HANDSHAKE1+0x94>)
 800068c:	7011      	strb	r1, [r2, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <OBC_HANDSHAKE1+0x88>)
 8000692:	7819      	ldrb	r1, [r3, #0]
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <OBC_HANDSHAKE1+0x98>)
 8000696:	5499      	strb	r1, [r3, r2]
			i1 = i1 % 8;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <OBC_HANDSHAKE1+0x94>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f003 0307 	and.w	r3, r3, #7
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <OBC_HANDSHAKE1+0x94>)
 80006a4:	701a      	strb	r2, [r3, #0]
			if (i1 == 7)
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <OBC_HANDSHAKE1+0x94>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	d102      	bne.n	80006b4 <OBC_HANDSHAKE1+0x58>
				OBC_RX_FLAG1 = 1;
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <OBC_HANDSHAKE1+0x9c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
	while (OBC_RX_FLAG1 != 1) {
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <OBC_HANDSHAKE1+0x9c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d1d2      	bne.n	8000662 <OBC_HANDSHAKE1+0x6>
		}

	}
	if (OBC_RX_FLAG1 == 1) {
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <OBC_HANDSHAKE1+0x9c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10c      	bne.n	80006de <OBC_HANDSHAKE1+0x82>
		HAL_UART_Transmit(&huart4, rx_data1, sizeof(rx_data1), 1000);
 80006c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c8:	2207      	movs	r2, #7
 80006ca:	490a      	ldr	r1, [pc, #40]	@ (80006f4 <OBC_HANDSHAKE1+0x98>)
 80006cc:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <OBC_HANDSHAKE1+0x8c>)
 80006ce:	f002 fd1b 	bl	8003108 <HAL_UART_Transmit>
		HAL_UART_Transmit(&DEBUG_UART1, &rx_data1, 1, 100);
 80006d2:	2364      	movs	r3, #100	@ 0x64
 80006d4:	2201      	movs	r2, #1
 80006d6:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <OBC_HANDSHAKE1+0x98>)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <OBC_HANDSHAKE1+0x90>)
 80006da:	f002 fd15 	bl	8003108 <HAL_UART_Transmit>
	}
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20004a34 	.word	0x20004a34
 80006e8:	20000134 	.word	0x20000134
 80006ec:	200001c4 	.word	0x200001c4
 80006f0:	20004a3f 	.word	0x20004a3f
 80006f4:	20004a38 	.word	0x20004a38
 80006f8:	20004a33 	.word	0x20004a33

080006fc <IMAGE_CAPTURE1>:

uint32_t IMAGE_CAPTURE1() {
 80006fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000700:	b097      	sub	sp, #92	@ 0x5c
 8000702:	af00      	add	r7, sp, #0
	uint8_t CAM_tx[] = { 'C', 'A', 'M', 'O', 'N' };
 8000704:	4a4a      	ldr	r2, [pc, #296]	@ (8000830 <IMAGE_CAPTURE1+0x134>)
 8000706:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800070a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070e:	6018      	str	r0, [r3, #0]
 8000710:	3304      	adds	r3, #4
 8000712:	7019      	strb	r1, [r3, #0]

	uint32_t size1 = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	657b      	str	r3, [r7, #84]	@ 0x54
	uint8_t rgb_img_size[6];
//	data_rec1 = rrr;
	char log1[30];
	UART_Flush(&huart2);
 8000718:	4846      	ldr	r0, [pc, #280]	@ (8000834 <IMAGE_CAPTURE1+0x138>)
 800071a:	f000 f8a9 	bl	8000870 <UART_Flush>
	UART_Flush(&huart8);
 800071e:	4846      	ldr	r0, [pc, #280]	@ (8000838 <IMAGE_CAPTURE1+0x13c>)
 8000720:	f000 f8a6 	bl	8000870 <UART_Flush>
	UART_Flush_DMA(&huart8);
 8000724:	4844      	ldr	r0, [pc, #272]	@ (8000838 <IMAGE_CAPTURE1+0x13c>)
 8000726:	f000 f8b0 	bl	800088a <UART_Flush_DMA>
	HAL_UART_Transmit(&RGB_UART1, CAM_tx, sizeof(CAM_tx), 1000);
 800072a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	2205      	movs	r2, #5
 8000734:	4840      	ldr	r0, [pc, #256]	@ (8000838 <IMAGE_CAPTURE1+0x13c>)
 8000736:	f002 fce7 	bl	8003108 <HAL_UART_Transmit>
	HAL_UART_Transmit(&NIR_UART1, CAM_tx, sizeof(CAM_tx), 1000);
 800073a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800073e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000742:	2205      	movs	r2, #5
 8000744:	483d      	ldr	r0, [pc, #244]	@ (800083c <IMAGE_CAPTURE1+0x140>)
 8000746:	f002 fcdf 	bl	8003108 <HAL_UART_Transmit>

	if (HAL_OK
			== HAL_UART_Receive(&RGB_UART1, rgb_img_size, sizeof(rgb_img_size),
 800074a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800074e:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8000752:	2206      	movs	r2, #6
 8000754:	4838      	ldr	r0, [pc, #224]	@ (8000838 <IMAGE_CAPTURE1+0x13c>)
 8000756:	f002 fd62 	bl	800321e <HAL_UART_Receive>
 800075a:	4603      	mov	r3, r0
	if (HAL_OK
 800075c:	2b00      	cmp	r3, #0
 800075e:	d161      	bne.n	8000824 <IMAGE_CAPTURE1+0x128>
					7000)) {
 8000760:	466b      	mov	r3, sp
 8000762:	461e      	mov	r6, r3
		HAL_UART_Transmit(&DEBUG_UART1, (uint8_t*) "Image size is : ",
 8000764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000768:	2211      	movs	r2, #17
 800076a:	4935      	ldr	r1, [pc, #212]	@ (8000840 <IMAGE_CAPTURE1+0x144>)
 800076c:	4831      	ldr	r0, [pc, #196]	@ (8000834 <IMAGE_CAPTURE1+0x138>)
 800076e:	f002 fccb 	bl	8003108 <HAL_UART_Transmit>
				sizeof("Image size is : "), 1000);

		ptr1 = atoi((char*) rgb_img_size);
 8000772:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000776:	4618      	mov	r0, r3
 8000778:	f003 ff98 	bl	80046ac <atoi>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b30      	ldr	r3, [pc, #192]	@ (8000844 <IMAGE_CAPTURE1+0x148>)
 8000782:	601a      	str	r2, [r3, #0]
		data_rec1 = (uint8_t*) malloc(ptr1);
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <IMAGE_CAPTURE1+0x148>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f003 ff93 	bl	80046b4 <malloc>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <IMAGE_CAPTURE1+0x14c>)
 8000794:	601a      	str	r2, [r3, #0]
//		if(HAL_UART_Receive(&RGB_UART1, rrr, ptr1, 10000) == HAL_OK){
////					HAL_UART_Transmit(&RGB_UART, data_rec, ptr,1000);
//			sprintf(log1 , "data size : %d received\n", ptr1);
//				HAL_UART_Transmit(&DEBUG_UART1,log1, sizeof(log1), 1000);
//				}
		int loop = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	653b      	str	r3, [r7, #80]	@ 0x50

		char log1[20];
		uint16_t data_size = 4000;
 800079a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800079e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		uint8_t temp[data_size];
 80007a2:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80007a6:	460b      	mov	r3, r1
 80007a8:	3b01      	subs	r3, #1
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007ac:	b28b      	uxth	r3, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	4698      	mov	r8, r3
 80007b2:	4691      	mov	r9, r2
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c8:	b28b      	uxth	r3, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	461c      	mov	r4, r3
 80007ce:	4615      	mov	r5, r2
 80007d0:	f04f 0200 	mov.w	r2, #0
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	00eb      	lsls	r3, r5, #3
 80007da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007de:	00e2      	lsls	r2, r4, #3
 80007e0:	460b      	mov	r3, r1
 80007e2:	3307      	adds	r3, #7
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	ebad 0d03 	sub.w	sp, sp, r3
 80007ec:	466b      	mov	r3, sp
 80007ee:	3300      	adds	r3, #0
 80007f0:	647b      	str	r3, [r7, #68]	@ 0x44
		loop = ptr1 / data_size;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <IMAGE_CAPTURE1+0x148>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	653b      	str	r3, [r7, #80]	@ 0x50
		HAL_UART_Transmit(&huart2, "\n\n********Reading Image data****\n",
 8000800:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000804:	2221      	movs	r2, #33	@ 0x21
 8000806:	4911      	ldr	r1, [pc, #68]	@ (800084c <IMAGE_CAPTURE1+0x150>)
 8000808:	480a      	ldr	r0, [pc, #40]	@ (8000834 <IMAGE_CAPTURE1+0x138>)
 800080a:	f002 fc7d 	bl	8003108 <HAL_UART_Transmit>
//							HAL_UART_Transmit(&DEBUG_UART1, temp, sizeof(temp), 1000);
//
//							if(temp == 0xd9) break;
//						}
//		}while(1);
		if (HAL_OK == HAL_UART_Receive_DMA(&huart8, rrr, ptr1-2)) {
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <IMAGE_CAPTURE1+0x148>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	3b02      	subs	r3, #2
 8000816:	b29b      	uxth	r3, r3
 8000818:	461a      	mov	r2, r3
 800081a:	490d      	ldr	r1, [pc, #52]	@ (8000850 <IMAGE_CAPTURE1+0x154>)
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <IMAGE_CAPTURE1+0x13c>)
 800081e:	f002 fd95 	bl	800334c <HAL_UART_Receive_DMA>
 8000822:	46b5      	mov	sp, r6
		}
//		RGB_CAM = 1;
		//HAL_Delay(20000);

	}
}
 8000824:	bf00      	nop
 8000826:	4618      	mov	r0, r3
 8000828:	375c      	adds	r7, #92	@ 0x5c
 800082a:	46bd      	mov	sp, r7
 800082c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000830:	080051fc 	.word	0x080051fc
 8000834:	200001c4 	.word	0x200001c4
 8000838:	2000017c 	.word	0x2000017c
 800083c:	2000020c 	.word	0x2000020c
 8000840:	080051c4 	.word	0x080051c4
 8000844:	200003d8 	.word	0x200003d8
 8000848:	200003d4 	.word	0x200003d4
 800084c:	080051d8 	.word	0x080051d8
 8000850:	200003dc 	.word	0x200003dc

08000854 <OCP_EN1>:
void OCP_EN1() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2110      	movs	r1, #16
 800085c:	4803      	ldr	r0, [pc, #12]	@ (800086c <OCP_EN1+0x18>)
 800085e:	f001 fd65 	bl	800232c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	@ 0x64
 8000864:	f000 fe72 	bl	800154c <HAL_Delay>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020400 	.word	0x40020400

08000870 <UART_Flush>:
void OCP_DISABLE() {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	HAL_Delay(100);
}

void UART_Flush(UART_HandleTypeDef *huart) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(huart);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <UART_Flush_DMA>:
void UART_Flush_DMA(UART_HandleTypeDef *huart) {
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	// Disable UART DMA request
	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f022 0220 	bic.w	r2, r2, #32
 80008a0:	60da      	str	r2, [r3, #12]

	// Abort any ongoing UART reception via DMA
	HAL_UART_AbortReceive(huart);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f002 fd77 	bl	8003396 <HAL_UART_AbortReceive>

	// Reset the UART receive state
	huart->RxState = HAL_UART_STATE_READY;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2220      	movs	r2, #32
 80008ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008bc:	f000 fdd4 	bl	8001468 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008c0:	f000 f862 	bl	8000988 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008c4:	f000 f9f4 	bl	8000cb0 <MX_GPIO_Init>
	MX_DMA_Init();
 80008c8:	f000 f9ac 	bl	8000c24 <MX_DMA_Init>
	MX_UART8_Init();
 80008cc:	f000 f92c 	bl	8000b28 <MX_UART8_Init>
	MX_USART2_UART_Init();
 80008d0:	f000 f954 	bl	8000b7c <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 80008d4:	f000 f97c 	bl	8000bd0 <MX_USART6_UART_Init>
	MX_UART4_Init();
 80008d8:	f000 f8fc 	bl	8000ad4 <MX_UART4_Init>
	MX_SPI2_Init();
 80008dc:	f000 f8c4 	bl	8000a68 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) "Camera is starting",
 80008e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e4:	2213      	movs	r2, #19
 80008e6:	4922      	ldr	r1, [pc, #136]	@ (8000970 <main+0xb8>)
 80008e8:	4822      	ldr	r0, [pc, #136]	@ (8000974 <main+0xbc>)
 80008ea:	f002 fc0d 	bl	8003108 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

//
		OBC_HANDSHAKE1();
 80008ee:	f7ff feb5 	bl	800065c <OBC_HANDSHAKE1>
		OBC_RX_FLAG1 = 0;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <main+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]

		do {
			if (HAL_UART_Receive(&OBC_UART1, OBC_CMD_RX1, 7, 1000) == HAL_OK) {
 80008f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fc:	2207      	movs	r2, #7
 80008fe:	491f      	ldr	r1, [pc, #124]	@ (800097c <main+0xc4>)
 8000900:	481f      	ldr	r0, [pc, #124]	@ (8000980 <main+0xc8>)
 8000902:	f002 fc8c 	bl	800321e <HAL_UART_Receive>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f5      	bne.n	80008f8 <main+0x40>
				UART_Flush(&huart4);
 800090c:	481c      	ldr	r0, [pc, #112]	@ (8000980 <main+0xc8>)
 800090e:	f7ff ffaf 	bl	8000870 <UART_Flush>

				if (OBC_CMD_RX1[0] == 0x53 && OBC_CMD_RX1[1] == 0x0C
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <main+0xc4>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b53      	cmp	r3, #83	@ 0x53
 8000918:	d1ee      	bne.n	80008f8 <main+0x40>
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <main+0xc4>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	2b0c      	cmp	r3, #12
 8000920:	d1ea      	bne.n	80008f8 <main+0x40>
						&& OBC_CMD_RX1[2] == 0x0A && OBC_CMD_RX1[3] == 0X0e
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <main+0xc4>)
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	2b0a      	cmp	r3, #10
 8000928:	d1e6      	bne.n	80008f8 <main+0x40>
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <main+0xc4>)
 800092c:	78db      	ldrb	r3, [r3, #3]
 800092e:	2b0e      	cmp	r3, #14
 8000930:	d1e2      	bne.n	80008f8 <main+0x40>
						&& OBC_CMD_RX1[4] == 0X01 && OBC_CMD_RX1[5] == 0X7e) {
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <main+0xc4>)
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d1de      	bne.n	80008f8 <main+0x40>
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <main+0xc4>)
 800093c:	795b      	ldrb	r3, [r3, #5]
 800093e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000940:	d1da      	bne.n	80008f8 <main+0x40>
					HAL_UART_Transmit(&OBC_UART1, OBC_CMD_RX1,
 8000942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000946:	2207      	movs	r2, #7
 8000948:	490c      	ldr	r1, [pc, #48]	@ (800097c <main+0xc4>)
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <main+0xc8>)
 800094c:	f002 fbdc 	bl	8003108 <HAL_UART_Transmit>
							sizeof(OBC_CMD_RX1), 1000);
//									OCP_EN1();
					OBC_RX_FLAG1 = 1;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <main+0xc0>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
					break;
 8000956:	bf00      	nop
				}
			}
		} while (1);
		myprintf("Data received from OBC\r\n");
 8000958:	480a      	ldr	r0, [pc, #40]	@ (8000984 <main+0xcc>)
 800095a:	f7ff fe29 	bl	80005b0 <myprintf>
		HAL_Delay(2000);
 800095e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000962:	f000 fdf3 	bl	800154c <HAL_Delay>
		//		while (!OBC_RX_FLAG) {
//		//			myprintf("waiting for command from OBC.\r\n");
//		//			HAL_Delay(1000);
//		//		}
		OCP_EN1();
 8000966:	f7ff ff75 	bl	8000854 <OCP_EN1>
		IMAGE_CAPTURE1();
 800096a:	f7ff fec7 	bl	80006fc <IMAGE_CAPTURE1>
		OBC_HANDSHAKE1();
 800096e:	e7be      	b.n	80008ee <main+0x36>
 8000970:	08005204 	.word	0x08005204
 8000974:	200001c4 	.word	0x200001c4
 8000978:	20004a33 	.word	0x20004a33
 800097c:	20004a2c 	.word	0x20004a2c
 8000980:	20000134 	.word	0x20000134
 8000984:	08005218 	.word	0x08005218

08000988 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	@ 0x50
 800098c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	@ 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 f820 	bl	80049dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a24      	ldr	r2, [pc, #144]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 80009fc:	23b4      	movs	r3, #180	@ 0xb4
 80009fe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fcf7 	bl	8002400 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x94>
		Error_Handler();
 8000a18:	f000 f9b8 	bl	8000d8c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000a1c:	f001 fca0 	bl	8002360 <HAL_PWREx_EnableOverDrive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xa2>
		Error_Handler();
 8000a26:	f000 f9b1 	bl	8000d8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a36:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a3a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a40:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2105      	movs	r1, #5
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 ff51 	bl	80028f0 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xd0>
		Error_Handler();
 8000a54:	f000 f99a 	bl	8000d8c <Error_Handler>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	@ 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <MX_SPI2_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a78:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a98:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_SPI2_Init+0x64>)
 8000aba:	f002 f939 	bl	8002d30 <HAL_SPI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000ac4:	f000 f962 	bl	8000d8c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000dc 	.word	0x200000dc
 8000ad0:	40003800 	.word	0x40003800

08000ad4 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <MX_UART4_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_UART4_Init+0x4c>)
 8000b0c:	f002 faac 	bl	8003068 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_UART4_Init+0x46>
		Error_Handler();
 8000b16:	f000 f939 	bl	8000d8c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000134 	.word	0x20000134
 8000b24:	40004c00 	.word	0x40004c00

08000b28 <MX_UART8_Init>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <MX_UART8_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_UART8_Init+0x4c>)
 8000b60:	f002 fa82 	bl	8003068 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_UART8_Init+0x46>
		Error_Handler();
 8000b6a:	f000 f90f 	bl	8000d8c <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000017c 	.word	0x2000017c
 8000b78:	40007c00 	.word	0x40007c00

08000b7c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <MX_USART2_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f002 fa58 	bl	8003068 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000bbe:	f000 f8e5 	bl	8000d8c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001c4 	.word	0x200001c4
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <MX_USART6_UART_Init+0x50>)
 8000bd8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_USART6_UART_Init+0x4c>)
 8000c08:	f002 fa2e 	bl	8003068 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8000c12:	f000 f8bb 	bl	8000d8c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000020c 	.word	0x2000020c
 8000c20:	40011400 	.word	0x40011400

08000c24 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_DMA_Init+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <MX_DMA_Init+0x88>)
 8000c34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_DMA_Init+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <MX_DMA_Init+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_DMA_Init+0x88>)
 8000c50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_DMA_Init+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200b      	movs	r0, #11
 8000c68:	f000 fd6f 	bl	800174a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c6c:	200b      	movs	r0, #11
 8000c6e:	f000 fd88 	bl	8001782 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2011      	movs	r0, #17
 8000c78:	f000 fd67 	bl	800174a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c7c:	2011      	movs	r0, #17
 8000c7e:	f000 fd80 	bl	8001782 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2039      	movs	r0, #57	@ 0x39
 8000c88:	f000 fd5f 	bl	800174a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c8c:	2039      	movs	r0, #57	@ 0x39
 8000c8e:	f000 fd78 	bl	8001782 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2045      	movs	r0, #69	@ 0x45
 8000c98:	f000 fd57 	bl	800174a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c9c:	2045      	movs	r0, #69	@ 0x45
 8000c9e:	f000 fd70 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a2d      	ldr	r2, [pc, #180]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a26      	ldr	r2, [pc, #152]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a18      	ldr	r2, [pc, #96]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_GPIO_Init+0xd4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, cs_Pin | GPIO_PIN_4, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8000d58:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <MX_GPIO_Init+0xd8>)
 8000d5a:	f001 fae7 	bl	800232c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : cs_Pin PB4 */
	GPIO_InitStruct.Pin = cs_Pin | GPIO_PIN_4;
 8000d5e:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8000d62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <MX_GPIO_Init+0xd8>)
 8000d78:	f001 f92c 	bl	8001fd4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	@ 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020400 	.word	0x40020400

08000d8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <Error_Handler+0x8>

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb8 <HAL_SPI_MspInit+0xd0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d152      	bne.n	8000eb0 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a23      	ldr	r2, [pc, #140]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_SPI_MspInit+0xd4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6e:	2305      	movs	r3, #5
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4811      	ldr	r0, [pc, #68]	@ (8000ec0 <HAL_SPI_MspInit+0xd8>)
 8000e7a:	f001 f8ab 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e90:	2305      	movs	r3, #5
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <HAL_SPI_MspInit+0xdc>)
 8000e9c:	f001 f89a 	bl	8001fd4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2024      	movs	r0, #36	@ 0x24
 8000ea6:	f000 fc50 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000eaa:	2024      	movs	r0, #36	@ 0x24
 8000eac:	f000 fc69 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40003800 	.word	0x40003800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	@ 0x40
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a84      	ldr	r2, [pc, #528]	@ (80010f8 <HAL_UART_MspInit+0x230>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d134      	bne.n	8000f54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eee:	4b83      	ldr	r3, [pc, #524]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	4a82      	ldr	r2, [pc, #520]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efa:	4b80      	ldr	r3, [pc, #512]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0a:	4b7c      	ldr	r3, [pc, #496]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a7b      	ldr	r2, [pc, #492]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b79      	ldr	r3, [pc, #484]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f22:	2303      	movs	r3, #3
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f32:	2308      	movs	r3, #8
 8000f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4870      	ldr	r0, [pc, #448]	@ (8001100 <HAL_UART_MspInit+0x238>)
 8000f3e:	f001 f849 	bl	8001fd4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2034      	movs	r0, #52	@ 0x34
 8000f48:	f000 fbff 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f4c:	2034      	movs	r0, #52	@ 0x34
 8000f4e:	f000 fc18 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f52:	e17b      	b.n	800124c <HAL_UART_MspInit+0x384>
  else if(huart->Instance==UART8)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	@ (8001104 <HAL_UART_MspInit+0x23c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f040 8091 	bne.w	8001082 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	4b65      	ldr	r3, [pc, #404]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a64      	ldr	r2, [pc, #400]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	4b62      	ldr	r3, [pc, #392]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	4b5e      	ldr	r3, [pc, #376]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a5d      	ldr	r2, [pc, #372]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4855      	ldr	r0, [pc, #340]	@ (8001108 <HAL_UART_MspInit+0x240>)
 8000fb4:	f001 f80e 	bl	8001fd4 <HAL_GPIO_Init>
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8000fb8:	4b54      	ldr	r3, [pc, #336]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fba:	4a55      	ldr	r2, [pc, #340]	@ (8001110 <HAL_UART_MspInit+0x248>)
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fc0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000fc4:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fc6:	4b51      	ldr	r3, [pc, #324]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fc8:	2240      	movs	r2, #64	@ 0x40
 8000fca:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd8:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8000fe6:	4b49      	ldr	r3, [pc, #292]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fec:	4b47      	ldr	r3, [pc, #284]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff2:	4b46      	ldr	r3, [pc, #280]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8000ff8:	4844      	ldr	r0, [pc, #272]	@ (800110c <HAL_UART_MspInit+0x244>)
 8000ffa:	f000 fbdd 	bl	80017b8 <HAL_DMA_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001004:	f7ff fec2 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a40      	ldr	r2, [pc, #256]	@ (800110c <HAL_UART_MspInit+0x244>)
 800100c:	639a      	str	r2, [r3, #56]	@ 0x38
 800100e:	4a3f      	ldr	r2, [pc, #252]	@ (800110c <HAL_UART_MspInit+0x244>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001014:	4b3f      	ldr	r3, [pc, #252]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001016:	4a40      	ldr	r2, [pc, #256]	@ (8001118 <HAL_UART_MspInit+0x250>)
 8001018:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800101a:	4b3e      	ldr	r3, [pc, #248]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 800101c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001020:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001022:	4b3c      	ldr	r3, [pc, #240]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001028:	4b3a      	ldr	r3, [pc, #232]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800102e:	4b39      	ldr	r3, [pc, #228]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001030:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001034:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001036:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103c:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001048:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001054:	482f      	ldr	r0, [pc, #188]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001056:	f000 fbaf 	bl	80017b8 <HAL_DMA_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001060:	f7ff fe94 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c
 800106a:	4a2a      	ldr	r2, [pc, #168]	@ (8001114 <HAL_UART_MspInit+0x24c>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2053      	movs	r0, #83	@ 0x53
 8001076:	f000 fb68 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800107a:	2053      	movs	r0, #83	@ 0x53
 800107c:	f000 fb81 	bl	8001782 <HAL_NVIC_EnableIRQ>
}
 8001080:	e0e4      	b.n	800124c <HAL_UART_MspInit+0x384>
  else if(huart->Instance==USART2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a25      	ldr	r2, [pc, #148]	@ (800111c <HAL_UART_MspInit+0x254>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d149      	bne.n	8001120 <HAL_UART_MspInit+0x258>
    __HAL_RCC_USART2_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_UART_MspInit+0x234>)
 8001096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_UART_MspInit+0x234>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_UART_MspInit+0x234>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <HAL_UART_MspInit+0x234>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_UART_MspInit+0x234>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010c4:	230c      	movs	r3, #12
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d4:	2307      	movs	r3, #7
 80010d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <HAL_UART_MspInit+0x238>)
 80010e0:	f000 ff78 	bl	8001fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2026      	movs	r0, #38	@ 0x26
 80010ea:	f000 fb2e 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ee:	2026      	movs	r0, #38	@ 0x26
 80010f0:	f000 fb47 	bl	8001782 <HAL_NVIC_EnableIRQ>
}
 80010f4:	e0aa      	b.n	800124c <HAL_UART_MspInit+0x384>
 80010f6:	bf00      	nop
 80010f8:	40004c00 	.word	0x40004c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40007c00 	.word	0x40007c00
 8001108:	40021000 	.word	0x40021000
 800110c:	20000254 	.word	0x20000254
 8001110:	40026010 	.word	0x40026010
 8001114:	200002b4 	.word	0x200002b4
 8001118:	400260a0 	.word	0x400260a0
 800111c:	40004400 	.word	0x40004400
  else if(huart->Instance==USART6)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a4b      	ldr	r2, [pc, #300]	@ (8001254 <HAL_UART_MspInit+0x38c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	f040 8090 	bne.w	800124c <HAL_UART_MspInit+0x384>
    __HAL_RCC_USART6_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	4b49      	ldr	r3, [pc, #292]	@ (8001258 <HAL_UART_MspInit+0x390>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001134:	4a48      	ldr	r2, [pc, #288]	@ (8001258 <HAL_UART_MspInit+0x390>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6453      	str	r3, [r2, #68]	@ 0x44
 800113c:	4b46      	ldr	r3, [pc, #280]	@ (8001258 <HAL_UART_MspInit+0x390>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b42      	ldr	r3, [pc, #264]	@ (8001258 <HAL_UART_MspInit+0x390>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001150:	4a41      	ldr	r2, [pc, #260]	@ (8001258 <HAL_UART_MspInit+0x390>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6313      	str	r3, [r2, #48]	@ 0x30
 8001158:	4b3f      	ldr	r3, [pc, #252]	@ (8001258 <HAL_UART_MspInit+0x390>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001164:	23c0      	movs	r3, #192	@ 0xc0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001174:	2308      	movs	r3, #8
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	4837      	ldr	r0, [pc, #220]	@ (800125c <HAL_UART_MspInit+0x394>)
 8001180:	f000 ff28 	bl	8001fd4 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <HAL_UART_MspInit+0x398>)
 8001186:	4a37      	ldr	r2, [pc, #220]	@ (8001264 <HAL_UART_MspInit+0x39c>)
 8001188:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <HAL_UART_MspInit+0x398>)
 800118c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001190:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001192:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_UART_MspInit+0x398>)
 8001194:	2240      	movs	r2, #64	@ 0x40
 8001196:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001198:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <HAL_UART_MspInit+0x398>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80011c4:	4826      	ldr	r0, [pc, #152]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011c6:	f000 faf7 	bl	80017b8 <HAL_DMA_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0x30c>
      Error_Handler();
 80011d0:	f7ff fddc 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80011da:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <HAL_UART_MspInit+0x398>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 80011e2:	4a22      	ldr	r2, [pc, #136]	@ (800126c <HAL_UART_MspInit+0x3a4>)
 80011e4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 80011e8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 80011fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001200:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001220:	4811      	ldr	r0, [pc, #68]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 8001222:	f000 fac9 	bl	80017b8 <HAL_DMA_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x368>
      Error_Handler();
 800122c:	f7ff fdae 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 8001234:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001236:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <HAL_UART_MspInit+0x3a0>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2047      	movs	r0, #71	@ 0x47
 8001242:	f000 fa82 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001246:	2047      	movs	r0, #71	@ 0x47
 8001248:	f000 fa9b 	bl	8001782 <HAL_NVIC_EnableIRQ>
}
 800124c:	bf00      	nop
 800124e:	3740      	adds	r7, #64	@ 0x40
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40011400 	.word	0x40011400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020800 	.word	0x40020800
 8001260:	20000314 	.word	0x20000314
 8001264:	400264a0 	.word	0x400264a0
 8001268:	20000374 	.word	0x20000374
 800126c:	40026428 	.word	0x40026428

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <UsageFault_Handler+0x4>

08001298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c6:	f000 f921 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <DMA1_Stream0_IRQHandler+0x10>)
 80012d6:	f000 fc07 	bl	8001ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000254 	.word	0x20000254

080012e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <DMA1_Stream6_IRQHandler+0x10>)
 80012ea:	f000 fbfd 	bl	8001ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002b4 	.word	0x200002b4

080012f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <SPI2_IRQHandler+0x10>)
 80012fe:	f001 fda1 	bl	8002e44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000dc 	.word	0x200000dc

0800130c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <USART2_IRQHandler+0x10>)
 8001312:	f002 f8e3 	bl	80034dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001c4 	.word	0x200001c4

08001320 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <UART4_IRQHandler+0x10>)
 8001326:	f002 f8d9 	bl	80034dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000134 	.word	0x20000134

08001334 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA2_Stream1_IRQHandler+0x10>)
 800133a:	f000 fbd5 	bl	8001ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000374 	.word	0x20000374

08001348 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <DMA2_Stream6_IRQHandler+0x10>)
 800134e:	f000 fbcb 	bl	8001ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000314 	.word	0x20000314

0800135c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <USART6_IRQHandler+0x10>)
 8001362:	f002 f8bb 	bl	80034dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000020c 	.word	0x2000020c

08001370 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <UART8_IRQHandler+0x10>)
 8001376:	f002 f8b1 	bl	80034dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000017c 	.word	0x2000017c

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f003 fb2a 	bl	8004a0c <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20030000 	.word	0x20030000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	20004a40 	.word	0x20004a40
 80013ec:	20004b90 	.word	0x20004b90

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800144c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001418:	f7ff ffea 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001442:	f003 fae9 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fa37 	bl	80008b8 <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001458:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 800145c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001460:	20004b90 	.word	0x20004b90

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_Init+0x40>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_Init+0x40>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_Init+0x40>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f94f 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fc7c 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f967 	bl	800179e <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 f92f 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008
 8001530:	20004a44 	.word	0x20004a44

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20004a44 	.word	0x20004a44

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	@ (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	@ (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	@ (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff3e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff31 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff feb6 	bl	8001534 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e099      	b.n	8001908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f4:	e00f      	b.n	8001816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f6:	f7ff fe9d 	bl	8001534 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b05      	cmp	r3, #5
 8001802:	d908      	bls.n	8001816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e078      	b.n	8001908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e8      	bne.n	80017f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_DMA_Init+0x158>)
 8001830:	4013      	ands	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	2b04      	cmp	r3, #4
 800186e:	d107      	bne.n	8001880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	4313      	orrs	r3, r2
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f023 0307 	bic.w	r3, r3, #7
 8001896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d117      	bne.n	80018da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00e      	beq.n	80018da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fb0d 	bl	8001edc <DMA_CheckFifoParam>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2240      	movs	r2, #64	@ 0x40
 80018cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80018d6:	2301      	movs	r3, #1
 80018d8:	e016      	b.n	8001908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fac4 	bl	8001e70 <DMA_CalcBaseAndBitshift>
 80018e8:	4603      	mov	r3, r0
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f0:	223f      	movs	r2, #63	@ 0x3f
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	f010803f 	.word	0xf010803f

08001914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_DMA_Start_IT+0x26>
 8001936:	2302      	movs	r3, #2
 8001938:	e040      	b.n	80019bc <HAL_DMA_Start_IT+0xa8>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d12f      	bne.n	80019ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2202      	movs	r2, #2
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fa56 	bl	8001e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196c:	223f      	movs	r2, #63	@ 0x3f
 800196e:	409a      	lsls	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0216 	orr.w	r2, r2, #22
 8001982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0208 	orr.w	r2, r2, #8
 800199a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e005      	b.n	80019ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019b6:	2302      	movs	r3, #2
 80019b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019d2:	f7ff fdaf 	bl	8001534 <HAL_GetTick>
 80019d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d008      	beq.n	80019f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2280      	movs	r2, #128	@ 0x80
 80019e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e052      	b.n	8001a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0216 	bic.w	r2, r2, #22
 8001a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <HAL_DMA_Abort+0x62>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0208 	bic.w	r2, r2, #8
 8001a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a46:	e013      	b.n	8001a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a48:	f7ff fd74 	bl	8001534 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d90c      	bls.n	8001a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e015      	b.n	8001a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e4      	bne.n	8001a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a82:	223f      	movs	r2, #63	@ 0x3f
 8001a84:	409a      	lsls	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d004      	beq.n	8001ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2280      	movs	r2, #128	@ 0x80
 8001abc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00c      	b.n	8001adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2205      	movs	r2, #5
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001af4:	4b8e      	ldr	r3, [pc, #568]	@ (8001d30 <HAL_DMA_IRQHandler+0x248>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a8e      	ldr	r2, [pc, #568]	@ (8001d34 <HAL_DMA_IRQHandler+0x24c>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0a9b      	lsrs	r3, r3, #10
 8001b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	2208      	movs	r2, #8
 8001b14:	409a      	lsls	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01a      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0204 	bic.w	r2, r2, #4
 8001b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b40:	2208      	movs	r2, #8
 8001b42:	409a      	lsls	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2201      	movs	r2, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d012      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	2201      	movs	r2, #1
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b82:	f043 0202 	orr.w	r2, r3, #2
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2204      	movs	r2, #4
 8001b90:	409a      	lsls	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d012      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	2204      	movs	r2, #4
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d043      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d03c      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be2:	2210      	movs	r2, #16
 8001be4:	409a      	lsls	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d018      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d108      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d024      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
 8001c16:	e01f      	b.n	8001c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e016      	b.n	8001c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0208 	bic.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 808f 	beq.w	8001d88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8087 	beq.w	8001d88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7e:	2220      	movs	r2, #32
 8001c80:	409a      	lsls	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d136      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0216 	bic.w	r2, r2, #22
 8001ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_DMA_IRQHandler+0x1da>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0208 	bic.w	r2, r2, #8
 8001cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	223f      	movs	r2, #63	@ 0x3f
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d07e      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
        }
        return;
 8001cfe:	e079      	b.n	8001df4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01d      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d031      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
 8001d2c:	e02c      	b.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000
 8001d34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d023      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
 8001d48:	e01e      	b.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10f      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0210 	bic.w	r2, r2, #16
 8001d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d032      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2205      	movs	r2, #5
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	3301      	adds	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d307      	bcc.n	8001dd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f2      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x2cc>
 8001dce:	e000      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
 8001df2:	e000      	b.n	8001df6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001df4:	bf00      	nop
    }
  }
}
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b40      	cmp	r3, #64	@ 0x40
 8001e40:	d108      	bne.n	8001e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e52:	e007      	b.n	8001e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3b10      	subs	r3, #16
 8001e80:	4a14      	ldr	r2, [pc, #80]	@ (8001ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d909      	bls.n	8001eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	1d1a      	adds	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eb0:	e007      	b.n	8001ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	aaaaaaab 	.word	0xaaaaaaab
 8001ed8:	0800524c 	.word	0x0800524c

08001edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d11f      	bne.n	8001f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d856      	bhi.n	8001faa <DMA_CheckFifoParam+0xce>
 8001efc:	a201      	add	r2, pc, #4	@ (adr r2, 8001f04 <DMA_CheckFifoParam+0x28>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f27 	.word	0x08001f27
 8001f0c:	08001f15 	.word	0x08001f15
 8001f10:	08001fab 	.word	0x08001fab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d046      	beq.n	8001fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f24:	e043      	b.n	8001fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f2e:	d140      	bne.n	8001fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f34:	e03d      	b.n	8001fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3e:	d121      	bne.n	8001f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d837      	bhi.n	8001fb6 <DMA_CheckFifoParam+0xda>
 8001f46:	a201      	add	r2, pc, #4	@ (adr r2, 8001f4c <DMA_CheckFifoParam+0x70>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f63 	.word	0x08001f63
 8001f54:	08001f5d 	.word	0x08001f5d
 8001f58:	08001f75 	.word	0x08001f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f60:	e030      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d025      	beq.n	8001fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f72:	e022      	b.n	8001fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f7c:	d11f      	bne.n	8001fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f82:	e01c      	b.n	8001fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d903      	bls.n	8001f92 <DMA_CheckFifoParam+0xb6>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d003      	beq.n	8001f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f90:	e018      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      break;
 8001f96:	e015      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa8:	e00b      	b.n	8001fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001faa:	bf00      	nop
 8001fac:	e00a      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e008      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e006      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb6:	bf00      	nop
 8001fb8:	e004      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fba:	bf00      	nop
 8001fbc:	e002      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fbe:	bf00      	nop
 8001fc0:	e000      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e177      	b.n	80022e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8166 	bne.w	80022da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	2b02      	cmp	r3, #2
 8002024:	d130      	bne.n	8002088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b03      	cmp	r3, #3
 8002092:	d017      	beq.n	80020c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d123      	bne.n	8002118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80c0 	beq.w	80022da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b66      	ldr	r3, [pc, #408]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a65      	ldr	r2, [pc, #404]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b63      	ldr	r3, [pc, #396]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002176:	4a61      	ldr	r2, [pc, #388]	@ (80022fc <HAL_GPIO_Init+0x328>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_GPIO_Init+0x32c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d037      	beq.n	8002212 <HAL_GPIO_Init+0x23e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a57      	ldr	r2, [pc, #348]	@ (8002304 <HAL_GPIO_Init+0x330>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d031      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a56      	ldr	r2, [pc, #344]	@ (8002308 <HAL_GPIO_Init+0x334>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_GPIO_Init+0x236>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a55      	ldr	r2, [pc, #340]	@ (800230c <HAL_GPIO_Init+0x338>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x232>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a54      	ldr	r2, [pc, #336]	@ (8002310 <HAL_GPIO_Init+0x33c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x22e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a53      	ldr	r2, [pc, #332]	@ (8002314 <HAL_GPIO_Init+0x340>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x22a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a52      	ldr	r2, [pc, #328]	@ (8002318 <HAL_GPIO_Init+0x344>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x226>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a51      	ldr	r2, [pc, #324]	@ (800231c <HAL_GPIO_Init+0x348>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x222>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a50      	ldr	r2, [pc, #320]	@ (8002320 <HAL_GPIO_Init+0x34c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x21e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002324 <HAL_GPIO_Init+0x350>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x21a>
 80021ea:	2309      	movs	r3, #9
 80021ec:	e012      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021ee:	230a      	movs	r3, #10
 80021f0:	e010      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e00e      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f6:	2307      	movs	r3, #7
 80021f8:	e00c      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fe:	2305      	movs	r3, #5
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002212:	2300      	movs	r3, #0
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	f002 0203 	and.w	r2, r2, #3
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002224:	4935      	ldr	r1, [pc, #212]	@ (80022fc <HAL_GPIO_Init+0x328>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002232:	4b3d      	ldr	r3, [pc, #244]	@ (8002328 <HAL_GPIO_Init+0x354>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002256:	4a34      	ldr	r2, [pc, #208]	@ (8002328 <HAL_GPIO_Init+0x354>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800225c:	4b32      	ldr	r3, [pc, #200]	@ (8002328 <HAL_GPIO_Init+0x354>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002280:	4a29      	ldr	r2, [pc, #164]	@ (8002328 <HAL_GPIO_Init+0x354>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002286:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <HAL_GPIO_Init+0x354>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002328 <HAL_GPIO_Init+0x354>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_GPIO_Init+0x354>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <HAL_GPIO_Init+0x354>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	f67f ae84 	bls.w	8001ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40013800 	.word	0x40013800
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40021400 	.word	0x40021400
 8002318:	40021800 	.word	0x40021800
 800231c:	40021c00 	.word	0x40021c00
 8002320:	40022000 	.word	0x40022000
 8002324:	40022400 	.word	0x40022400
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	041a      	lsls	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	4a1f      	ldr	r2, [pc, #124]	@ (80023f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	@ 0x40
 800237a:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002386:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff f8d2 	bl	8001534 <HAL_GetTick>
 8002390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002392:	e009      	b.n	80023a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002394:	f7ff f8ce 	bl	8001534 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023a2:	d901      	bls.n	80023a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e01f      	b.n	80023e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b4:	d1ee      	bne.n	8002394 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023bc:	f7ff f8ba 	bl	8001534 <HAL_GetTick>
 80023c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023c2:	e009      	b.n	80023d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023c4:	f7ff f8b6 	bl	8001534 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023d2:	d901      	bls.n	80023d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e007      	b.n	80023e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d8:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023e4:	d1ee      	bne.n	80023c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	420e0040 	.word	0x420e0040
 80023f8:	40007000 	.word	0x40007000
 80023fc:	420e0044 	.word	0x420e0044

08002400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e267      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d075      	beq.n	800250a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800241e:	4b88      	ldr	r3, [pc, #544]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b85      	ldr	r3, [pc, #532]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002432:	2b08      	cmp	r3, #8
 8002434:	d112      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4b82      	ldr	r3, [pc, #520]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4b7e      	ldr	r3, [pc, #504]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d05b      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d157      	bne.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e242      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x74>
 8002466:	4b76      	ldr	r3, [pc, #472]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b70      	ldr	r3, [pc, #448]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6f      	ldr	r2, [pc, #444]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6d      	ldr	r3, [pc, #436]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6c      	ldr	r2, [pc, #432]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002498:	4b69      	ldr	r3, [pc, #420]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a68      	ldr	r2, [pc, #416]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b66      	ldr	r3, [pc, #408]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a65      	ldr	r2, [pc, #404]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f83c 	bl	8001534 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f838 	bl	8001534 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e207      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff f828 	bl	8001534 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff f824 	bl	8001534 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	@ 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1f3      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b51      	ldr	r3, [pc, #324]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002516:	4b4a      	ldr	r3, [pc, #296]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b47      	ldr	r3, [pc, #284]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b44      	ldr	r3, [pc, #272]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1c7      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3b      	ldr	r3, [pc, #236]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4937      	ldr	r1, [pc, #220]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b34      	ldr	r3, [pc, #208]	@ (8002644 <HAL_RCC_OscConfig+0x244>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe ffdd 	bl	8001534 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe ffd9 	bl	8001534 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1a8      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b28      	ldr	r3, [pc, #160]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4925      	ldr	r1, [pc, #148]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_RCC_OscConfig+0x244>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe ffbc 	bl	8001534 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fe ffb8 	bl	8001534 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e187      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d036      	beq.n	8002658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x248>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe ff9c 	bl	8001534 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7fe ff98 	bl	8001534 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e167      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x200>
 800261e:	e01b      	b.n	8002658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_RCC_OscConfig+0x248>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7fe ff85 	bl	8001534 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e00e      	b.n	800264c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe ff81 	bl	8001534 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d907      	bls.n	800264c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e150      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002640:	40023800 	.word	0x40023800
 8002644:	42470000 	.word	0x42470000
 8002648:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ea      	bne.n	800262e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8097 	beq.w	8002794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b81      	ldr	r3, [pc, #516]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b7d      	ldr	r3, [pc, #500]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	4a7c      	ldr	r2, [pc, #496]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	@ 0x40
 8002686:	4b7a      	ldr	r3, [pc, #488]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b77      	ldr	r3, [pc, #476]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b74      	ldr	r3, [pc, #464]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a73      	ldr	r2, [pc, #460]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe ff41 	bl	8001534 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe ff3d 	bl	8001534 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e10c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x2ea>
 80026dc:	4b64      	ldr	r3, [pc, #400]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e0:	4a63      	ldr	r2, [pc, #396]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e8:	e01c      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x30c>
 80026f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002702:	4a5b      	ldr	r2, [pc, #364]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	@ 0x70
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 800270c:	4b58      	ldr	r3, [pc, #352]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a57      	ldr	r2, [pc, #348]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	4b55      	ldr	r3, [pc, #340]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a54      	ldr	r2, [pc, #336]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe ff02 	bl	8001534 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fefe 	bl	8001534 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0cb      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	4b49      	ldr	r3, [pc, #292]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ee      	beq.n	8002734 <HAL_RCC_OscConfig+0x334>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe feec 	bl	8001534 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fee8 	bl	8001534 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0b5      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	4b3e      	ldr	r3, [pc, #248]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b39      	ldr	r3, [pc, #228]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	4a38      	ldr	r2, [pc, #224]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002792:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a1 	beq.w	80028e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279e:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d05c      	beq.n	8002864 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d141      	bne.n	8002836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <HAL_RCC_OscConfig+0x478>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe febc 	bl	8001534 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe feb8 	bl	8001534 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e087      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	491b      	ldr	r1, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_OscConfig+0x478>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fe91 	bl	8001534 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe fe8d 	bl	8001534 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e05c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x416>
 8002834:	e054      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fe7a 	bl	8001534 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fe76 	bl	8001534 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e045      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
 8002862:	e03d      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e038      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000
 8002878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x4ec>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d028      	beq.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d121      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d11a      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d111      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cc      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90c      	bls.n	800292c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800294e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4934      	ldr	r1, [pc, #208]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fda8 	bl	8001534 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fe fda4 	bl	8001534 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20c      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fd08 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08005234 	.word	0x08005234
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac0:	b094      	sub	sp, #80	@ 0x50
 8002ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad4:	4b79      	ldr	r3, [pc, #484]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d00d      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x40>
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	f200 80e1 	bhi.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aee:	e0db      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b73      	ldr	r3, [pc, #460]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002af4:	e0db      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af6:	4b73      	ldr	r3, [pc, #460]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002afa:	e0d8      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4b6f      	ldr	r3, [pc, #444]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b06:	4b6d      	ldr	r3, [pc, #436]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	2200      	movs	r2, #0
 8002b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b26:	2300      	movs	r3, #0
 8002b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b2e:	4622      	mov	r2, r4
 8002b30:	462b      	mov	r3, r5
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	0159      	lsls	r1, r3, #5
 8002b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b40:	0150      	lsls	r0, r2, #5
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4621      	mov	r1, r4
 8002b48:	1a51      	subs	r1, r2, r1
 8002b4a:	6139      	str	r1, [r7, #16]
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b60:	4659      	mov	r1, fp
 8002b62:	018b      	lsls	r3, r1, #6
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	018a      	lsls	r2, r1, #6
 8002b6e:	4651      	mov	r1, sl
 8002b70:	ebb2 0801 	subs.w	r8, r2, r1
 8002b74:	4659      	mov	r1, fp
 8002b76:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	4623      	mov	r3, r4
 8002b94:	eb18 0303 	adds.w	r3, r8, r3
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	eb49 0303 	adc.w	r3, r9, r3
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bae:	4629      	mov	r1, r5
 8002bb0:	024b      	lsls	r3, r1, #9
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb8:	4621      	mov	r1, r4
 8002bba:	024a      	lsls	r2, r1, #9
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bcc:	f7fd fb60 	bl	8000290 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd8:	e058      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b38      	ldr	r3, [pc, #224]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	4611      	mov	r1, r2
 8002be6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	f04f 0000 	mov.w	r0, #0
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	0159      	lsls	r1, r3, #5
 8002c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c06:	0150      	lsls	r0, r2, #5
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c12:	4649      	mov	r1, r9
 8002c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c30:	eb63 050b 	sbc.w	r5, r3, fp
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	00eb      	lsls	r3, r5, #3
 8002c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c42:	00e2      	lsls	r2, r4, #3
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	4643      	mov	r3, r8
 8002c4a:	18e3      	adds	r3, r4, r3
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	464b      	mov	r3, r9
 8002c50:	eb45 0303 	adc.w	r3, r5, r3
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c62:	4629      	mov	r1, r5
 8002c64:	028b      	lsls	r3, r1, #10
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	028a      	lsls	r2, r1, #10
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	61fa      	str	r2, [r7, #28]
 8002c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c80:	f7fd fb06 	bl	8000290 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002caa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3750      	adds	r7, #80	@ 0x50
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	@ (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08005244 	.word	0x08005244

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffdc 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	@ (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08005244 	.word	0x08005244

08002d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07b      	b.n	8002e3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d52:	d009      	beq.n	8002d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
 8002d5a:	e005      	b.n	8002d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe f830 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dec:	ea42 0103 	orr.w	r1, r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	f003 0104 	and.w	r1, r3, #4
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	f003 0210 	and.w	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
    return;
 8002e82:	e0ce      	b.n	8003022 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_SPI_IRQHandler+0x5e>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    return;
 8002ea0:	e0bf      	b.n	8003022 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_SPI_IRQHandler+0x7e>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80b0 	beq.w	8003022 <HAL_SPI_IRQHandler+0x1de>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80aa 	beq.w	8003022 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d023      	beq.n	8002f20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d011      	beq.n	8002f08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	e00b      	b.n	8002f20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
        return;
 8002f1e:	e080      	b.n	8003022 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d014      	beq.n	8002f54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00c      	beq.n	8002f78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f043 0208 	orr.w	r2, r3, #8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d04f      	beq.n	8003020 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <HAL_SPI_IRQHandler+0x168>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d034      	beq.n	8003016 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0203 	bic.w	r2, r2, #3
 8002fba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc8:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <HAL_SPI_IRQHandler+0x1e4>)
 8002fca:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe fd67 	bl	8001aa4 <HAL_DMA_Abort_IT>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d016      	beq.n	800301e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8003028 <HAL_SPI_IRQHandler+0x1e4>)
 8002ff6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe fd51 	bl	8001aa4 <HAL_DMA_Abort_IT>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003014:	e003      	b.n	800301e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f808 	bl	800302c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800301c:	e000      	b.n	8003020 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800301e:	bf00      	nop
    return;
 8003020:	bf00      	nop
  }
}
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	08003041 	.word	0x08003041

0800302c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff ffe6 	bl	800302c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e042      	b.n	8003100 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd ff1a 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	@ 0x24
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f001 f889 	bl	80041c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	d175      	bne.n	8003214 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_UART_Transmit+0x2c>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e06e      	b.n	8003216 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2221      	movs	r2, #33	@ 0x21
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003146:	f7fe f9f5 	bl	8001534 <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003160:	d108      	bne.n	8003174 <HAL_UART_Transmit+0x6c>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	e003      	b.n	800317c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800317c:	e02e      	b.n	80031dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	@ 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fd61 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e03a      	b.n	8003216 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	3302      	adds	r3, #2
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	e007      	b.n	80031ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	3301      	adds	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1cb      	bne.n	800317e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2140      	movs	r1, #64	@ 0x40
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fd2d 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e006      	b.n	8003216 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08a      	sub	sp, #40	@ 0x28
 8003222:	af02      	add	r7, sp, #8
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b20      	cmp	r3, #32
 800323c:	f040 8081 	bne.w	8003342 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_UART_Receive+0x2e>
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e079      	b.n	8003344 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2222      	movs	r2, #34	@ 0x22
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003264:	f7fe f966 	bl	8001534 <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327e:	d108      	bne.n	8003292 <HAL_UART_Receive+0x74>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e003      	b.n	800329a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800329a:	e047      	b.n	800332c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2120      	movs	r1, #32
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fcd2 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e042      	b.n	8003344 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10c      	bne.n	80032de <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3302      	adds	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e01f      	b.n	800331e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e6:	d007      	beq.n	80032f8 <HAL_UART_Receive+0xda>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <HAL_UART_Receive+0xe8>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e008      	b.n	8003318 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003312:	b2da      	uxtb	r2, r3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1b2      	bne.n	800329c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	d112      	bne.n	800338c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_UART_Receive_DMA+0x26>
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e00b      	b.n	800338e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	461a      	mov	r2, r3
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fcbe 	bl	8003d04 <UART_Start_Receive_DMA>
 8003388:	4603      	mov	r3, r0
 800338a:	e000      	b.n	800338e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b09a      	sub	sp, #104	@ 0x68
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80033ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033be:	657a      	str	r2, [r7, #84]	@ 0x54
 80033c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80033c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80033cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e5      	bne.n	800339e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3314      	adds	r3, #20
 80033f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80033f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80033f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	2b01      	cmp	r3, #1
 800340c:	d119      	bne.n	8003442 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	61fb      	str	r3, [r7, #28]
   return(result);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f023 0310 	bic.w	r3, r3, #16
 8003424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800342e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e5      	bne.n	800340e <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b40      	cmp	r3, #64	@ 0x40
 800344e:	d136      	bne.n	80034be <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003466:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3314      	adds	r3, #20
 800346e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003470:	61ba      	str	r2, [r7, #24]
 8003472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6979      	ldr	r1, [r7, #20]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	613b      	str	r3, [r7, #16]
   return(result);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d018      	beq.n	80034be <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	2200      	movs	r2, #0
 8003492:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fa93 	bl	80019c4 <HAL_DMA_Abort>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00c      	beq.n	80034be <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fca7 	bl	8001dfc <HAL_DMA_GetError>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d104      	bne.n	80034be <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2210      	movs	r2, #16
 80034b8:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e00a      	b.n	80034d4 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3768      	adds	r7, #104	@ 0x68
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0ba      	sub	sp, #232	@ 0xe8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800351a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_UART_IRQHandler+0x66>
 800352e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fd83 	bl	8004046 <UART_Receive_IT>
      return;
 8003540:	e25b      	b.n	80039fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80de 	beq.w	8003708 <HAL_UART_IRQHandler+0x22c>
 800354c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800355c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80d1 	beq.w	8003708 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_UART_IRQHandler+0xae>
 8003572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0xd2>
 8003596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f043 0202 	orr.w	r2, r3, #2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_UART_IRQHandler+0xf6>
 80035ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d011      	beq.n	8003602 <HAL_UART_IRQHandler+0x126>
 80035de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f043 0208 	orr.w	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 81f2 	beq.w	80039f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_UART_IRQHandler+0x14e>
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fd0e 	bl	8004046 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b40      	cmp	r3, #64	@ 0x40
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <HAL_UART_IRQHandler+0x17a>
 800364e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04f      	beq.n	80036f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fc16 	bl	8003e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d141      	bne.n	80036ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003680:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003696:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800369a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1d9      	bne.n	800366a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c2:	4a7e      	ldr	r2, [pc, #504]	@ (80038bc <HAL_UART_IRQHandler+0x3e0>)
 80036c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe f9ea 	bl	8001aa4 <HAL_DMA_Abort_IT>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036e0:	4610      	mov	r0, r2
 80036e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e00e      	b.n	8003704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f99e 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00a      	b.n	8003704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f99a 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e006      	b.n	8003704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f996 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003702:	e175      	b.n	80039f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	bf00      	nop
    return;
 8003706:	e173      	b.n	80039f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 814f 	bne.w	80039b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8148 	beq.w	80039b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8141 	beq.w	80039b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b40      	cmp	r3, #64	@ 0x40
 8003750:	f040 80b6 	bne.w	80038c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8145 	beq.w	80039f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800376e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003772:	429a      	cmp	r2, r3
 8003774:	f080 813e 	bcs.w	80039f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800377e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800378a:	f000 8088 	beq.w	800389e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1d9      	bne.n	800378e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003802:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003806:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e1      	bne.n	80037da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3314      	adds	r3, #20
 800381c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3314      	adds	r3, #20
 8003836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800383a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800383c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003840:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e3      	bne.n	8003816 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800386c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800386e:	f023 0310 	bic.w	r3, r3, #16
 8003872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003880:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003882:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003886:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800388e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e3      	bne.n	800385c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe f893 	bl	80019c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8c1 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038ba:	e09b      	b.n	80039f4 <HAL_UART_IRQHandler+0x518>
 80038bc:	08003f4f 	.word	0x08003f4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 808e 	beq.w	80039f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8089 	beq.w	80039f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800390a:	647a      	str	r2, [r7, #68]	@ 0x44
 800390c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e3      	bne.n	80038e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	623b      	str	r3, [r7, #32]
   return(result);
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3314      	adds	r3, #20
 800393e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003942:	633a      	str	r2, [r7, #48]	@ 0x30
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e3      	bne.n	800391e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	330c      	adds	r3, #12
 800396a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	60fb      	str	r3, [r7, #12]
   return(result);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0310 	bic.w	r3, r3, #16
 800397a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003988:	61fa      	str	r2, [r7, #28]
 800398a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	69b9      	ldr	r1, [r7, #24]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	617b      	str	r3, [r7, #20]
   return(result);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e3      	bne.n	8003964 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f847 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ae:	e023      	b.n	80039f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_UART_IRQHandler+0x4f4>
 80039bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fad4 	bl	8003f76 <UART_Transmit_IT>
    return;
 80039ce:	e014      	b.n	80039fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <HAL_UART_IRQHandler+0x51e>
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb14 	bl	8004016 <UART_EndTransmit_IT>
    return;
 80039ee:	e004      	b.n	80039fa <HAL_UART_IRQHandler+0x51e>
    return;
 80039f0:	bf00      	nop
 80039f2:	e002      	b.n	80039fa <HAL_UART_IRQHandler+0x51e>
      return;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <HAL_UART_IRQHandler+0x51e>
      return;
 80039f8:	bf00      	nop
  }
}
 80039fa:	37e8      	adds	r7, #232	@ 0xe8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b09c      	sub	sp, #112	@ 0x70
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d172      	bne.n	8003b56 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a72:	2200      	movs	r2, #0
 8003a74:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003a96:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a98:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e5      	bne.n	8003a76 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3314      	adds	r3, #20
 8003ac8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8003acc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ad0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e5      	bne.n	8003aaa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	623b      	str	r3, [r7, #32]
   return(result);
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003af4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003afe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d119      	bne.n	8003b56 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0310 	bic.w	r3, r3, #16
 8003b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003b42:	61fa      	str	r2, [r7, #28]
 8003b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	69b9      	ldr	r1, [r7, #24]
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b58:	2200      	movs	r2, #0
 8003b5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003b6c:	f7ff ff66 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b70:	e002      	b.n	8003b78 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003b72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003b74:	f7fc fd40 	bl	80005f8 <HAL_UART_RxCpltCallback>
}
 8003b78:	bf00      	nop
 8003b7a:	3770      	adds	r7, #112	@ 0x70
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d108      	bne.n	8003bae <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff ff48 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bac:	e002      	b.n	8003bb4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff30 	bl	8003a14 <HAL_UART_RxHalfCpltCallback>
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd8:	2b80      	cmp	r3, #128	@ 0x80
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b21      	cmp	r3, #33	@ 0x21
 8003bee:	d108      	bne.n	8003c02 <UART_DMAError+0x46>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003bfc:	68b8      	ldr	r0, [r7, #8]
 8003bfe:	f000 f91b 	bl	8003e38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0c:	2b40      	cmp	r3, #64	@ 0x40
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b22      	cmp	r3, #34	@ 0x22
 8003c22:	d108      	bne.n	8003c36 <UART_DMAError+0x7a>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003c30:	68b8      	ldr	r0, [r7, #8]
 8003c32:	f000 f929 	bl	8003e88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	f043 0210 	orr.w	r2, r3, #16
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c42:	68b8      	ldr	r0, [r7, #8]
 8003c44:	f7ff fef0 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	e03b      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d037      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fd fc63 	bl	8001534 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e03a      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d023      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b80      	cmp	r3, #128	@ 0x80
 8003c96:	d020      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b40      	cmp	r3, #64	@ 0x40
 8003c9c:	d01d      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d116      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f8e0 	bl	8003e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e00f      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d0b4      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b098      	sub	sp, #96	@ 0x60
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2222      	movs	r2, #34	@ 0x22
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	4a3e      	ldr	r2, [pc, #248]	@ (8003e2c <UART_Start_Receive_DMA+0x128>)
 8003d32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d38:	4a3d      	ldr	r2, [pc, #244]	@ (8003e30 <UART_Start_Receive_DMA+0x12c>)
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d40:	4a3c      	ldr	r2, [pc, #240]	@ (8003e34 <UART_Start_Receive_DMA+0x130>)
 8003d42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	2200      	movs	r2, #0
 8003d4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003d4c:	f107 0308 	add.w	r3, r7, #8
 8003d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	f7fd fdd6 	bl	8001914 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d019      	beq.n	8003dba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003da6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003dac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dda:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003de0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e5      	bne.n	8003dba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e04:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6a39      	ldr	r1, [r7, #32]
 8003e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3760      	adds	r7, #96	@ 0x60
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	08003a55 	.word	0x08003a55
 8003e30:	08003b81 	.word	0x08003b81
 8003e34:	08003bbd 	.word	0x08003bbd

08003e38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	@ 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	61ba      	str	r2, [r7, #24]
 8003e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6979      	ldr	r1, [r7, #20]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003e7c:	bf00      	nop
 8003e7e:	3724      	adds	r7, #36	@ 0x24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b095      	sub	sp, #84	@ 0x54
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eb0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d119      	bne.n	8003f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f023 0310 	bic.w	r3, r3, #16
 8003f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f20:	61ba      	str	r2, [r7, #24]
 8003f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6979      	ldr	r1, [r7, #20]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f42:	bf00      	nop
 8003f44:	3754      	adds	r7, #84	@ 0x54
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff fd5d 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b21      	cmp	r3, #33	@ 0x21
 8003f88:	d13e      	bne.n	8004008 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f92:	d114      	bne.n	8003fbe <UART_Transmit_IT+0x48>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d110      	bne.n	8003fbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]
 8003fbc:	e008      	b.n	8003fd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	1c59      	adds	r1, r3, #1
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6211      	str	r1, [r2, #32]
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10f      	bne.n	8004004 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ff2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004002:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800402c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fce2 	bl	8003a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b08c      	sub	sp, #48	@ 0x30
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b22      	cmp	r3, #34	@ 0x22
 8004058:	f040 80ae 	bne.w	80041b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004064:	d117      	bne.n	8004096 <UART_Receive_IT+0x50>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d113      	bne.n	8004096 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800406e:	2300      	movs	r3, #0
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	b29a      	uxth	r2, r3
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	@ 0x28
 8004094:	e026      	b.n	80040e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a8:	d007      	beq.n	80040ba <UART_Receive_IT+0x74>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <UART_Receive_IT+0x82>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	e008      	b.n	80040da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4619      	mov	r1, r3
 80040f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d15d      	bne.n	80041b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0220 	bic.w	r2, r2, #32
 8004106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	2b01      	cmp	r3, #1
 800413c:	d135      	bne.n	80041aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	613b      	str	r3, [r7, #16]
   return(result);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f023 0310 	bic.w	r3, r3, #16
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004164:	623a      	str	r2, [r7, #32]
 8004166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	69f9      	ldr	r1, [r7, #28]
 800416a:	6a3a      	ldr	r2, [r7, #32]
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	61bb      	str	r3, [r7, #24]
   return(result);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b10      	cmp	r3, #16
 8004184:	d10a      	bne.n	800419c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fc4a 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
 80041a8:	e002      	b.n	80041b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc fa24 	bl	80005f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e002      	b.n	80041ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3730      	adds	r7, #48	@ 0x30
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c8:	b0c0      	sub	sp, #256	@ 0x100
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	68d9      	ldr	r1, [r3, #12]
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	ea40 0301 	orr.w	r3, r0, r1
 80041ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800421c:	f021 010c 	bic.w	r1, r1, #12
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800422a:	430b      	orrs	r3, r1
 800422c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	6999      	ldr	r1, [r3, #24]
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	ea40 0301 	orr.w	r3, r0, r1
 800424a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b8f      	ldr	r3, [pc, #572]	@ (8004490 <UART_SetConfig+0x2cc>)
 8004254:	429a      	cmp	r2, r3
 8004256:	d005      	beq.n	8004264 <UART_SetConfig+0xa0>
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b8d      	ldr	r3, [pc, #564]	@ (8004494 <UART_SetConfig+0x2d0>)
 8004260:	429a      	cmp	r2, r3
 8004262:	d104      	bne.n	800426e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7fe fd50 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8004268:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800426c:	e003      	b.n	8004276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800426e:	f7fe fd37 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8004272:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004280:	f040 810c 	bne.w	800449c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800428e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	1891      	adds	r1, r2, r2
 800429c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800429e:	415b      	adcs	r3, r3
 80042a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042a6:	4621      	mov	r1, r4
 80042a8:	eb12 0801 	adds.w	r8, r2, r1
 80042ac:	4629      	mov	r1, r5
 80042ae:	eb43 0901 	adc.w	r9, r3, r1
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c6:	4690      	mov	r8, r2
 80042c8:	4699      	mov	r9, r3
 80042ca:	4623      	mov	r3, r4
 80042cc:	eb18 0303 	adds.w	r3, r8, r3
 80042d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042d4:	462b      	mov	r3, r5
 80042d6:	eb49 0303 	adc.w	r3, r9, r3
 80042da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042f2:	460b      	mov	r3, r1
 80042f4:	18db      	adds	r3, r3, r3
 80042f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f8:	4613      	mov	r3, r2
 80042fa:	eb42 0303 	adc.w	r3, r2, r3
 80042fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004308:	f7fb ffc2 	bl	8000290 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b61      	ldr	r3, [pc, #388]	@ (8004498 <UART_SetConfig+0x2d4>)
 8004312:	fba3 2302 	umull	r2, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	011c      	lsls	r4, r3, #4
 800431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004324:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004334:	415b      	adcs	r3, r3
 8004336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800433c:	4641      	mov	r1, r8
 800433e:	eb12 0a01 	adds.w	sl, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0b01 	adc.w	fp, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800435c:	4692      	mov	sl, r2
 800435e:	469b      	mov	fp, r3
 8004360:	4643      	mov	r3, r8
 8004362:	eb1a 0303 	adds.w	r3, sl, r3
 8004366:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800436a:	464b      	mov	r3, r9
 800436c:	eb4b 0303 	adc.w	r3, fp, r3
 8004370:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004380:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004388:	460b      	mov	r3, r1
 800438a:	18db      	adds	r3, r3, r3
 800438c:	643b      	str	r3, [r7, #64]	@ 0x40
 800438e:	4613      	mov	r3, r2
 8004390:	eb42 0303 	adc.w	r3, r2, r3
 8004394:	647b      	str	r3, [r7, #68]	@ 0x44
 8004396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800439a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800439e:	f7fb ff77 	bl	8000290 <__aeabi_uldivmod>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004498 <UART_SetConfig+0x2d4>)
 80043aa:	fba3 2301 	umull	r2, r3, r3, r1
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2264      	movs	r2, #100	@ 0x64
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	1acb      	subs	r3, r1, r3
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043be:	4b36      	ldr	r3, [pc, #216]	@ (8004498 <UART_SetConfig+0x2d4>)
 80043c0:	fba3 2302 	umull	r2, r3, r3, r2
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043cc:	441c      	add	r4, r3
 80043ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043e8:	415b      	adcs	r3, r3
 80043ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043f0:	4641      	mov	r1, r8
 80043f2:	1851      	adds	r1, r2, r1
 80043f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80043f6:	4649      	mov	r1, r9
 80043f8:	414b      	adcs	r3, r1
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004408:	4659      	mov	r1, fp
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004412:	4651      	mov	r1, sl
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4642      	mov	r2, r8
 800441e:	189b      	adds	r3, r3, r2
 8004420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004424:	464b      	mov	r3, r9
 8004426:	460a      	mov	r2, r1
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800443c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004444:	460b      	mov	r3, r1
 8004446:	18db      	adds	r3, r3, r3
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800444a:	4613      	mov	r3, r2
 800444c:	eb42 0303 	adc.w	r3, r2, r3
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800445a:	f7fb ff19 	bl	8000290 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <UART_SetConfig+0x2d4>)
 8004464:	fba3 1302 	umull	r1, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2164      	movs	r1, #100	@ 0x64
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	3332      	adds	r3, #50	@ 0x32
 8004476:	4a08      	ldr	r2, [pc, #32]	@ (8004498 <UART_SetConfig+0x2d4>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 0207 	and.w	r2, r3, #7
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4422      	add	r2, r4
 800448a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800448c:	e106      	b.n	800469c <UART_SetConfig+0x4d8>
 800448e:	bf00      	nop
 8004490:	40011000 	.word	0x40011000
 8004494:	40011400 	.word	0x40011400
 8004498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800449c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044ae:	4642      	mov	r2, r8
 80044b0:	464b      	mov	r3, r9
 80044b2:	1891      	adds	r1, r2, r2
 80044b4:	6239      	str	r1, [r7, #32]
 80044b6:	415b      	adcs	r3, r3
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044be:	4641      	mov	r1, r8
 80044c0:	1854      	adds	r4, r2, r1
 80044c2:	4649      	mov	r1, r9
 80044c4:	eb43 0501 	adc.w	r5, r3, r1
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	00eb      	lsls	r3, r5, #3
 80044d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d6:	00e2      	lsls	r2, r4, #3
 80044d8:	4614      	mov	r4, r2
 80044da:	461d      	mov	r5, r3
 80044dc:	4643      	mov	r3, r8
 80044de:	18e3      	adds	r3, r4, r3
 80044e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044e4:	464b      	mov	r3, r9
 80044e6:	eb45 0303 	adc.w	r3, r5, r3
 80044ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800450a:	4629      	mov	r1, r5
 800450c:	008b      	lsls	r3, r1, #2
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004514:	4621      	mov	r1, r4
 8004516:	008a      	lsls	r2, r1, #2
 8004518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800451c:	f7fb feb8 	bl	8000290 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b60      	ldr	r3, [pc, #384]	@ (80046a8 <UART_SetConfig+0x4e4>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011c      	lsls	r4, r3, #4
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004538:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800453c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	61b9      	str	r1, [r7, #24]
 8004548:	415b      	adcs	r3, r3
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004550:	4641      	mov	r1, r8
 8004552:	1851      	adds	r1, r2, r1
 8004554:	6139      	str	r1, [r7, #16]
 8004556:	4649      	mov	r1, r9
 8004558:	414b      	adcs	r3, r1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004568:	4659      	mov	r1, fp
 800456a:	00cb      	lsls	r3, r1, #3
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004572:	4651      	mov	r1, sl
 8004574:	00ca      	lsls	r2, r1, #3
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	4603      	mov	r3, r0
 800457c:	4642      	mov	r2, r8
 800457e:	189b      	adds	r3, r3, r2
 8004580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004584:	464b      	mov	r3, r9
 8004586:	460a      	mov	r2, r1
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800459a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045a8:	4649      	mov	r1, r9
 80045aa:	008b      	lsls	r3, r1, #2
 80045ac:	4641      	mov	r1, r8
 80045ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b2:	4641      	mov	r1, r8
 80045b4:	008a      	lsls	r2, r1, #2
 80045b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045ba:	f7fb fe69 	bl	8000290 <__aeabi_uldivmod>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	4b38      	ldr	r3, [pc, #224]	@ (80046a8 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2301 	umull	r2, r3, r3, r1
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2264      	movs	r2, #100	@ 0x64
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	1acb      	subs	r3, r1, r3
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	3332      	adds	r3, #50	@ 0x32
 80045d8:	4a33      	ldr	r2, [pc, #204]	@ (80046a8 <UART_SetConfig+0x4e4>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045e4:	441c      	add	r4, r3
 80045e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ea:	2200      	movs	r2, #0
 80045ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80045ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80045f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	415b      	adcs	r3, r3
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004636:	464b      	mov	r3, r9
 8004638:	460a      	mov	r2, r1
 800463a:	eb42 0303 	adc.w	r3, r2, r3
 800463e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	663b      	str	r3, [r7, #96]	@ 0x60
 800464a:	667a      	str	r2, [r7, #100]	@ 0x64
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004658:	4649      	mov	r1, r9
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004662:	4641      	mov	r1, r8
 8004664:	008a      	lsls	r2, r1, #2
 8004666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800466a:	f7fb fe11 	bl	8000290 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b0d      	ldr	r3, [pc, #52]	@ (80046a8 <UART_SetConfig+0x4e4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	@ 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	@ 0x32
 8004686:	4a08      	ldr	r2, [pc, #32]	@ (80046a8 <UART_SetConfig+0x4e4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4422      	add	r2, r4
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	bf00      	nop
 800469e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046a2:	46bd      	mov	sp, r7
 80046a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a8:	51eb851f 	.word	0x51eb851f

080046ac <atoi>:
 80046ac:	220a      	movs	r2, #10
 80046ae:	2100      	movs	r1, #0
 80046b0:	f000 b930 	b.w	8004914 <strtol>

080046b4 <malloc>:
 80046b4:	4b02      	ldr	r3, [pc, #8]	@ (80046c0 <malloc+0xc>)
 80046b6:	4601      	mov	r1, r0
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	f000 b825 	b.w	8004708 <_malloc_r>
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c

080046c4 <sbrk_aligned>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004704 <sbrk_aligned+0x40>)
 80046c8:	460c      	mov	r4, r1
 80046ca:	6831      	ldr	r1, [r6, #0]
 80046cc:	4605      	mov	r5, r0
 80046ce:	b911      	cbnz	r1, 80046d6 <sbrk_aligned+0x12>
 80046d0:	f000 f98c 	bl	80049ec <_sbrk_r>
 80046d4:	6030      	str	r0, [r6, #0]
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f987 	bl	80049ec <_sbrk_r>
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	d103      	bne.n	80046ea <sbrk_aligned+0x26>
 80046e2:	f04f 34ff 	mov.w	r4, #4294967295
 80046e6:	4620      	mov	r0, r4
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
 80046ea:	1cc4      	adds	r4, r0, #3
 80046ec:	f024 0403 	bic.w	r4, r4, #3
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d0f8      	beq.n	80046e6 <sbrk_aligned+0x22>
 80046f4:	1a21      	subs	r1, r4, r0
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f978 	bl	80049ec <_sbrk_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d1f2      	bne.n	80046e6 <sbrk_aligned+0x22>
 8004700:	e7ef      	b.n	80046e2 <sbrk_aligned+0x1e>
 8004702:	bf00      	nop
 8004704:	20004a48 	.word	0x20004a48

08004708 <_malloc_r>:
 8004708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800470c:	1ccd      	adds	r5, r1, #3
 800470e:	f025 0503 	bic.w	r5, r5, #3
 8004712:	3508      	adds	r5, #8
 8004714:	2d0c      	cmp	r5, #12
 8004716:	bf38      	it	cc
 8004718:	250c      	movcc	r5, #12
 800471a:	2d00      	cmp	r5, #0
 800471c:	4606      	mov	r6, r0
 800471e:	db01      	blt.n	8004724 <_malloc_r+0x1c>
 8004720:	42a9      	cmp	r1, r5
 8004722:	d904      	bls.n	800472e <_malloc_r+0x26>
 8004724:	230c      	movs	r3, #12
 8004726:	6033      	str	r3, [r6, #0]
 8004728:	2000      	movs	r0, #0
 800472a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800472e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004804 <_malloc_r+0xfc>
 8004732:	f000 f869 	bl	8004808 <__malloc_lock>
 8004736:	f8d8 3000 	ldr.w	r3, [r8]
 800473a:	461c      	mov	r4, r3
 800473c:	bb44      	cbnz	r4, 8004790 <_malloc_r+0x88>
 800473e:	4629      	mov	r1, r5
 8004740:	4630      	mov	r0, r6
 8004742:	f7ff ffbf 	bl	80046c4 <sbrk_aligned>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	4604      	mov	r4, r0
 800474a:	d158      	bne.n	80047fe <_malloc_r+0xf6>
 800474c:	f8d8 4000 	ldr.w	r4, [r8]
 8004750:	4627      	mov	r7, r4
 8004752:	2f00      	cmp	r7, #0
 8004754:	d143      	bne.n	80047de <_malloc_r+0xd6>
 8004756:	2c00      	cmp	r4, #0
 8004758:	d04b      	beq.n	80047f2 <_malloc_r+0xea>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	4639      	mov	r1, r7
 800475e:	4630      	mov	r0, r6
 8004760:	eb04 0903 	add.w	r9, r4, r3
 8004764:	f000 f942 	bl	80049ec <_sbrk_r>
 8004768:	4581      	cmp	r9, r0
 800476a:	d142      	bne.n	80047f2 <_malloc_r+0xea>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	1a6d      	subs	r5, r5, r1
 8004770:	4629      	mov	r1, r5
 8004772:	4630      	mov	r0, r6
 8004774:	f7ff ffa6 	bl	80046c4 <sbrk_aligned>
 8004778:	3001      	adds	r0, #1
 800477a:	d03a      	beq.n	80047f2 <_malloc_r+0xea>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	442b      	add	r3, r5
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	f8d8 3000 	ldr.w	r3, [r8]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	bb62      	cbnz	r2, 80047e4 <_malloc_r+0xdc>
 800478a:	f8c8 7000 	str.w	r7, [r8]
 800478e:	e00f      	b.n	80047b0 <_malloc_r+0xa8>
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	1b52      	subs	r2, r2, r5
 8004794:	d420      	bmi.n	80047d8 <_malloc_r+0xd0>
 8004796:	2a0b      	cmp	r2, #11
 8004798:	d917      	bls.n	80047ca <_malloc_r+0xc2>
 800479a:	1961      	adds	r1, r4, r5
 800479c:	42a3      	cmp	r3, r4
 800479e:	6025      	str	r5, [r4, #0]
 80047a0:	bf18      	it	ne
 80047a2:	6059      	strne	r1, [r3, #4]
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	bf08      	it	eq
 80047a8:	f8c8 1000 	streq.w	r1, [r8]
 80047ac:	5162      	str	r2, [r4, r5]
 80047ae:	604b      	str	r3, [r1, #4]
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 f82f 	bl	8004814 <__malloc_unlock>
 80047b6:	f104 000b 	add.w	r0, r4, #11
 80047ba:	1d23      	adds	r3, r4, #4
 80047bc:	f020 0007 	bic.w	r0, r0, #7
 80047c0:	1ac2      	subs	r2, r0, r3
 80047c2:	bf1c      	itt	ne
 80047c4:	1a1b      	subne	r3, r3, r0
 80047c6:	50a3      	strne	r3, [r4, r2]
 80047c8:	e7af      	b.n	800472a <_malloc_r+0x22>
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	bf0c      	ite	eq
 80047d0:	f8c8 2000 	streq.w	r2, [r8]
 80047d4:	605a      	strne	r2, [r3, #4]
 80047d6:	e7eb      	b.n	80047b0 <_malloc_r+0xa8>
 80047d8:	4623      	mov	r3, r4
 80047da:	6864      	ldr	r4, [r4, #4]
 80047dc:	e7ae      	b.n	800473c <_malloc_r+0x34>
 80047de:	463c      	mov	r4, r7
 80047e0:	687f      	ldr	r7, [r7, #4]
 80047e2:	e7b6      	b.n	8004752 <_malloc_r+0x4a>
 80047e4:	461a      	mov	r2, r3
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d1fb      	bne.n	80047e4 <_malloc_r+0xdc>
 80047ec:	2300      	movs	r3, #0
 80047ee:	6053      	str	r3, [r2, #4]
 80047f0:	e7de      	b.n	80047b0 <_malloc_r+0xa8>
 80047f2:	230c      	movs	r3, #12
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	4630      	mov	r0, r6
 80047f8:	f000 f80c 	bl	8004814 <__malloc_unlock>
 80047fc:	e794      	b.n	8004728 <_malloc_r+0x20>
 80047fe:	6005      	str	r5, [r0, #0]
 8004800:	e7d6      	b.n	80047b0 <_malloc_r+0xa8>
 8004802:	bf00      	nop
 8004804:	20004a4c 	.word	0x20004a4c

08004808 <__malloc_lock>:
 8004808:	4801      	ldr	r0, [pc, #4]	@ (8004810 <__malloc_lock+0x8>)
 800480a:	f000 b929 	b.w	8004a60 <__retarget_lock_acquire_recursive>
 800480e:	bf00      	nop
 8004810:	20004b8c 	.word	0x20004b8c

08004814 <__malloc_unlock>:
 8004814:	4801      	ldr	r0, [pc, #4]	@ (800481c <__malloc_unlock+0x8>)
 8004816:	f000 b924 	b.w	8004a62 <__retarget_lock_release_recursive>
 800481a:	bf00      	nop
 800481c:	20004b8c 	.word	0x20004b8c

08004820 <_strtol_l.constprop.0>:
 8004820:	2b24      	cmp	r3, #36	@ 0x24
 8004822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004826:	4686      	mov	lr, r0
 8004828:	4690      	mov	r8, r2
 800482a:	d801      	bhi.n	8004830 <_strtol_l.constprop.0+0x10>
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <_strtol_l.constprop.0+0x1e>
 8004830:	f000 f8ec 	bl	8004a0c <__errno>
 8004834:	2316      	movs	r3, #22
 8004836:	6003      	str	r3, [r0, #0]
 8004838:	2000      	movs	r0, #0
 800483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483e:	4834      	ldr	r0, [pc, #208]	@ (8004910 <_strtol_l.constprop.0+0xf0>)
 8004840:	460d      	mov	r5, r1
 8004842:	462a      	mov	r2, r5
 8004844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004848:	5d06      	ldrb	r6, [r0, r4]
 800484a:	f016 0608 	ands.w	r6, r6, #8
 800484e:	d1f8      	bne.n	8004842 <_strtol_l.constprop.0+0x22>
 8004850:	2c2d      	cmp	r4, #45	@ 0x2d
 8004852:	d12d      	bne.n	80048b0 <_strtol_l.constprop.0+0x90>
 8004854:	782c      	ldrb	r4, [r5, #0]
 8004856:	2601      	movs	r6, #1
 8004858:	1c95      	adds	r5, r2, #2
 800485a:	f033 0210 	bics.w	r2, r3, #16
 800485e:	d109      	bne.n	8004874 <_strtol_l.constprop.0+0x54>
 8004860:	2c30      	cmp	r4, #48	@ 0x30
 8004862:	d12a      	bne.n	80048ba <_strtol_l.constprop.0+0x9a>
 8004864:	782a      	ldrb	r2, [r5, #0]
 8004866:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800486a:	2a58      	cmp	r2, #88	@ 0x58
 800486c:	d125      	bne.n	80048ba <_strtol_l.constprop.0+0x9a>
 800486e:	786c      	ldrb	r4, [r5, #1]
 8004870:	2310      	movs	r3, #16
 8004872:	3502      	adds	r5, #2
 8004874:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004878:	f10c 3cff 	add.w	ip, ip, #4294967295
 800487c:	2200      	movs	r2, #0
 800487e:	fbbc f9f3 	udiv	r9, ip, r3
 8004882:	4610      	mov	r0, r2
 8004884:	fb03 ca19 	mls	sl, r3, r9, ip
 8004888:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800488c:	2f09      	cmp	r7, #9
 800488e:	d81b      	bhi.n	80048c8 <_strtol_l.constprop.0+0xa8>
 8004890:	463c      	mov	r4, r7
 8004892:	42a3      	cmp	r3, r4
 8004894:	dd27      	ble.n	80048e6 <_strtol_l.constprop.0+0xc6>
 8004896:	1c57      	adds	r7, r2, #1
 8004898:	d007      	beq.n	80048aa <_strtol_l.constprop.0+0x8a>
 800489a:	4581      	cmp	r9, r0
 800489c:	d320      	bcc.n	80048e0 <_strtol_l.constprop.0+0xc0>
 800489e:	d101      	bne.n	80048a4 <_strtol_l.constprop.0+0x84>
 80048a0:	45a2      	cmp	sl, r4
 80048a2:	db1d      	blt.n	80048e0 <_strtol_l.constprop.0+0xc0>
 80048a4:	fb00 4003 	mla	r0, r0, r3, r4
 80048a8:	2201      	movs	r2, #1
 80048aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048ae:	e7eb      	b.n	8004888 <_strtol_l.constprop.0+0x68>
 80048b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80048b2:	bf04      	itt	eq
 80048b4:	782c      	ldrbeq	r4, [r5, #0]
 80048b6:	1c95      	addeq	r5, r2, #2
 80048b8:	e7cf      	b.n	800485a <_strtol_l.constprop.0+0x3a>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1da      	bne.n	8004874 <_strtol_l.constprop.0+0x54>
 80048be:	2c30      	cmp	r4, #48	@ 0x30
 80048c0:	bf0c      	ite	eq
 80048c2:	2308      	moveq	r3, #8
 80048c4:	230a      	movne	r3, #10
 80048c6:	e7d5      	b.n	8004874 <_strtol_l.constprop.0+0x54>
 80048c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80048cc:	2f19      	cmp	r7, #25
 80048ce:	d801      	bhi.n	80048d4 <_strtol_l.constprop.0+0xb4>
 80048d0:	3c37      	subs	r4, #55	@ 0x37
 80048d2:	e7de      	b.n	8004892 <_strtol_l.constprop.0+0x72>
 80048d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80048d8:	2f19      	cmp	r7, #25
 80048da:	d804      	bhi.n	80048e6 <_strtol_l.constprop.0+0xc6>
 80048dc:	3c57      	subs	r4, #87	@ 0x57
 80048de:	e7d8      	b.n	8004892 <_strtol_l.constprop.0+0x72>
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	e7e1      	b.n	80048aa <_strtol_l.constprop.0+0x8a>
 80048e6:	1c53      	adds	r3, r2, #1
 80048e8:	d108      	bne.n	80048fc <_strtol_l.constprop.0+0xdc>
 80048ea:	2322      	movs	r3, #34	@ 0x22
 80048ec:	f8ce 3000 	str.w	r3, [lr]
 80048f0:	4660      	mov	r0, ip
 80048f2:	f1b8 0f00 	cmp.w	r8, #0
 80048f6:	d0a0      	beq.n	800483a <_strtol_l.constprop.0+0x1a>
 80048f8:	1e69      	subs	r1, r5, #1
 80048fa:	e006      	b.n	800490a <_strtol_l.constprop.0+0xea>
 80048fc:	b106      	cbz	r6, 8004900 <_strtol_l.constprop.0+0xe0>
 80048fe:	4240      	negs	r0, r0
 8004900:	f1b8 0f00 	cmp.w	r8, #0
 8004904:	d099      	beq.n	800483a <_strtol_l.constprop.0+0x1a>
 8004906:	2a00      	cmp	r2, #0
 8004908:	d1f6      	bne.n	80048f8 <_strtol_l.constprop.0+0xd8>
 800490a:	f8c8 1000 	str.w	r1, [r8]
 800490e:	e794      	b.n	800483a <_strtol_l.constprop.0+0x1a>
 8004910:	08005255 	.word	0x08005255

08004914 <strtol>:
 8004914:	4613      	mov	r3, r2
 8004916:	460a      	mov	r2, r1
 8004918:	4601      	mov	r1, r0
 800491a:	4802      	ldr	r0, [pc, #8]	@ (8004924 <strtol+0x10>)
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f7ff bf7f 	b.w	8004820 <_strtol_l.constprop.0>
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c

08004928 <siprintf>:
 8004928:	b40e      	push	{r1, r2, r3}
 800492a:	b500      	push	{lr}
 800492c:	b09c      	sub	sp, #112	@ 0x70
 800492e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004930:	9002      	str	r0, [sp, #8]
 8004932:	9006      	str	r0, [sp, #24]
 8004934:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004938:	4809      	ldr	r0, [pc, #36]	@ (8004960 <siprintf+0x38>)
 800493a:	9107      	str	r1, [sp, #28]
 800493c:	9104      	str	r1, [sp, #16]
 800493e:	4909      	ldr	r1, [pc, #36]	@ (8004964 <siprintf+0x3c>)
 8004940:	f853 2b04 	ldr.w	r2, [r3], #4
 8004944:	9105      	str	r1, [sp, #20]
 8004946:	6800      	ldr	r0, [r0, #0]
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	a902      	add	r1, sp, #8
 800494c:	f000 f93e 	bl	8004bcc <_svfiprintf_r>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	b01c      	add	sp, #112	@ 0x70
 8004958:	f85d eb04 	ldr.w	lr, [sp], #4
 800495c:	b003      	add	sp, #12
 800495e:	4770      	bx	lr
 8004960:	2000000c 	.word	0x2000000c
 8004964:	ffff0208 	.word	0xffff0208

08004968 <_vsniprintf_r>:
 8004968:	b530      	push	{r4, r5, lr}
 800496a:	4614      	mov	r4, r2
 800496c:	2c00      	cmp	r4, #0
 800496e:	b09b      	sub	sp, #108	@ 0x6c
 8004970:	4605      	mov	r5, r0
 8004972:	461a      	mov	r2, r3
 8004974:	da05      	bge.n	8004982 <_vsniprintf_r+0x1a>
 8004976:	238b      	movs	r3, #139	@ 0x8b
 8004978:	6003      	str	r3, [r0, #0]
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	b01b      	add	sp, #108	@ 0x6c
 8004980:	bd30      	pop	{r4, r5, pc}
 8004982:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004986:	f8ad 300c 	strh.w	r3, [sp, #12]
 800498a:	bf14      	ite	ne
 800498c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004990:	4623      	moveq	r3, r4
 8004992:	9302      	str	r3, [sp, #8]
 8004994:	9305      	str	r3, [sp, #20]
 8004996:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800499a:	9100      	str	r1, [sp, #0]
 800499c:	9104      	str	r1, [sp, #16]
 800499e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80049a2:	4669      	mov	r1, sp
 80049a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80049a6:	f000 f911 	bl	8004bcc <_svfiprintf_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	bfbc      	itt	lt
 80049ae:	238b      	movlt	r3, #139	@ 0x8b
 80049b0:	602b      	strlt	r3, [r5, #0]
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	d0e3      	beq.n	800497e <_vsniprintf_r+0x16>
 80049b6:	9b00      	ldr	r3, [sp, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e7df      	b.n	800497e <_vsniprintf_r+0x16>
	...

080049c0 <vsniprintf>:
 80049c0:	b507      	push	{r0, r1, r2, lr}
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	460a      	mov	r2, r1
 80049c8:	4601      	mov	r1, r0
 80049ca:	4803      	ldr	r0, [pc, #12]	@ (80049d8 <vsniprintf+0x18>)
 80049cc:	6800      	ldr	r0, [r0, #0]
 80049ce:	f7ff ffcb 	bl	8004968 <_vsniprintf_r>
 80049d2:	b003      	add	sp, #12
 80049d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80049d8:	2000000c 	.word	0x2000000c

080049dc <memset>:
 80049dc:	4402      	add	r2, r0
 80049de:	4603      	mov	r3, r0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <_sbrk_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d06      	ldr	r5, [pc, #24]	@ (8004a08 <_sbrk_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7fc fcc4 	bl	8001384 <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_sbrk_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_sbrk_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20004b88 	.word	0x20004b88

08004a0c <__errno>:
 8004a0c:	4b01      	ldr	r3, [pc, #4]	@ (8004a14 <__errno+0x8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	@ (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f000 fba8 	bl	8005180 <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08005390 	.word	0x08005390
 8004a54:	08005390 	.word	0x08005390
 8004a58:	08005390 	.word	0x08005390
 8004a5c:	08005394 	.word	0x08005394

08004a60 <__retarget_lock_acquire_recursive>:
 8004a60:	4770      	bx	lr

08004a62 <__retarget_lock_release_recursive>:
 8004a62:	4770      	bx	lr

08004a64 <memcpy>:
 8004a64:	440a      	add	r2, r1
 8004a66:	4291      	cmp	r1, r2
 8004a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a6c:	d100      	bne.n	8004a70 <memcpy+0xc>
 8004a6e:	4770      	bx	lr
 8004a70:	b510      	push	{r4, lr}
 8004a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	d1f9      	bne.n	8004a72 <memcpy+0xe>
 8004a7e:	bd10      	pop	{r4, pc}

08004a80 <_free_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4605      	mov	r5, r0
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d041      	beq.n	8004b0c <_free_r+0x8c>
 8004a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8c:	1f0c      	subs	r4, r1, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfb8      	it	lt
 8004a92:	18e4      	addlt	r4, r4, r3
 8004a94:	f7ff feb8 	bl	8004808 <__malloc_lock>
 8004a98:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <_free_r+0x90>)
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	b933      	cbnz	r3, 8004aac <_free_r+0x2c>
 8004a9e:	6063      	str	r3, [r4, #4]
 8004aa0:	6014      	str	r4, [r2, #0]
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aa8:	f7ff beb4 	b.w	8004814 <__malloc_unlock>
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d908      	bls.n	8004ac2 <_free_r+0x42>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	1821      	adds	r1, r4, r0
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf01      	itttt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	1809      	addeq	r1, r1, r0
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	e7ed      	b.n	8004a9e <_free_r+0x1e>
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b10b      	cbz	r3, 8004acc <_free_r+0x4c>
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	d9fa      	bls.n	8004ac2 <_free_r+0x42>
 8004acc:	6811      	ldr	r1, [r2, #0]
 8004ace:	1850      	adds	r0, r2, r1
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d10b      	bne.n	8004aec <_free_r+0x6c>
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	4401      	add	r1, r0
 8004ad8:	1850      	adds	r0, r2, r1
 8004ada:	4283      	cmp	r3, r0
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	d1e0      	bne.n	8004aa2 <_free_r+0x22>
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	6053      	str	r3, [r2, #4]
 8004ae6:	4408      	add	r0, r1
 8004ae8:	6010      	str	r0, [r2, #0]
 8004aea:	e7da      	b.n	8004aa2 <_free_r+0x22>
 8004aec:	d902      	bls.n	8004af4 <_free_r+0x74>
 8004aee:	230c      	movs	r3, #12
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	e7d6      	b.n	8004aa2 <_free_r+0x22>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	1821      	adds	r1, r4, r0
 8004af8:	428b      	cmp	r3, r1
 8004afa:	bf04      	itt	eq
 8004afc:	6819      	ldreq	r1, [r3, #0]
 8004afe:	685b      	ldreq	r3, [r3, #4]
 8004b00:	6063      	str	r3, [r4, #4]
 8004b02:	bf04      	itt	eq
 8004b04:	1809      	addeq	r1, r1, r0
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	6054      	str	r4, [r2, #4]
 8004b0a:	e7ca      	b.n	8004aa2 <_free_r+0x22>
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	bf00      	nop
 8004b10:	20004a4c 	.word	0x20004a4c

08004b14 <__ssputs_r>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	688e      	ldr	r6, [r1, #8]
 8004b1a:	461f      	mov	r7, r3
 8004b1c:	42be      	cmp	r6, r7
 8004b1e:	680b      	ldr	r3, [r1, #0]
 8004b20:	4682      	mov	sl, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	4690      	mov	r8, r2
 8004b26:	d82d      	bhi.n	8004b84 <__ssputs_r+0x70>
 8004b28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b30:	d026      	beq.n	8004b80 <__ssputs_r+0x6c>
 8004b32:	6965      	ldr	r5, [r4, #20]
 8004b34:	6909      	ldr	r1, [r1, #16]
 8004b36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b3a:	eba3 0901 	sub.w	r9, r3, r1
 8004b3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b42:	1c7b      	adds	r3, r7, #1
 8004b44:	444b      	add	r3, r9
 8004b46:	106d      	asrs	r5, r5, #1
 8004b48:	429d      	cmp	r5, r3
 8004b4a:	bf38      	it	cc
 8004b4c:	461d      	movcc	r5, r3
 8004b4e:	0553      	lsls	r3, r2, #21
 8004b50:	d527      	bpl.n	8004ba2 <__ssputs_r+0x8e>
 8004b52:	4629      	mov	r1, r5
 8004b54:	f7ff fdd8 	bl	8004708 <_malloc_r>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	b360      	cbz	r0, 8004bb6 <__ssputs_r+0xa2>
 8004b5c:	6921      	ldr	r1, [r4, #16]
 8004b5e:	464a      	mov	r2, r9
 8004b60:	f7ff ff80 	bl	8004a64 <memcpy>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b6e:	81a3      	strh	r3, [r4, #12]
 8004b70:	6126      	str	r6, [r4, #16]
 8004b72:	6165      	str	r5, [r4, #20]
 8004b74:	444e      	add	r6, r9
 8004b76:	eba5 0509 	sub.w	r5, r5, r9
 8004b7a:	6026      	str	r6, [r4, #0]
 8004b7c:	60a5      	str	r5, [r4, #8]
 8004b7e:	463e      	mov	r6, r7
 8004b80:	42be      	cmp	r6, r7
 8004b82:	d900      	bls.n	8004b86 <__ssputs_r+0x72>
 8004b84:	463e      	mov	r6, r7
 8004b86:	6820      	ldr	r0, [r4, #0]
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4641      	mov	r1, r8
 8004b8c:	f000 faa8 	bl	80050e0 <memmove>
 8004b90:	68a3      	ldr	r3, [r4, #8]
 8004b92:	1b9b      	subs	r3, r3, r6
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	4433      	add	r3, r6
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	462a      	mov	r2, r5
 8004ba4:	f000 fab6 	bl	8005114 <_realloc_r>
 8004ba8:	4606      	mov	r6, r0
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d1e0      	bne.n	8004b70 <__ssputs_r+0x5c>
 8004bae:	6921      	ldr	r1, [r4, #16]
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	f7ff ff65 	bl	8004a80 <_free_r>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	f8ca 3000 	str.w	r3, [sl]
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc8:	e7e9      	b.n	8004b9e <__ssputs_r+0x8a>
	...

08004bcc <_svfiprintf_r>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	4698      	mov	r8, r3
 8004bd2:	898b      	ldrh	r3, [r1, #12]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	b09d      	sub	sp, #116	@ 0x74
 8004bd8:	4607      	mov	r7, r0
 8004bda:	460d      	mov	r5, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	d510      	bpl.n	8004c02 <_svfiprintf_r+0x36>
 8004be0:	690b      	ldr	r3, [r1, #16]
 8004be2:	b973      	cbnz	r3, 8004c02 <_svfiprintf_r+0x36>
 8004be4:	2140      	movs	r1, #64	@ 0x40
 8004be6:	f7ff fd8f 	bl	8004708 <_malloc_r>
 8004bea:	6028      	str	r0, [r5, #0]
 8004bec:	6128      	str	r0, [r5, #16]
 8004bee:	b930      	cbnz	r0, 8004bfe <_svfiprintf_r+0x32>
 8004bf0:	230c      	movs	r3, #12
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	b01d      	add	sp, #116	@ 0x74
 8004bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfe:	2340      	movs	r3, #64	@ 0x40
 8004c00:	616b      	str	r3, [r5, #20]
 8004c02:	2300      	movs	r3, #0
 8004c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c06:	2320      	movs	r3, #32
 8004c08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c10:	2330      	movs	r3, #48	@ 0x30
 8004c12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004db0 <_svfiprintf_r+0x1e4>
 8004c16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c1a:	f04f 0901 	mov.w	r9, #1
 8004c1e:	4623      	mov	r3, r4
 8004c20:	469a      	mov	sl, r3
 8004c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c26:	b10a      	cbz	r2, 8004c2c <_svfiprintf_r+0x60>
 8004c28:	2a25      	cmp	r2, #37	@ 0x25
 8004c2a:	d1f9      	bne.n	8004c20 <_svfiprintf_r+0x54>
 8004c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c30:	d00b      	beq.n	8004c4a <_svfiprintf_r+0x7e>
 8004c32:	465b      	mov	r3, fp
 8004c34:	4622      	mov	r2, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	4638      	mov	r0, r7
 8004c3a:	f7ff ff6b 	bl	8004b14 <__ssputs_r>
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f000 80a7 	beq.w	8004d92 <_svfiprintf_r+0x1c6>
 8004c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c46:	445a      	add	r2, fp
 8004c48:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 809f 	beq.w	8004d92 <_svfiprintf_r+0x1c6>
 8004c54:	2300      	movs	r3, #0
 8004c56:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c5e:	f10a 0a01 	add.w	sl, sl, #1
 8004c62:	9304      	str	r3, [sp, #16]
 8004c64:	9307      	str	r3, [sp, #28]
 8004c66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c6c:	4654      	mov	r4, sl
 8004c6e:	2205      	movs	r2, #5
 8004c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c74:	484e      	ldr	r0, [pc, #312]	@ (8004db0 <_svfiprintf_r+0x1e4>)
 8004c76:	f7fb fabb 	bl	80001f0 <memchr>
 8004c7a:	9a04      	ldr	r2, [sp, #16]
 8004c7c:	b9d8      	cbnz	r0, 8004cb6 <_svfiprintf_r+0xea>
 8004c7e:	06d0      	lsls	r0, r2, #27
 8004c80:	bf44      	itt	mi
 8004c82:	2320      	movmi	r3, #32
 8004c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c88:	0711      	lsls	r1, r2, #28
 8004c8a:	bf44      	itt	mi
 8004c8c:	232b      	movmi	r3, #43	@ 0x2b
 8004c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c92:	f89a 3000 	ldrb.w	r3, [sl]
 8004c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c98:	d015      	beq.n	8004cc6 <_svfiprintf_r+0xfa>
 8004c9a:	9a07      	ldr	r2, [sp, #28]
 8004c9c:	4654      	mov	r4, sl
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f04f 0c0a 	mov.w	ip, #10
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004caa:	3b30      	subs	r3, #48	@ 0x30
 8004cac:	2b09      	cmp	r3, #9
 8004cae:	d94b      	bls.n	8004d48 <_svfiprintf_r+0x17c>
 8004cb0:	b1b0      	cbz	r0, 8004ce0 <_svfiprintf_r+0x114>
 8004cb2:	9207      	str	r2, [sp, #28]
 8004cb4:	e014      	b.n	8004ce0 <_svfiprintf_r+0x114>
 8004cb6:	eba0 0308 	sub.w	r3, r0, r8
 8004cba:	fa09 f303 	lsl.w	r3, r9, r3
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	46a2      	mov	sl, r4
 8004cc4:	e7d2      	b.n	8004c6c <_svfiprintf_r+0xa0>
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	1d19      	adds	r1, r3, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	9103      	str	r1, [sp, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bfbb      	ittet	lt
 8004cd2:	425b      	neglt	r3, r3
 8004cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd8:	9307      	strge	r3, [sp, #28]
 8004cda:	9307      	strlt	r3, [sp, #28]
 8004cdc:	bfb8      	it	lt
 8004cde:	9204      	strlt	r2, [sp, #16]
 8004ce0:	7823      	ldrb	r3, [r4, #0]
 8004ce2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ce4:	d10a      	bne.n	8004cfc <_svfiprintf_r+0x130>
 8004ce6:	7863      	ldrb	r3, [r4, #1]
 8004ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cea:	d132      	bne.n	8004d52 <_svfiprintf_r+0x186>
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	9203      	str	r2, [sp, #12]
 8004cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cf8:	3402      	adds	r4, #2
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004dc0 <_svfiprintf_r+0x1f4>
 8004d00:	7821      	ldrb	r1, [r4, #0]
 8004d02:	2203      	movs	r2, #3
 8004d04:	4650      	mov	r0, sl
 8004d06:	f7fb fa73 	bl	80001f0 <memchr>
 8004d0a:	b138      	cbz	r0, 8004d1c <_svfiprintf_r+0x150>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	eba0 000a 	sub.w	r0, r0, sl
 8004d12:	2240      	movs	r2, #64	@ 0x40
 8004d14:	4082      	lsls	r2, r0
 8004d16:	4313      	orrs	r3, r2
 8004d18:	3401      	adds	r4, #1
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d20:	4824      	ldr	r0, [pc, #144]	@ (8004db4 <_svfiprintf_r+0x1e8>)
 8004d22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d26:	2206      	movs	r2, #6
 8004d28:	f7fb fa62 	bl	80001f0 <memchr>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d036      	beq.n	8004d9e <_svfiprintf_r+0x1d2>
 8004d30:	4b21      	ldr	r3, [pc, #132]	@ (8004db8 <_svfiprintf_r+0x1ec>)
 8004d32:	bb1b      	cbnz	r3, 8004d7c <_svfiprintf_r+0x1b0>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	3307      	adds	r3, #7
 8004d38:	f023 0307 	bic.w	r3, r3, #7
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	9303      	str	r3, [sp, #12]
 8004d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d42:	4433      	add	r3, r6
 8004d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d46:	e76a      	b.n	8004c1e <_svfiprintf_r+0x52>
 8004d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	2001      	movs	r0, #1
 8004d50:	e7a8      	b.n	8004ca4 <_svfiprintf_r+0xd8>
 8004d52:	2300      	movs	r3, #0
 8004d54:	3401      	adds	r4, #1
 8004d56:	9305      	str	r3, [sp, #20]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f04f 0c0a 	mov.w	ip, #10
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d64:	3a30      	subs	r2, #48	@ 0x30
 8004d66:	2a09      	cmp	r2, #9
 8004d68:	d903      	bls.n	8004d72 <_svfiprintf_r+0x1a6>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0c6      	beq.n	8004cfc <_svfiprintf_r+0x130>
 8004d6e:	9105      	str	r1, [sp, #20]
 8004d70:	e7c4      	b.n	8004cfc <_svfiprintf_r+0x130>
 8004d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d76:	4604      	mov	r4, r0
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e7f0      	b.n	8004d5e <_svfiprintf_r+0x192>
 8004d7c:	ab03      	add	r3, sp, #12
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	462a      	mov	r2, r5
 8004d82:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <_svfiprintf_r+0x1f0>)
 8004d84:	a904      	add	r1, sp, #16
 8004d86:	4638      	mov	r0, r7
 8004d88:	f3af 8000 	nop.w
 8004d8c:	1c42      	adds	r2, r0, #1
 8004d8e:	4606      	mov	r6, r0
 8004d90:	d1d6      	bne.n	8004d40 <_svfiprintf_r+0x174>
 8004d92:	89ab      	ldrh	r3, [r5, #12]
 8004d94:	065b      	lsls	r3, r3, #25
 8004d96:	f53f af2d 	bmi.w	8004bf4 <_svfiprintf_r+0x28>
 8004d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d9c:	e72c      	b.n	8004bf8 <_svfiprintf_r+0x2c>
 8004d9e:	ab03      	add	r3, sp, #12
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	462a      	mov	r2, r5
 8004da4:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <_svfiprintf_r+0x1f0>)
 8004da6:	a904      	add	r1, sp, #16
 8004da8:	4638      	mov	r0, r7
 8004daa:	f000 f879 	bl	8004ea0 <_printf_i>
 8004dae:	e7ed      	b.n	8004d8c <_svfiprintf_r+0x1c0>
 8004db0:	08005355 	.word	0x08005355
 8004db4:	0800535f 	.word	0x0800535f
 8004db8:	00000000 	.word	0x00000000
 8004dbc:	08004b15 	.word	0x08004b15
 8004dc0:	0800535b 	.word	0x0800535b

08004dc4 <_printf_common>:
 8004dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	4616      	mov	r6, r2
 8004dca:	4698      	mov	r8, r3
 8004dcc:	688a      	ldr	r2, [r1, #8]
 8004dce:	690b      	ldr	r3, [r1, #16]
 8004dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bfb8      	it	lt
 8004dd8:	4613      	movlt	r3, r2
 8004dda:	6033      	str	r3, [r6, #0]
 8004ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004de0:	4607      	mov	r7, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	b10a      	cbz	r2, 8004dea <_printf_common+0x26>
 8004de6:	3301      	adds	r3, #1
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	0699      	lsls	r1, r3, #26
 8004dee:	bf42      	ittt	mi
 8004df0:	6833      	ldrmi	r3, [r6, #0]
 8004df2:	3302      	addmi	r3, #2
 8004df4:	6033      	strmi	r3, [r6, #0]
 8004df6:	6825      	ldr	r5, [r4, #0]
 8004df8:	f015 0506 	ands.w	r5, r5, #6
 8004dfc:	d106      	bne.n	8004e0c <_printf_common+0x48>
 8004dfe:	f104 0a19 	add.w	sl, r4, #25
 8004e02:	68e3      	ldr	r3, [r4, #12]
 8004e04:	6832      	ldr	r2, [r6, #0]
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dc26      	bgt.n	8004e5a <_printf_common+0x96>
 8004e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	3b00      	subs	r3, #0
 8004e14:	bf18      	it	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	0692      	lsls	r2, r2, #26
 8004e1a:	d42b      	bmi.n	8004e74 <_printf_common+0xb0>
 8004e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e20:	4641      	mov	r1, r8
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c8      	blx	r9
 8004e26:	3001      	adds	r0, #1
 8004e28:	d01e      	beq.n	8004e68 <_printf_common+0xa4>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	6922      	ldr	r2, [r4, #16]
 8004e2e:	f003 0306 	and.w	r3, r3, #6
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	bf02      	ittt	eq
 8004e36:	68e5      	ldreq	r5, [r4, #12]
 8004e38:	6833      	ldreq	r3, [r6, #0]
 8004e3a:	1aed      	subeq	r5, r5, r3
 8004e3c:	68a3      	ldr	r3, [r4, #8]
 8004e3e:	bf0c      	ite	eq
 8004e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e44:	2500      	movne	r5, #0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bfc4      	itt	gt
 8004e4a:	1a9b      	subgt	r3, r3, r2
 8004e4c:	18ed      	addgt	r5, r5, r3
 8004e4e:	2600      	movs	r6, #0
 8004e50:	341a      	adds	r4, #26
 8004e52:	42b5      	cmp	r5, r6
 8004e54:	d11a      	bne.n	8004e8c <_printf_common+0xc8>
 8004e56:	2000      	movs	r0, #0
 8004e58:	e008      	b.n	8004e6c <_printf_common+0xa8>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	4641      	mov	r1, r8
 8004e60:	4638      	mov	r0, r7
 8004e62:	47c8      	blx	r9
 8004e64:	3001      	adds	r0, #1
 8004e66:	d103      	bne.n	8004e70 <_printf_common+0xac>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e70:	3501      	adds	r5, #1
 8004e72:	e7c6      	b.n	8004e02 <_printf_common+0x3e>
 8004e74:	18e1      	adds	r1, r4, r3
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	2030      	movs	r0, #48	@ 0x30
 8004e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e7e:	4422      	add	r2, r4
 8004e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e88:	3302      	adds	r3, #2
 8004e8a:	e7c7      	b.n	8004e1c <_printf_common+0x58>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4622      	mov	r2, r4
 8004e90:	4641      	mov	r1, r8
 8004e92:	4638      	mov	r0, r7
 8004e94:	47c8      	blx	r9
 8004e96:	3001      	adds	r0, #1
 8004e98:	d0e6      	beq.n	8004e68 <_printf_common+0xa4>
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7d9      	b.n	8004e52 <_printf_common+0x8e>
	...

08004ea0 <_printf_i>:
 8004ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	7e0f      	ldrb	r7, [r1, #24]
 8004ea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ea8:	2f78      	cmp	r7, #120	@ 0x78
 8004eaa:	4691      	mov	r9, r2
 8004eac:	4680      	mov	r8, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eb6:	d807      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eb8:	2f62      	cmp	r7, #98	@ 0x62
 8004eba:	d80a      	bhi.n	8004ed2 <_printf_i+0x32>
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	f000 80d2 	beq.w	8005066 <_printf_i+0x1c6>
 8004ec2:	2f58      	cmp	r7, #88	@ 0x58
 8004ec4:	f000 80b9 	beq.w	800503a <_printf_i+0x19a>
 8004ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ed0:	e03a      	b.n	8004f48 <_printf_i+0xa8>
 8004ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ed6:	2b15      	cmp	r3, #21
 8004ed8:	d8f6      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eda:	a101      	add	r1, pc, #4	@ (adr r1, 8004ee0 <_printf_i+0x40>)
 8004edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f4d 	.word	0x08004f4d
 8004ee8:	08004ec9 	.word	0x08004ec9
 8004eec:	08004ec9 	.word	0x08004ec9
 8004ef0:	08004ec9 	.word	0x08004ec9
 8004ef4:	08004ec9 	.word	0x08004ec9
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004ec9 	.word	0x08004ec9
 8004f00:	08004ec9 	.word	0x08004ec9
 8004f04:	08004ec9 	.word	0x08004ec9
 8004f08:	08004ec9 	.word	0x08004ec9
 8004f0c:	0800504d 	.word	0x0800504d
 8004f10:	08004f77 	.word	0x08004f77
 8004f14:	08005007 	.word	0x08005007
 8004f18:	08004ec9 	.word	0x08004ec9
 8004f1c:	08004ec9 	.word	0x08004ec9
 8004f20:	0800506f 	.word	0x0800506f
 8004f24:	08004ec9 	.word	0x08004ec9
 8004f28:	08004f77 	.word	0x08004f77
 8004f2c:	08004ec9 	.word	0x08004ec9
 8004f30:	08004ec9 	.word	0x08004ec9
 8004f34:	0800500f 	.word	0x0800500f
 8004f38:	6833      	ldr	r3, [r6, #0]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6032      	str	r2, [r6, #0]
 8004f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e09d      	b.n	8005088 <_printf_i+0x1e8>
 8004f4c:	6833      	ldr	r3, [r6, #0]
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	6031      	str	r1, [r6, #0]
 8004f54:	0606      	lsls	r6, r0, #24
 8004f56:	d501      	bpl.n	8004f5c <_printf_i+0xbc>
 8004f58:	681d      	ldr	r5, [r3, #0]
 8004f5a:	e003      	b.n	8004f64 <_printf_i+0xc4>
 8004f5c:	0645      	lsls	r5, r0, #25
 8004f5e:	d5fb      	bpl.n	8004f58 <_printf_i+0xb8>
 8004f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	da03      	bge.n	8004f70 <_printf_i+0xd0>
 8004f68:	232d      	movs	r3, #45	@ 0x2d
 8004f6a:	426d      	negs	r5, r5
 8004f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f70:	4859      	ldr	r0, [pc, #356]	@ (80050d8 <_printf_i+0x238>)
 8004f72:	230a      	movs	r3, #10
 8004f74:	e011      	b.n	8004f9a <_printf_i+0xfa>
 8004f76:	6821      	ldr	r1, [r4, #0]
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	0608      	lsls	r0, r1, #24
 8004f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f80:	d402      	bmi.n	8004f88 <_printf_i+0xe8>
 8004f82:	0649      	lsls	r1, r1, #25
 8004f84:	bf48      	it	mi
 8004f86:	b2ad      	uxthmi	r5, r5
 8004f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f8a:	4853      	ldr	r0, [pc, #332]	@ (80050d8 <_printf_i+0x238>)
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	bf14      	ite	ne
 8004f90:	230a      	movne	r3, #10
 8004f92:	2308      	moveq	r3, #8
 8004f94:	2100      	movs	r1, #0
 8004f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f9a:	6866      	ldr	r6, [r4, #4]
 8004f9c:	60a6      	str	r6, [r4, #8]
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	bfa2      	ittt	ge
 8004fa2:	6821      	ldrge	r1, [r4, #0]
 8004fa4:	f021 0104 	bicge.w	r1, r1, #4
 8004fa8:	6021      	strge	r1, [r4, #0]
 8004faa:	b90d      	cbnz	r5, 8004fb0 <_printf_i+0x110>
 8004fac:	2e00      	cmp	r6, #0
 8004fae:	d04b      	beq.n	8005048 <_printf_i+0x1a8>
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fb6:	fb03 5711 	mls	r7, r3, r1, r5
 8004fba:	5dc7      	ldrb	r7, [r0, r7]
 8004fbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fc0:	462f      	mov	r7, r5
 8004fc2:	42bb      	cmp	r3, r7
 8004fc4:	460d      	mov	r5, r1
 8004fc6:	d9f4      	bls.n	8004fb2 <_printf_i+0x112>
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d10b      	bne.n	8004fe4 <_printf_i+0x144>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	07df      	lsls	r7, r3, #31
 8004fd0:	d508      	bpl.n	8004fe4 <_printf_i+0x144>
 8004fd2:	6923      	ldr	r3, [r4, #16]
 8004fd4:	6861      	ldr	r1, [r4, #4]
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	bfde      	ittt	le
 8004fda:	2330      	movle	r3, #48	@ 0x30
 8004fdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fe4:	1b92      	subs	r2, r2, r6
 8004fe6:	6122      	str	r2, [r4, #16]
 8004fe8:	f8cd a000 	str.w	sl, [sp]
 8004fec:	464b      	mov	r3, r9
 8004fee:	aa03      	add	r2, sp, #12
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	f7ff fee6 	bl	8004dc4 <_printf_common>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d14a      	bne.n	8005092 <_printf_i+0x1f2>
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	b004      	add	sp, #16
 8005002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	f043 0320 	orr.w	r3, r3, #32
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	4833      	ldr	r0, [pc, #204]	@ (80050dc <_printf_i+0x23c>)
 8005010:	2778      	movs	r7, #120	@ 0x78
 8005012:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	6831      	ldr	r1, [r6, #0]
 800501a:	061f      	lsls	r7, r3, #24
 800501c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005020:	d402      	bmi.n	8005028 <_printf_i+0x188>
 8005022:	065f      	lsls	r7, r3, #25
 8005024:	bf48      	it	mi
 8005026:	b2ad      	uxthmi	r5, r5
 8005028:	6031      	str	r1, [r6, #0]
 800502a:	07d9      	lsls	r1, r3, #31
 800502c:	bf44      	itt	mi
 800502e:	f043 0320 	orrmi.w	r3, r3, #32
 8005032:	6023      	strmi	r3, [r4, #0]
 8005034:	b11d      	cbz	r5, 800503e <_printf_i+0x19e>
 8005036:	2310      	movs	r3, #16
 8005038:	e7ac      	b.n	8004f94 <_printf_i+0xf4>
 800503a:	4827      	ldr	r0, [pc, #156]	@ (80050d8 <_printf_i+0x238>)
 800503c:	e7e9      	b.n	8005012 <_printf_i+0x172>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	f023 0320 	bic.w	r3, r3, #32
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	e7f6      	b.n	8005036 <_printf_i+0x196>
 8005048:	4616      	mov	r6, r2
 800504a:	e7bd      	b.n	8004fc8 <_printf_i+0x128>
 800504c:	6833      	ldr	r3, [r6, #0]
 800504e:	6825      	ldr	r5, [r4, #0]
 8005050:	6961      	ldr	r1, [r4, #20]
 8005052:	1d18      	adds	r0, r3, #4
 8005054:	6030      	str	r0, [r6, #0]
 8005056:	062e      	lsls	r6, r5, #24
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	d501      	bpl.n	8005060 <_printf_i+0x1c0>
 800505c:	6019      	str	r1, [r3, #0]
 800505e:	e002      	b.n	8005066 <_printf_i+0x1c6>
 8005060:	0668      	lsls	r0, r5, #25
 8005062:	d5fb      	bpl.n	800505c <_printf_i+0x1bc>
 8005064:	8019      	strh	r1, [r3, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	4616      	mov	r6, r2
 800506c:	e7bc      	b.n	8004fe8 <_printf_i+0x148>
 800506e:	6833      	ldr	r3, [r6, #0]
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	6032      	str	r2, [r6, #0]
 8005074:	681e      	ldr	r6, [r3, #0]
 8005076:	6862      	ldr	r2, [r4, #4]
 8005078:	2100      	movs	r1, #0
 800507a:	4630      	mov	r0, r6
 800507c:	f7fb f8b8 	bl	80001f0 <memchr>
 8005080:	b108      	cbz	r0, 8005086 <_printf_i+0x1e6>
 8005082:	1b80      	subs	r0, r0, r6
 8005084:	6060      	str	r0, [r4, #4]
 8005086:	6863      	ldr	r3, [r4, #4]
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	2300      	movs	r3, #0
 800508c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005090:	e7aa      	b.n	8004fe8 <_printf_i+0x148>
 8005092:	6923      	ldr	r3, [r4, #16]
 8005094:	4632      	mov	r2, r6
 8005096:	4649      	mov	r1, r9
 8005098:	4640      	mov	r0, r8
 800509a:	47d0      	blx	sl
 800509c:	3001      	adds	r0, #1
 800509e:	d0ad      	beq.n	8004ffc <_printf_i+0x15c>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	079b      	lsls	r3, r3, #30
 80050a4:	d413      	bmi.n	80050ce <_printf_i+0x22e>
 80050a6:	68e0      	ldr	r0, [r4, #12]
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	4298      	cmp	r0, r3
 80050ac:	bfb8      	it	lt
 80050ae:	4618      	movlt	r0, r3
 80050b0:	e7a6      	b.n	8005000 <_printf_i+0x160>
 80050b2:	2301      	movs	r3, #1
 80050b4:	4632      	mov	r2, r6
 80050b6:	4649      	mov	r1, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	47d0      	blx	sl
 80050bc:	3001      	adds	r0, #1
 80050be:	d09d      	beq.n	8004ffc <_printf_i+0x15c>
 80050c0:	3501      	adds	r5, #1
 80050c2:	68e3      	ldr	r3, [r4, #12]
 80050c4:	9903      	ldr	r1, [sp, #12]
 80050c6:	1a5b      	subs	r3, r3, r1
 80050c8:	42ab      	cmp	r3, r5
 80050ca:	dcf2      	bgt.n	80050b2 <_printf_i+0x212>
 80050cc:	e7eb      	b.n	80050a6 <_printf_i+0x206>
 80050ce:	2500      	movs	r5, #0
 80050d0:	f104 0619 	add.w	r6, r4, #25
 80050d4:	e7f5      	b.n	80050c2 <_printf_i+0x222>
 80050d6:	bf00      	nop
 80050d8:	08005366 	.word	0x08005366
 80050dc:	08005377 	.word	0x08005377

080050e0 <memmove>:
 80050e0:	4288      	cmp	r0, r1
 80050e2:	b510      	push	{r4, lr}
 80050e4:	eb01 0402 	add.w	r4, r1, r2
 80050e8:	d902      	bls.n	80050f0 <memmove+0x10>
 80050ea:	4284      	cmp	r4, r0
 80050ec:	4623      	mov	r3, r4
 80050ee:	d807      	bhi.n	8005100 <memmove+0x20>
 80050f0:	1e43      	subs	r3, r0, #1
 80050f2:	42a1      	cmp	r1, r4
 80050f4:	d008      	beq.n	8005108 <memmove+0x28>
 80050f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050fe:	e7f8      	b.n	80050f2 <memmove+0x12>
 8005100:	4402      	add	r2, r0
 8005102:	4601      	mov	r1, r0
 8005104:	428a      	cmp	r2, r1
 8005106:	d100      	bne.n	800510a <memmove+0x2a>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800510e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005112:	e7f7      	b.n	8005104 <memmove+0x24>

08005114 <_realloc_r>:
 8005114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005118:	4680      	mov	r8, r0
 800511a:	4615      	mov	r5, r2
 800511c:	460c      	mov	r4, r1
 800511e:	b921      	cbnz	r1, 800512a <_realloc_r+0x16>
 8005120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005124:	4611      	mov	r1, r2
 8005126:	f7ff baef 	b.w	8004708 <_malloc_r>
 800512a:	b92a      	cbnz	r2, 8005138 <_realloc_r+0x24>
 800512c:	f7ff fca8 	bl	8004a80 <_free_r>
 8005130:	2400      	movs	r4, #0
 8005132:	4620      	mov	r0, r4
 8005134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005138:	f000 f81a 	bl	8005170 <_malloc_usable_size_r>
 800513c:	4285      	cmp	r5, r0
 800513e:	4606      	mov	r6, r0
 8005140:	d802      	bhi.n	8005148 <_realloc_r+0x34>
 8005142:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005146:	d8f4      	bhi.n	8005132 <_realloc_r+0x1e>
 8005148:	4629      	mov	r1, r5
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff fadc 	bl	8004708 <_malloc_r>
 8005150:	4607      	mov	r7, r0
 8005152:	2800      	cmp	r0, #0
 8005154:	d0ec      	beq.n	8005130 <_realloc_r+0x1c>
 8005156:	42b5      	cmp	r5, r6
 8005158:	462a      	mov	r2, r5
 800515a:	4621      	mov	r1, r4
 800515c:	bf28      	it	cs
 800515e:	4632      	movcs	r2, r6
 8005160:	f7ff fc80 	bl	8004a64 <memcpy>
 8005164:	4621      	mov	r1, r4
 8005166:	4640      	mov	r0, r8
 8005168:	f7ff fc8a 	bl	8004a80 <_free_r>
 800516c:	463c      	mov	r4, r7
 800516e:	e7e0      	b.n	8005132 <_realloc_r+0x1e>

08005170 <_malloc_usable_size_r>:
 8005170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005174:	1f18      	subs	r0, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfbc      	itt	lt
 800517a:	580b      	ldrlt	r3, [r1, r0]
 800517c:	18c0      	addlt	r0, r0, r3
 800517e:	4770      	bx	lr

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
