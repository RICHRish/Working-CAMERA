
prem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f20  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080050d0  080050d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800531c  0800531c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005324  08005324  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005324  08005324  00006324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800532c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00004b80  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bdc  20004bdc  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0ff  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ccb  00000000  00000000  0001218b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  00013e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000793  00000000  00000000  00014838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000197b  00000000  00000000  00014fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bac3  00000000  00000000  00016946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfaa9  00000000  00000000  00022409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f1eb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d70  00000000  00000000  000f1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f4c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050b8 	.word	0x080050b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080050b8 	.word	0x080050b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_UART_RxCpltCallback>:
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
int buffersize(char *buff);
void myprintf(const char *fmt, ...);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	char log1[20];

	sprintf(log1, "data size : %d received\n", ptr1);
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <HAL_UART_RxCpltCallback+0x58>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4912      	ldr	r1, [pc, #72]	@ (80005dc <HAL_UART_RxCpltCallback+0x5c>)
 8000592:	4618      	mov	r0, r3
 8000594:	f004 f99e 	bl	80048d4 <siprintf>
	HAL_UART_Transmit(&DEBUG_UART1, "CPLT called: \n",
 8000598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059c:	220f      	movs	r2, #15
 800059e:	4910      	ldr	r1, [pc, #64]	@ (80005e0 <HAL_UART_RxCpltCallback+0x60>)
 80005a0:	4810      	ldr	r0, [pc, #64]	@ (80005e4 <HAL_UART_RxCpltCallback+0x64>)
 80005a2:	f002 fd7f 	bl	80030a4 <HAL_UART_Transmit>
			sizeof("CPLT called: \n"), 1000);
	HAL_UART_Transmit(&DEBUG_UART1, log1, sizeof(log1), 1000);
 80005a6:	f107 010c 	add.w	r1, r7, #12
 80005aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ae:	2214      	movs	r2, #20
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <HAL_UART_RxCpltCallback+0x64>)
 80005b2:	f002 fd77 	bl	80030a4 <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(&DEBUG_UART1, data_rec1, ptr1);
	HAL_UART_Transmit(&DEBUG_UART1, rrr, ptr1, 20000);
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <HAL_UART_RxCpltCallback+0x58>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005c0:	4909      	ldr	r1, [pc, #36]	@ (80005e8 <HAL_UART_RxCpltCallback+0x68>)
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <HAL_UART_RxCpltCallback+0x64>)
 80005c4:	f002 fd6e 	bl	80030a4 <HAL_UART_Transmit>
	obc_ok = 1;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <HAL_UART_RxCpltCallback+0x6c>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
//	for(int i=00;i<4000;i++){
//		HAL_UART_Transmit(&DEBUG_UART1, rrr[i], 1,1000);
//		HAL_Delay(100);
//	}

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000434 	.word	0x20000434
 80005dc:	080050d0 	.word	0x080050d0
 80005e0:	080050ec 	.word	0x080050ec
 80005e4:	20000160 	.word	0x20000160
 80005e8:	20000438 	.word	0x20000438
 80005ec:	20004a88 	.word	0x20004a88

080005f0 <IMAGE_CAPTURE1>:
	if (OBC_RX_FLAG1 == 1) {
		HAL_UART_Transmit(&huart4, rx_data1, sizeof(rx_data1), 1000);
		HAL_UART_Transmit(&DEBUG_UART1, &rx_data1, 1, 100);
	}
}
uint32_t IMAGE_CAPTURE1() {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	@ 0x38
 80005f4:	af00      	add	r7, sp, #0
    uint8_t CAM_tx[] = { 'C', 'A', 'M', 'O', 'N' };
 80005f6:	4a4e      	ldr	r2, [pc, #312]	@ (8000730 <IMAGE_CAPTURE1+0x140>)
 80005f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	6018      	str	r0, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	7019      	strb	r1, [r3, #0]
    uint32_t size1 = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t rgb_img_size[6];  // This should be `nir_img_size` for NIR image size
    char log1[30];

    // Flush UART buffers to avoid any residual data
    UART_Flush(&huart2);
 800060a:	484a      	ldr	r0, [pc, #296]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 800060c:	f000 f8b6 	bl	800077c <UART_Flush>
    UART_Flush(&huart8);
 8000610:	4849      	ldr	r0, [pc, #292]	@ (8000738 <IMAGE_CAPTURE1+0x148>)
 8000612:	f000 f8b3 	bl	800077c <UART_Flush>
    UART_Flush(&huart6);
 8000616:	4849      	ldr	r0, [pc, #292]	@ (800073c <IMAGE_CAPTURE1+0x14c>)
 8000618:	f000 f8b0 	bl	800077c <UART_Flush>
    UART_Flush_DMA(&huart8);
 800061c:	4846      	ldr	r0, [pc, #280]	@ (8000738 <IMAGE_CAPTURE1+0x148>)
 800061e:	f000 f8ba 	bl	8000796 <UART_Flush_DMA>

    // Transmit the capture command to the camera
    if (HAL_OK != HAL_UART_Transmit(&huart8, CAM_tx, sizeof(CAM_tx), 1000)) {
 8000622:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062a:	2205      	movs	r2, #5
 800062c:	4842      	ldr	r0, [pc, #264]	@ (8000738 <IMAGE_CAPTURE1+0x148>)
 800062e:	f002 fd39 	bl	80030a4 <HAL_UART_Transmit>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d008      	beq.n	800064a <IMAGE_CAPTURE1+0x5a>
        HAL_UART_Transmit(&huart2, (uint8_t*) "Failed to send CAM command\n", 28, 1000);
 8000638:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063c:	221c      	movs	r2, #28
 800063e:	4940      	ldr	r1, [pc, #256]	@ (8000740 <IMAGE_CAPTURE1+0x150>)
 8000640:	483c      	ldr	r0, [pc, #240]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 8000642:	f002 fd2f 	bl	80030a4 <HAL_UART_Transmit>
        return 1; // Return error if the CAM command fails to transmit
 8000646:	2301      	movs	r3, #1
 8000648:	e06e      	b.n	8000728 <IMAGE_CAPTURE1+0x138>
    }

    // Receive the image size
    if (HAL_OK != HAL_UART_Receive(&huart8, rgb_img_size, sizeof(rgb_img_size), 7000)) {
 800064a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800064e:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8000652:	2206      	movs	r2, #6
 8000654:	4838      	ldr	r0, [pc, #224]	@ (8000738 <IMAGE_CAPTURE1+0x148>)
 8000656:	f002 fdb0 	bl	80031ba <HAL_UART_Receive>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <IMAGE_CAPTURE1+0x82>
        HAL_UART_Transmit(&huart2, (uint8_t*) "Failed to receive image size\n", 30, 1000);
 8000660:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000664:	221e      	movs	r2, #30
 8000666:	4937      	ldr	r1, [pc, #220]	@ (8000744 <IMAGE_CAPTURE1+0x154>)
 8000668:	4832      	ldr	r0, [pc, #200]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 800066a:	f002 fd1b 	bl	80030a4 <HAL_UART_Transmit>
        return 1; // Return error if image size reception fails
 800066e:	2301      	movs	r3, #1
 8000670:	e05a      	b.n	8000728 <IMAGE_CAPTURE1+0x138>
    }else{
    	HAL_UART_Transmit(&huart2, rgb_img_size, sizeof(rgb_img_size), 1000);
 8000672:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067a:	2206      	movs	r2, #6
 800067c:	482d      	ldr	r0, [pc, #180]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 800067e:	f002 fd11 	bl	80030a4 <HAL_UART_Transmit>
    }

    // Convert received image size to an integer
    ptr1 = atoi((char*) rgb_img_size);
 8000682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000686:	4618      	mov	r0, r3
 8000688:	f003 ffde 	bl	8004648 <atoi>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <IMAGE_CAPTURE1+0x158>)
 8000692:	601a      	str	r2, [r3, #0]
    if (ptr1 <= 0) {
 8000694:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <IMAGE_CAPTURE1+0x158>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d108      	bne.n	80006ae <IMAGE_CAPTURE1+0xbe>
        HAL_UART_Transmit(&huart2, (uint8_t*) "Invalid image size\n", 20, 1000);
 800069c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a0:	2214      	movs	r2, #20
 80006a2:	492a      	ldr	r1, [pc, #168]	@ (800074c <IMAGE_CAPTURE1+0x15c>)
 80006a4:	4823      	ldr	r0, [pc, #140]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 80006a6:	f002 fcfd 	bl	80030a4 <HAL_UART_Transmit>
        return 1; // Return error if the size is invalid
 80006aa:	2301      	movs	r3, #1
 80006ac:	e03c      	b.n	8000728 <IMAGE_CAPTURE1+0x138>
    }

    // Allocate memory for the image data
    data_rec1 = (uint8_t*) malloc(ptr1);
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <IMAGE_CAPTURE1+0x158>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 ffcc 	bl	8004650 <malloc>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <IMAGE_CAPTURE1+0x160>)
 80006be:	601a      	str	r2, [r3, #0]
    if (data_rec1 == NULL) {
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <IMAGE_CAPTURE1+0x160>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d108      	bne.n	80006da <IMAGE_CAPTURE1+0xea>
        HAL_UART_Transmit(&huart2, (uint8_t*) "Memory allocation failed\n", 26, 1000);
 80006c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006cc:	221a      	movs	r2, #26
 80006ce:	4921      	ldr	r1, [pc, #132]	@ (8000754 <IMAGE_CAPTURE1+0x164>)
 80006d0:	4818      	ldr	r0, [pc, #96]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 80006d2:	f002 fce7 	bl	80030a4 <HAL_UART_Transmit>
        return 1; // Return error if memory allocation fails
 80006d6:	2301      	movs	r3, #1
 80006d8:	e026      	b.n	8000728 <IMAGE_CAPTURE1+0x138>
    }

    // Log that image data reception is starting
    HAL_UART_Transmit(&huart2, (uint8_t*) "\n\n********Reading Image data****\n", 34, 1000);
 80006da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006de:	2222      	movs	r2, #34	@ 0x22
 80006e0:	491d      	ldr	r1, [pc, #116]	@ (8000758 <IMAGE_CAPTURE1+0x168>)
 80006e2:	4814      	ldr	r0, [pc, #80]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 80006e4:	f002 fcde 	bl	80030a4 <HAL_UART_Transmit>

    // Start receiving image data using DMA
    // Receive data from UART8
      if (HAL_UART_Receive_DMA(&huart8, data_rec1, sizeof(data_rec1)) == HAL_OK) {
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <IMAGE_CAPTURE1+0x160>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2204      	movs	r2, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4811      	ldr	r0, [pc, #68]	@ (8000738 <IMAGE_CAPTURE1+0x148>)
 80006f2:	f002 fdf9 	bl	80032e8 <HAL_UART_Receive_DMA>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d108      	bne.n	800070e <IMAGE_CAPTURE1+0x11e>
          // Transmit received data to UART2
          HAL_UART_Transmit(&huart2, data_rec1, sizeof(data_rec1), 10000);
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <IMAGE_CAPTURE1+0x160>)
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000704:	2204      	movs	r2, #4
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 8000708:	f002 fccc 	bl	80030a4 <HAL_UART_Transmit>
 800070c:	e006      	b.n	800071c <IMAGE_CAPTURE1+0x12c>
      } else {
          // Handle receive error
          HAL_UART_Transmit(&huart2, (uint8_t*) "Failed to receive from UART8\n", 29, 1000);
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	221d      	movs	r2, #29
 8000714:	4911      	ldr	r1, [pc, #68]	@ (800075c <IMAGE_CAPTURE1+0x16c>)
 8000716:	4807      	ldr	r0, [pc, #28]	@ (8000734 <IMAGE_CAPTURE1+0x144>)
 8000718:	f002 fcc4 	bl	80030a4 <HAL_UART_Transmit>
      }

    // Free the allocated memory after use
    free(data_rec1);
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <IMAGE_CAPTURE1+0x160>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f003 ff9d 	bl	8004660 <free>

    return 0; // Return success
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3738      	adds	r7, #56	@ 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	080051ac 	.word	0x080051ac
 8000734:	20000160 	.word	0x20000160
 8000738:	20000118 	.word	0x20000118
 800073c:	200001a8 	.word	0x200001a8
 8000740:	080050fc 	.word	0x080050fc
 8000744:	08005118 	.word	0x08005118
 8000748:	20000434 	.word	0x20000434
 800074c:	08005138 	.word	0x08005138
 8000750:	20000430 	.word	0x20000430
 8000754:	0800514c 	.word	0x0800514c
 8000758:	08005168 	.word	0x08005168
 800075c:	0800518c 	.word	0x0800518c

08000760 <OCP_EN1>:



void OCP_EN1() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <OCP_EN1+0x18>)
 800076a:	f001 fdad 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800076e:	2064      	movs	r0, #100	@ 0x64
 8000770:	f000 feba 	bl	80014e8 <HAL_Delay>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40020400 	.word	0x40020400

0800077c <UART_Flush>:
void OCP_DISABLE() {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	HAL_Delay(100);
}

void UART_Flush(UART_HandleTypeDef *huart) {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(huart);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <UART_Flush_DMA>:
void UART_Flush_DMA(UART_HandleTypeDef *huart) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	// Disable UART DMA request
	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68da      	ldr	r2, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f022 0220 	bic.w	r2, r2, #32
 80007ac:	60da      	str	r2, [r3, #12]

	// Abort any ongoing UART reception via DMA
	HAL_UART_AbortReceive(huart);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f002 fdbf 	bl	8003332 <HAL_UART_AbortReceive>

	// Reset the UART receive state
	huart->RxState = HAL_UART_STATE_READY;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2220      	movs	r2, #32
 80007b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fe1c 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f820 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f9c2 	bl	8000b58 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d4:	f000 f96a 	bl	8000aac <MX_DMA_Init>
  MX_UART8_Init();
 80007d8:	f000 f8ea 	bl	80009b0 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80007dc:	f000 f912 	bl	8000a04 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80007e0:	f000 f93a 	bl	8000a58 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80007e4:	f000 f8ba 	bl	800095c <MX_UART4_Init>
  MX_SPI2_Init();
 80007e8:	f000 f882 	bl	80008f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) "Camera is starting",
 80007ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f0:	2213      	movs	r2, #19
 80007f2:	4905      	ldr	r1, [pc, #20]	@ (8000808 <main+0x44>)
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <main+0x48>)
 80007f6:	f002 fc55 	bl	80030a4 <HAL_UART_Transmit>
//		HAL_Delay(2000);
		//		while (!OBC_RX_FLAG) {
//		//			myprintf("waiting for command from OBC.\r\n");
//		//			HAL_Delay(1000);
//		//		}
		OCP_EN1();
 80007fa:	f7ff ffb1 	bl	8000760 <OCP_EN1>
		IMAGE_CAPTURE1();
 80007fe:	f7ff fef7 	bl	80005f0 <IMAGE_CAPTURE1>
		OCP_EN1();
 8000802:	bf00      	nop
 8000804:	e7f9      	b.n	80007fa <main+0x36>
 8000806:	bf00      	nop
 8000808:	080051b4 	.word	0x080051b4
 800080c:	20000160 	.word	0x20000160

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	@ 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	@ 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 f878 	bl	8004914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <SystemClock_Config+0xd8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083c:	4a2a      	ldr	r2, [pc, #168]	@ (80008e8 <SystemClock_Config+0xd8>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	@ 0x40
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <SystemClock_Config+0xd8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <SystemClock_Config+0xdc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a24      	ldr	r2, [pc, #144]	@ (80008ec <SystemClock_Config+0xdc>)
 800085a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <SystemClock_Config+0xdc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000870:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000884:	23b4      	movs	r3, #180	@ 0xb4
 8000886:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fd81 	bl	800239c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a0:	f000 f9c8 	bl	8000c34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a4:	f001 fd2a 	bl	80022fc <HAL_PWREx_EnableOverDrive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ae:	f000 f9c1 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2105      	movs	r1, #5
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 ffdb 	bl	800288c <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008dc:	f000 f9aa 	bl	8000c34 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_SPI2_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <MX_SPI2_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <MX_SPI2_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_SPI2_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_SPI2_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_SPI2_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_SPI2_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_SPI2_Init+0x64>)
 800091c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_SPI2_Init+0x64>)
 8000924:	2208      	movs	r2, #8
 8000926:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <MX_SPI2_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_SPI2_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <MX_SPI2_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_SPI2_Init+0x64>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_SPI2_Init+0x64>)
 8000942:	f002 f9c3 	bl	8002ccc <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800094c:	f000 f972 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000078 	.word	0x20000078
 8000958:	40003800 	.word	0x40003800

0800095c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_UART4_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	@ (80009ac <MX_UART4_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <MX_UART4_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_UART4_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_UART4_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_UART4_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_UART4_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_UART4_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_UART4_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_UART4_Init+0x4c>)
 8000994:	f002 fb36 	bl	8003004 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f949 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000d0 	.word	0x200000d0
 80009ac:	40004c00 	.word	0x40004c00

080009b0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <MX_UART8_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_UART8_Init+0x4c>)
 80009e8:	f002 fb0c 	bl	8003004 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80009f2:	f000 f91f 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000118 	.word	0x20000118
 8000a00:	40007c00 	.word	0x40007c00

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f002 fae2 	bl	8003004 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f000 f8f5 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000160 	.word	0x20000160
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <MX_USART6_UART_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_USART6_UART_Init+0x4c>)
 8000a90:	f002 fab8 	bl	8003004 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f000 f8cb 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001a8 	.word	0x200001a8
 8000aa8:	40011400 	.word	0x40011400

08000aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <MX_DMA_Init+0xa8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a26      	ldr	r2, [pc, #152]	@ (8000b54 <MX_DMA_Init+0xa8>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <MX_DMA_Init+0xa8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <MX_DMA_Init+0xa8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b54 <MX_DMA_Init+0xa8>)
 8000ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_DMA_Init+0xa8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200b      	movs	r0, #11
 8000af0:	f000 fdf9 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000af4:	200b      	movs	r0, #11
 8000af6:	f000 fe12 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200d      	movs	r0, #13
 8000b00:	f000 fdf1 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b04:	200d      	movs	r0, #13
 8000b06:	f000 fe0a 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 fde9 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b14:	200f      	movs	r0, #15
 8000b16:	f000 fe02 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2011      	movs	r0, #17
 8000b20:	f000 fde1 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b24:	2011      	movs	r0, #17
 8000b26:	f000 fdfa 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2039      	movs	r0, #57	@ 0x39
 8000b30:	f000 fdd9 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b34:	2039      	movs	r0, #57	@ 0x39
 8000b36:	f000 fdf2 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2045      	movs	r0, #69	@ 0x45
 8000b40:	f000 fdd1 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b44:	2045      	movs	r0, #69	@ 0x45
 8000b46:	f000 fdea 	bl	800171e <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a2d      	ldr	r2, [pc, #180]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a1f      	ldr	r2, [pc, #124]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a18      	ldr	r2, [pc, #96]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000be8:	f043 0310 	orr.w	r3, r3, #16
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_GPIO_Init+0xd4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, cs_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8000c00:	480b      	ldr	r0, [pc, #44]	@ (8000c30 <MX_GPIO_Init+0xd8>)
 8000c02:	f001 fb61 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cs_Pin PB4 */
  GPIO_InitStruct.Pin = cs_Pin|GPIO_PIN_4;
 8000c06:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <MX_GPIO_Init+0xd8>)
 8000c20:	f001 f9a6 	bl	8001f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020400 	.word	0x40020400

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <Error_Handler+0x8>

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a2c      	ldr	r2, [pc, #176]	@ (8000d60 <HAL_SPI_MspInit+0xd0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d152      	bne.n	8000d58 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a2a      	ldr	r2, [pc, #168]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a23      	ldr	r2, [pc, #140]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_SPI_MspInit+0xd4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d06:	230c      	movs	r3, #12
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <HAL_SPI_MspInit+0xd8>)
 8000d22:	f001 f925 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480a      	ldr	r0, [pc, #40]	@ (8000d6c <HAL_SPI_MspInit+0xdc>)
 8000d44:	f001 f914 	bl	8001f70 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2024      	movs	r0, #36	@ 0x24
 8000d4e:	f000 fcca 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d52:	2024      	movs	r0, #36	@ 0x24
 8000d54:	f000 fce3 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	@ 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40003800 	.word	0x40003800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40020400 	.word	0x40020400

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b090      	sub	sp, #64	@ 0x40
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a95      	ldr	r2, [pc, #596]	@ (8000fe4 <HAL_UART_MspInit+0x274>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 8091 	bne.w	8000eb6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d98:	4b93      	ldr	r3, [pc, #588]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	4a92      	ldr	r2, [pc, #584]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000d9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da4:	4b90      	ldr	r3, [pc, #576]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000db4:	4b8c      	ldr	r3, [pc, #560]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db8:	4a8b      	ldr	r2, [pc, #556]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc0:	4b89      	ldr	r3, [pc, #548]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4881      	ldr	r0, [pc, #516]	@ (8000fec <HAL_UART_MspInit+0x27c>)
 8000de8:	f001 f8c2 	bl	8001f70 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000dec:	4b80      	ldr	r3, [pc, #512]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000dee:	4a81      	ldr	r2, [pc, #516]	@ (8000ff4 <HAL_UART_MspInit+0x284>)
 8000df0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000df2:	4b7f      	ldr	r3, [pc, #508]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000df4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000dfc:	2240      	movs	r2, #64	@ 0x40
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b7b      	ldr	r3, [pc, #492]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b7a      	ldr	r3, [pc, #488]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0e:	4b78      	ldr	r3, [pc, #480]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e14:	4b76      	ldr	r3, [pc, #472]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000e1a:	4b75      	ldr	r3, [pc, #468]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e20:	4b73      	ldr	r3, [pc, #460]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e26:	4b72      	ldr	r3, [pc, #456]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000e2c:	4870      	ldr	r0, [pc, #448]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e2e:	f000 fc91 	bl	8001754 <HAL_DMA_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e38:	f7ff fefc 	bl	8000c34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e42:	4a6b      	ldr	r2, [pc, #428]	@ (8000ff0 <HAL_UART_MspInit+0x280>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000e48:	4b6b      	ldr	r3, [pc, #428]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8000ffc <HAL_UART_MspInit+0x28c>)
 8000e4c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e56:	4b68      	ldr	r3, [pc, #416]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b66      	ldr	r3, [pc, #408]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b65      	ldr	r3, [pc, #404]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6a:	4b63      	ldr	r3, [pc, #396]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e70:	4b61      	ldr	r3, [pc, #388]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000e76:	4b60      	ldr	r3, [pc, #384]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e82:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000e88:	485b      	ldr	r0, [pc, #364]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e8a:	f000 fc63 	bl	8001754 <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000e94:	f7ff fece 	bl	8000c34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a57      	ldr	r2, [pc, #348]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e9e:	4a56      	ldr	r2, [pc, #344]	@ (8000ff8 <HAL_UART_MspInit+0x288>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2034      	movs	r0, #52	@ 0x34
 8000eaa:	f000 fc1c 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000eae:	2034      	movs	r0, #52	@ 0x34
 8000eb0:	f000 fc35 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000eb4:	e180      	b.n	80011b8 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==UART8)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a51      	ldr	r2, [pc, #324]	@ (8001000 <HAL_UART_MspInit+0x290>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 80ab 	bne.w	8001018 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
 8000ec6:	4b48      	ldr	r3, [pc, #288]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	4a47      	ldr	r2, [pc, #284]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000ecc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed2:	4b45      	ldr	r3, [pc, #276]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	4b41      	ldr	r3, [pc, #260]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a40      	ldr	r2, [pc, #256]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe8 <HAL_UART_MspInit+0x278>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000efa:	2303      	movs	r3, #3
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	483b      	ldr	r0, [pc, #236]	@ (8001004 <HAL_UART_MspInit+0x294>)
 8000f16:	f001 f82b 	bl	8001f70 <HAL_GPIO_Init>
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f1c:	4a3b      	ldr	r2, [pc, #236]	@ (800100c <HAL_UART_MspInit+0x29c>)
 8000f1e:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 8000f20:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f22:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000f26:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f28:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f2a:	2240      	movs	r2, #64	@ 0x40
 8000f2c:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f34:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f3a:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f42:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8000f48:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8000f5a:	482b      	ldr	r0, [pc, #172]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f5c:	f000 fbfa 	bl	8001754 <HAL_DMA_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8000f66:	f7ff fe65 	bl	8000c34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a26      	ldr	r2, [pc, #152]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f70:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <HAL_UART_MspInit+0x298>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000f78:	4a26      	ldr	r2, [pc, #152]	@ (8001014 <HAL_UART_MspInit+0x2a4>)
 8000f7a:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000f7e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000f82:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f96:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8000fb6:	4816      	ldr	r0, [pc, #88]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000fb8:	f000 fbcc 	bl	8001754 <HAL_DMA_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8000fc2:	f7ff fe37 	bl	8000c34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fcc:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <HAL_UART_MspInit+0x2a0>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2053      	movs	r0, #83	@ 0x53
 8000fd8:	f000 fb85 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000fdc:	2053      	movs	r0, #83	@ 0x53
 8000fde:	f000 fb9e 	bl	800171e <HAL_NVIC_EnableIRQ>
}
 8000fe2:	e0e9      	b.n	80011b8 <HAL_UART_MspInit+0x448>
 8000fe4:	40004c00 	.word	0x40004c00
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	200001f0 	.word	0x200001f0
 8000ff4:	40026070 	.word	0x40026070
 8000ff8:	20000250 	.word	0x20000250
 8000ffc:	40026040 	.word	0x40026040
 8001000:	40007c00 	.word	0x40007c00
 8001004:	40021000 	.word	0x40021000
 8001008:	200002b0 	.word	0x200002b0
 800100c:	40026010 	.word	0x40026010
 8001010:	20000310 	.word	0x20000310
 8001014:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a68      	ldr	r2, [pc, #416]	@ (80011c0 <HAL_UART_MspInit+0x450>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d134      	bne.n	800108c <HAL_UART_MspInit+0x31c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4b67      	ldr	r3, [pc, #412]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a66      	ldr	r2, [pc, #408]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b64      	ldr	r3, [pc, #400]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	4b60      	ldr	r3, [pc, #384]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a5f      	ldr	r2, [pc, #380]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b5d      	ldr	r3, [pc, #372]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105a:	230c      	movs	r3, #12
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106a:	2307      	movs	r3, #7
 800106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001072:	4619      	mov	r1, r3
 8001074:	4854      	ldr	r0, [pc, #336]	@ (80011c8 <HAL_UART_MspInit+0x458>)
 8001076:	f000 ff7b 	bl	8001f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2026      	movs	r0, #38	@ 0x26
 8001080:	f000 fb31 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001084:	2026      	movs	r0, #38	@ 0x26
 8001086:	f000 fb4a 	bl	800171e <HAL_NVIC_EnableIRQ>
}
 800108a:	e095      	b.n	80011b8 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART6)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a4e      	ldr	r2, [pc, #312]	@ (80011cc <HAL_UART_MspInit+0x45c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f040 8090 	bne.w	80011b8 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	4b49      	ldr	r3, [pc, #292]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a0:	4a48      	ldr	r2, [pc, #288]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a8:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	4b42      	ldr	r3, [pc, #264]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	4a41      	ldr	r2, [pc, #260]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c4:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <HAL_UART_MspInit+0x454>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d0:	23c0      	movs	r3, #192	@ 0xc0
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010e0:	2308      	movs	r3, #8
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	4839      	ldr	r0, [pc, #228]	@ (80011d0 <HAL_UART_MspInit+0x460>)
 80010ec:	f000 ff40 	bl	8001f70 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80010f0:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 80010f2:	4a39      	ldr	r2, [pc, #228]	@ (80011d8 <HAL_UART_MspInit+0x468>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80010f6:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 80010f8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80010fc:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001100:	2240      	movs	r2, #64	@ 0x40
 8001102:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800110a:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 800110c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001110:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001112:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001118:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001124:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112a:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001130:	4828      	ldr	r0, [pc, #160]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001132:	f000 fb0f 	bl	8001754 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_UART_MspInit+0x3d0>
      Error_Handler();
 800113c:	f7ff fd7a 	bl	8000c34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001144:	639a      	str	r2, [r3, #56]	@ 0x38
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <HAL_UART_MspInit+0x464>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 800114e:	4a24      	ldr	r2, [pc, #144]	@ (80011e0 <HAL_UART_MspInit+0x470>)
 8001150:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 8001154:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001158:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 8001168:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800116c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800118c:	4813      	ldr	r0, [pc, #76]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 800118e:	f000 fae1 	bl	8001754 <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001198:	f7ff fd4c 	bl	8000c34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 80011a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011a2:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <HAL_UART_MspInit+0x46c>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2047      	movs	r0, #71	@ 0x47
 80011ae:	f000 fa9a 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011b2:	2047      	movs	r0, #71	@ 0x47
 80011b4:	f000 fab3 	bl	800171e <HAL_NVIC_EnableIRQ>
}
 80011b8:	bf00      	nop
 80011ba:	3740      	adds	r7, #64	@ 0x40
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40011400 	.word	0x40011400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	20000370 	.word	0x20000370
 80011d8:	400264a0 	.word	0x400264a0
 80011dc:	200003d0 	.word	0x200003d0
 80011e0:	40026428 	.word	0x40026428

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <NMI_Handler+0x4>

080011ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <MemManage_Handler+0x4>

080011fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <UsageFault_Handler+0x4>

0800120c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f935 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <DMA1_Stream0_IRQHandler+0x10>)
 800124a:	f000 fc1b 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002b0 	.word	0x200002b0

08001258 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <DMA1_Stream2_IRQHandler+0x10>)
 800125e:	f000 fc11 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000250 	.word	0x20000250

0800126c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <DMA1_Stream4_IRQHandler+0x10>)
 8001272:	f000 fc07 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001f0 	.word	0x200001f0

08001280 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <DMA1_Stream6_IRQHandler+0x10>)
 8001286:	f000 fbfd 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000310 	.word	0x20000310

08001294 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <SPI2_IRQHandler+0x10>)
 800129a:	f001 fda1 	bl	8002de0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000078 	.word	0x20000078

080012a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <USART2_IRQHandler+0x10>)
 80012ae:	f002 f8e3 	bl	8003478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000160 	.word	0x20000160

080012bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <UART4_IRQHandler+0x10>)
 80012c2:	f002 f8d9 	bl	8003478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000d0 	.word	0x200000d0

080012d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <DMA2_Stream1_IRQHandler+0x10>)
 80012d6:	f000 fbd5 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200003d0 	.word	0x200003d0

080012e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <DMA2_Stream6_IRQHandler+0x10>)
 80012ea:	f000 fbcb 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000370 	.word	0x20000370

080012f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <USART6_IRQHandler+0x10>)
 80012fe:	f002 f8bb 	bl	8003478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001a8 	.word	0x200001a8

0800130c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <UART8_IRQHandler+0x10>)
 8001312:	f002 f8b1 	bl	8003478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000118 	.word	0x20000118

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f003 faf8 	bl	8004944 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20030000 	.word	0x20030000
 8001380:	00000400 	.word	0x00000400
 8001384:	20004a8c 	.word	0x20004a8c
 8001388:	20004be0 	.word	0x20004be0

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b4:	f7ff ffea 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	@ (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	@ (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013de:	f003 fab7 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff f9ef 	bl	80007c4 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013f4:	0800532c 	.word	0x0800532c
  ldr r2, =_sbss
 80013f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013fc:	20004bdc 	.word	0x20004bdc

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f94f 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fc02 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f967 	bl	800173a <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f92f 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20004a90 	.word	0x20004a90

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20004a90 	.word	0x20004a90

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	@ (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	@ 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff29 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff3e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff31 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff feb6 	bl	80014d0 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e099      	b.n	80018a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001790:	e00f      	b.n	80017b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001792:	f7ff fe9d 	bl	80014d0 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b05      	cmp	r3, #5
 800179e:	d908      	bls.n	80017b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2220      	movs	r2, #32
 80017a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2203      	movs	r2, #3
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e078      	b.n	80018a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e8      	bne.n	8001792 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <HAL_DMA_Init+0x158>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4313      	orrs	r3, r2
 8001802:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	2b04      	cmp	r3, #4
 800180a:	d107      	bne.n	800181c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	4313      	orrs	r3, r2
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f023 0307 	bic.w	r3, r3, #7
 8001832:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	2b04      	cmp	r3, #4
 8001844:	d117      	bne.n	8001876 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fb0d 	bl	8001e78 <DMA_CheckFifoParam>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2240      	movs	r2, #64	@ 0x40
 8001868:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001872:	2301      	movs	r3, #1
 8001874:	e016      	b.n	80018a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fac4 	bl	8001e0c <DMA_CalcBaseAndBitshift>
 8001884:	4603      	mov	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188c:	223f      	movs	r2, #63	@ 0x3f
 800188e:	409a      	lsls	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	f010803f 	.word	0xf010803f

080018b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA_Start_IT+0x26>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e040      	b.n	8001958 <HAL_DMA_Start_IT+0xa8>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d12f      	bne.n	800194a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fa56 	bl	8001db0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001908:	223f      	movs	r2, #63	@ 0x3f
 800190a:	409a      	lsls	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0216 	orr.w	r2, r2, #22
 800191e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0208 	orr.w	r2, r2, #8
 8001936:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e005      	b.n	8001956 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001956:	7dfb      	ldrb	r3, [r7, #23]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800196e:	f7ff fdaf 	bl	80014d0 <HAL_GetTick>
 8001972:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e052      	b.n	8001a38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0216 	bic.w	r2, r2, #22
 80019a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_DMA_Abort+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0208 	bic.w	r2, r2, #8
 80019d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e2:	e013      	b.n	8001a0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e4:	f7ff fd74 	bl	80014d0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d90c      	bls.n	8001a0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e015      	b.n	8001a38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e4      	bne.n	80019e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1e:	223f      	movs	r2, #63	@ 0x3f
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d004      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00c      	b.n	8001a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2205      	movs	r2, #5
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a90:	4b8e      	ldr	r3, [pc, #568]	@ (8001ccc <HAL_DMA_IRQHandler+0x248>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a8e      	ldr	r2, [pc, #568]	@ (8001cd0 <HAL_DMA_IRQHandler+0x24c>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aae:	2208      	movs	r2, #8
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	2208      	movs	r2, #8
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d012      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	2201      	movs	r2, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b48:	2204      	movs	r2, #4
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b60:	2210      	movs	r2, #16
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d043      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03c      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7e:	2210      	movs	r2, #16
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d024      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
 8001bb2:	e01f      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e016      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0208 	bic.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 808f 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8087 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d136      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0216 	bic.w	r2, r2, #22
 8001c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x1da>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0208 	bic.w	r2, r2, #8
 8001c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	223f      	movs	r2, #63	@ 0x3f
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07e      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
        }
        return;
 8001c9a:	e079      	b.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01d      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d031      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e02c      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e01e      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0210 	bic.w	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d032      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d307      	bcc.n	8001d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f2      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x2cc>
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d90:	bf00      	nop
    }
  }
}
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b40      	cmp	r3, #64	@ 0x40
 8001ddc:	d108      	bne.n	8001df0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dee:	e007      	b.n	8001e00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3b10      	subs	r3, #16
 8001e1c:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <DMA_CalcBaseAndBitshift+0x64>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e26:	4a13      	ldr	r2, [pc, #76]	@ (8001e74 <DMA_CalcBaseAndBitshift+0x68>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d909      	bls.n	8001e4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	1d1a      	adds	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e4c:	e007      	b.n	8001e5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	aaaaaaab 	.word	0xaaaaaaab
 8001e74:	080051e0 	.word	0x080051e0

08001e78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11f      	bne.n	8001ed2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d856      	bhi.n	8001f46 <DMA_CheckFifoParam+0xce>
 8001e98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea0 <DMA_CheckFifoParam+0x28>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001ec3 	.word	0x08001ec3
 8001ea8:	08001eb1 	.word	0x08001eb1
 8001eac:	08001f47 	.word	0x08001f47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d046      	beq.n	8001f4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec0:	e043      	b.n	8001f4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eca:	d140      	bne.n	8001f4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ed0:	e03d      	b.n	8001f4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eda:	d121      	bne.n	8001f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d837      	bhi.n	8001f52 <DMA_CheckFifoParam+0xda>
 8001ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee8 <DMA_CheckFifoParam+0x70>)
 8001ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08001eff 	.word	0x08001eff
 8001ef0:	08001ef9 	.word	0x08001ef9
 8001ef4:	08001f11 	.word	0x08001f11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      break;
 8001efc:	e030      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d025      	beq.n	8001f56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f0e:	e022      	b.n	8001f56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f18:	d11f      	bne.n	8001f5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f1e:	e01c      	b.n	8001f5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d903      	bls.n	8001f2e <DMA_CheckFifoParam+0xb6>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d003      	beq.n	8001f34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f2c:	e018      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
      break;
 8001f32:	e015      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      break;
 8001f44:	e00b      	b.n	8001f5e <DMA_CheckFifoParam+0xe6>
      break;
 8001f46:	bf00      	nop
 8001f48:	e00a      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e008      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
 8001f50:	e006      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f52:	bf00      	nop
 8001f54:	e004      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f56:	bf00      	nop
 8001f58:	e002      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f5a:	bf00      	nop
 8001f5c:	e000      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	@ 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e177      	b.n	800227c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 8166 	bne.w	8002276 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d130      	bne.n	8002024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b03      	cmp	r3, #3
 800202e:	d017      	beq.n	8002060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80c0 	beq.w	8002276 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b66      	ldr	r3, [pc, #408]	@ (8002294 <HAL_GPIO_Init+0x324>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	4a65      	ldr	r2, [pc, #404]	@ (8002294 <HAL_GPIO_Init+0x324>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002104:	6453      	str	r3, [r2, #68]	@ 0x44
 8002106:	4b63      	ldr	r3, [pc, #396]	@ (8002294 <HAL_GPIO_Init+0x324>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002112:	4a61      	ldr	r2, [pc, #388]	@ (8002298 <HAL_GPIO_Init+0x328>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a58      	ldr	r2, [pc, #352]	@ (800229c <HAL_GPIO_Init+0x32c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d037      	beq.n	80021ae <HAL_GPIO_Init+0x23e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a57      	ldr	r2, [pc, #348]	@ (80022a0 <HAL_GPIO_Init+0x330>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d031      	beq.n	80021aa <HAL_GPIO_Init+0x23a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a56      	ldr	r2, [pc, #344]	@ (80022a4 <HAL_GPIO_Init+0x334>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02b      	beq.n	80021a6 <HAL_GPIO_Init+0x236>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a55      	ldr	r2, [pc, #340]	@ (80022a8 <HAL_GPIO_Init+0x338>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d025      	beq.n	80021a2 <HAL_GPIO_Init+0x232>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a54      	ldr	r2, [pc, #336]	@ (80022ac <HAL_GPIO_Init+0x33c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01f      	beq.n	800219e <HAL_GPIO_Init+0x22e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a53      	ldr	r2, [pc, #332]	@ (80022b0 <HAL_GPIO_Init+0x340>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d019      	beq.n	800219a <HAL_GPIO_Init+0x22a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a52      	ldr	r2, [pc, #328]	@ (80022b4 <HAL_GPIO_Init+0x344>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a51      	ldr	r2, [pc, #324]	@ (80022b8 <HAL_GPIO_Init+0x348>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00d      	beq.n	8002192 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a50      	ldr	r2, [pc, #320]	@ (80022bc <HAL_GPIO_Init+0x34c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4f      	ldr	r2, [pc, #316]	@ (80022c0 <HAL_GPIO_Init+0x350>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_GPIO_Init+0x21a>
 8002186:	2309      	movs	r3, #9
 8002188:	e012      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800218a:	230a      	movs	r3, #10
 800218c:	e010      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800218e:	2308      	movs	r3, #8
 8002190:	e00e      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 8002192:	2307      	movs	r3, #7
 8002194:	e00c      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 8002196:	2306      	movs	r3, #6
 8002198:	e00a      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800219a:	2305      	movs	r3, #5
 800219c:	e008      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800219e:	2304      	movs	r3, #4
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021a2:	2303      	movs	r3, #3
 80021a4:	e004      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e002      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021ae:	2300      	movs	r3, #0
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f002 0203 	and.w	r2, r2, #3
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	4093      	lsls	r3, r2
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c0:	4935      	ldr	r1, [pc, #212]	@ (8002298 <HAL_GPIO_Init+0x328>)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ce:	4b3d      	ldr	r3, [pc, #244]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f2:	4a34      	ldr	r2, [pc, #208]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f8:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800221c:	4a29      	ldr	r2, [pc, #164]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002222:	4b28      	ldr	r3, [pc, #160]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002246:	4a1f      	ldr	r2, [pc, #124]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224c:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002270:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <HAL_GPIO_Init+0x354>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3301      	adds	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	f67f ae84 	bls.w	8001f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3724      	adds	r7, #36	@ 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	40013800 	.word	0x40013800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40020400 	.word	0x40020400
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40021400 	.word	0x40021400
 80022b4:	40021800 	.word	0x40021800
 80022b8:	40021c00 	.word	0x40021c00
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40022400 	.word	0x40022400
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_PWREx_EnableOverDrive+0x90>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <HAL_PWREx_EnableOverDrive+0x90>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	@ 0x40
 8002316:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <HAL_PWREx_EnableOverDrive+0x90>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x94>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002328:	f7ff f8d2 	bl	80014d0 <HAL_GetTick>
 800232c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800232e:	e009      	b.n	8002344 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002330:	f7ff f8ce 	bl	80014d0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233e:	d901      	bls.n	8002344 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e01f      	b.n	8002384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_PWREx_EnableOverDrive+0x98>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d1ee      	bne.n	8002330 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002358:	f7ff f8ba 	bl	80014d0 <HAL_GetTick>
 800235c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800235e:	e009      	b.n	8002374 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002360:	f7ff f8b6 	bl	80014d0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800236e:	d901      	bls.n	8002374 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e007      	b.n	8002384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <HAL_PWREx_EnableOverDrive+0x98>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002380:	d1ee      	bne.n	8002360 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	420e0040 	.word	0x420e0040
 8002394:	40007000 	.word	0x40007000
 8002398:	420e0044 	.word	0x420e0044

0800239c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e267      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d075      	beq.n	80024a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ba:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c6:	4b85      	ldr	r3, [pc, #532]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d112      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4b82      	ldr	r3, [pc, #520]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023de:	d10b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	4b7e      	ldr	r3, [pc, #504]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x108>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d157      	bne.n	80024a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e242      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x74>
 8002402:	4b76      	ldr	r3, [pc, #472]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b70      	ldr	r3, [pc, #448]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6f      	ldr	r2, [pc, #444]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b6d      	ldr	r3, [pc, #436]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6c      	ldr	r2, [pc, #432]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002434:	4b69      	ldr	r3, [pc, #420]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a68      	ldr	r2, [pc, #416]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff f83c 	bl	80014d0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff f838 	bl	80014d0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	@ 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e207      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b5b      	ldr	r3, [pc, #364]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0xc0>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff f828 	bl	80014d0 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff f824 	bl	80014d0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1f3      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	4b51      	ldr	r3, [pc, #324]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0xe8>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d063      	beq.n	800257a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024b2:	4b4a      	ldr	r3, [pc, #296]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d11c      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b44      	ldr	r3, [pc, #272]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e1c7      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4937      	ldr	r1, [pc, #220]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	e03a      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250c:	4b34      	ldr	r3, [pc, #208]	@ (80025e0 <HAL_RCC_OscConfig+0x244>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe ffdd 	bl	80014d0 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251a:	f7fe ffd9 	bl	80014d0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1a8      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b2b      	ldr	r3, [pc, #172]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4925      	ldr	r1, [pc, #148]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e015      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <HAL_RCC_OscConfig+0x244>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe ffbc 	bl	80014d0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe ffb8 	bl	80014d0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e187      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d036      	beq.n	80025f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <HAL_RCC_OscConfig+0x248>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe ff9c 	bl	80014d0 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe ff98 	bl	80014d0 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e167      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x200>
 80025ba:	e01b      	b.n	80025f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025bc:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_RCC_OscConfig+0x248>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe ff85 	bl	80014d0 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	e00e      	b.n	80025e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ca:	f7fe ff81 	bl	80014d0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d907      	bls.n	80025e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e150      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470000 	.word	0x42470000
 80025e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	4b88      	ldr	r3, [pc, #544]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ea      	bne.n	80025ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8097 	beq.w	8002730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b81      	ldr	r3, [pc, #516]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b7d      	ldr	r3, [pc, #500]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a7c      	ldr	r2, [pc, #496]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b7a      	ldr	r3, [pc, #488]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b77      	ldr	r3, [pc, #476]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d118      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b74      	ldr	r3, [pc, #464]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a73      	ldr	r2, [pc, #460]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7fe ff41 	bl	80014d0 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7fe ff3d 	bl	80014d0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e10c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ea>
 8002678:	4b64      	ldr	r3, [pc, #400]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267c:	4a63      	ldr	r2, [pc, #396]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	@ 0x70
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x30c>
 800268e:	4b5f      	ldr	r3, [pc, #380]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002692:	4a5e      	ldr	r2, [pc, #376]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6713      	str	r3, [r2, #112]	@ 0x70
 800269a:	4b5c      	ldr	r3, [pc, #368]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	4a5b      	ldr	r2, [pc, #364]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 80026a8:	4b58      	ldr	r3, [pc, #352]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	4a57      	ldr	r2, [pc, #348]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b4:	4b55      	ldr	r3, [pc, #340]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	4a54      	ldr	r2, [pc, #336]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe ff02 	bl	80014d0 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fefe 	bl	80014d0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0cb      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	4b49      	ldr	r3, [pc, #292]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ee      	beq.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe feec 	bl	80014d0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe fee8 	bl	80014d0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0b5      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002712:	4b3e      	ldr	r3, [pc, #248]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b39      	ldr	r3, [pc, #228]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a38      	ldr	r2, [pc, #224]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a1 	beq.w	800287c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273a:	4b34      	ldr	r3, [pc, #208]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d05c      	beq.n	8002800 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d141      	bne.n	80027d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <HAL_RCC_OscConfig+0x478>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe febc 	bl	80014d0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe feb8 	bl	80014d0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e087      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b27      	ldr	r3, [pc, #156]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	491b      	ldr	r1, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x478>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe fe91 	bl	80014d0 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe fe8d 	bl	80014d0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e05c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x416>
 80027d0:	e054      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fe7a 	bl	80014d0 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fe76 	bl	80014d0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e045      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
 80027fe:	e03d      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e038      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000
 8002814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x4ec>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d028      	beq.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d121      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d11a      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800284e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	4293      	cmp	r3, r2
 8002852:	d111      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0cc      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b68      	ldr	r3, [pc, #416]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d90c      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b65      	ldr	r3, [pc, #404]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a58      	ldr	r2, [pc, #352]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a52      	ldr	r2, [pc, #328]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d044      	beq.n	80029ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d119      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d003      	beq.n	800294a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002946:	2b03      	cmp	r3, #3
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e06f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e067      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b37      	ldr	r3, [pc, #220]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4934      	ldr	r1, [pc, #208]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7fe fda8 	bl	80014d0 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7fe fda4 	bl	80014d0 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e04f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d20c      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b22      	ldr	r3, [pc, #136]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490a      	ldr	r1, [pc, #40]	@ (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fd08 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023c00 	.word	0x40023c00
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	080051c8 	.word	0x080051c8
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b094      	sub	sp, #80	@ 0x50
 8002a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a70:	4b79      	ldr	r3, [pc, #484]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d00d      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x40>
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	f200 80e1 	bhi.w	8002c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x34>
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a8a:	e0db      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b73      	ldr	r3, [pc, #460]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a90:	e0db      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a92:	4b73      	ldr	r3, [pc, #460]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a96:	e0d8      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a98:	4b6f      	ldr	r3, [pc, #444]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d063      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aae:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ab8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002aca:	4622      	mov	r2, r4
 8002acc:	462b      	mov	r3, r5
 8002ace:	f04f 0000 	mov.w	r0, #0
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	0159      	lsls	r1, r3, #5
 8002ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002adc:	0150      	lsls	r0, r2, #5
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	1a51      	subs	r1, r2, r1
 8002ae6:	6139      	str	r1, [r7, #16]
 8002ae8:	4629      	mov	r1, r5
 8002aea:	eb63 0301 	sbc.w	r3, r3, r1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002afc:	4659      	mov	r1, fp
 8002afe:	018b      	lsls	r3, r1, #6
 8002b00:	4651      	mov	r1, sl
 8002b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b06:	4651      	mov	r1, sl
 8002b08:	018a      	lsls	r2, r1, #6
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b10:	4659      	mov	r1, fp
 8002b12:	eb63 0901 	sbc.w	r9, r3, r1
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	eb18 0303 	adds.w	r3, r8, r3
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	462b      	mov	r3, r5
 8002b38:	eb49 0303 	adc.w	r3, r9, r3
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	024b      	lsls	r3, r1, #9
 8002b4e:	4621      	mov	r1, r4
 8002b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b54:	4621      	mov	r1, r4
 8002b56:	024a      	lsls	r2, r1, #9
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b68:	f7fd fb92 	bl	8000290 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b74:	e058      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b38      	ldr	r3, [pc, #224]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4611      	mov	r1, r2
 8002b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	0159      	lsls	r1, r3, #5
 8002b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba2:	0150      	lsls	r0, r2, #5
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bae:	4649      	mov	r1, r9
 8002bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	00eb      	lsls	r3, r5, #3
 8002bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bde:	00e2      	lsls	r2, r4, #3
 8002be0:	4614      	mov	r4, r2
 8002be2:	461d      	mov	r5, r3
 8002be4:	4643      	mov	r3, r8
 8002be6:	18e3      	adds	r3, r4, r3
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	464b      	mov	r3, r9
 8002bec:	eb45 0303 	adc.w	r3, r5, r3
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	028b      	lsls	r3, r1, #10
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c08:	4621      	mov	r1, r4
 8002c0a:	028a      	lsls	r2, r1, #10
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c12:	2200      	movs	r2, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	61fa      	str	r2, [r7, #28]
 8002c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1c:	f7fd fb38 	bl	8000290 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c28:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3750      	adds	r7, #80	@ 0x50
 8002c50:	46bd      	mov	sp, r7
 8002c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	007a1200 	.word	0x007a1200

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	@ (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	@ (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080051d8 	.word	0x080051d8

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffdc 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0b5b      	lsrs	r3, r3, #13
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	@ (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	080051d8 	.word	0x080051d8

08002ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07b      	b.n	8002dd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cee:	d009      	beq.n	8002d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
 8002cf6:	e005      	b.n	8002d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fd ffb6 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d88:	ea42 0103 	orr.w	r1, r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f003 0104 	and.w	r1, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	f003 0210 	and.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10e      	bne.n	8002e20 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
    return;
 8002e1e:	e0ce      	b.n	8002fbe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_SPI_IRQHandler+0x5e>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
    return;
 8002e3c:	e0bf      	b.n	8002fbe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_SPI_IRQHandler+0x7e>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80b0 	beq.w	8002fbe <HAL_SPI_IRQHandler+0x1de>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80aa 	beq.w	8002fbe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d023      	beq.n	8002ebc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d011      	beq.n	8002ea4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	e00b      	b.n	8002ebc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
        return;
 8002eba:	e080      	b.n	8002fbe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d014      	beq.n	8002ef0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efe:	f043 0208 	orr.w	r2, r3, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d04f      	beq.n	8002fbc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <HAL_SPI_IRQHandler+0x168>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d034      	beq.n	8002fb2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0203 	bic.w	r2, r2, #3
 8002f56:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d011      	beq.n	8002f84 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	4a17      	ldr	r2, [pc, #92]	@ (8002fc4 <HAL_SPI_IRQHandler+0x1e4>)
 8002f66:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fd67 	bl	8001a40 <HAL_DMA_Abort_IT>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d016      	beq.n	8002fba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f90:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc4 <HAL_SPI_IRQHandler+0x1e4>)
 8002f92:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe fd51 	bl	8001a40 <HAL_DMA_Abort_IT>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002fb0:	e003      	b.n	8002fba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f808 	bl	8002fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002fb8:	e000      	b.n	8002fbc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002fba:	bf00      	nop
    return;
 8002fbc:	bf00      	nop
  }
}
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	08002fdd 	.word	0x08002fdd

08002fc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ffe6 	bl	8002fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e042      	b.n	800309c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fea0 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	@ 0x24
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 f889 	bl	8004160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800305c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800306c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800307c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	@ 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d175      	bne.n	80031b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_Transmit+0x2c>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e06e      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2221      	movs	r2, #33	@ 0x21
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e2:	f7fe f9f5 	bl	80014d0 <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fc:	d108      	bne.n	8003110 <HAL_UART_Transmit+0x6c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e003      	b.n	8003118 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003118:	e02e      	b.n	8003178 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	2180      	movs	r1, #128	@ 0x80
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fd61 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e03a      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3302      	adds	r3, #2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e007      	b.n	800316a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1cb      	bne.n	800311a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	@ 0x40
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fd2d 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e006      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b08a      	sub	sp, #40	@ 0x28
 80031be:	af02      	add	r7, sp, #8
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	f040 8081 	bne.w	80032de <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_UART_Receive+0x2e>
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e079      	b.n	80032e0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2222      	movs	r2, #34	@ 0x22
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003200:	f7fe f966 	bl	80014d0 <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800321a:	d108      	bne.n	800322e <HAL_UART_Receive+0x74>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e003      	b.n	8003236 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003236:	e047      	b.n	80032c8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	2120      	movs	r1, #32
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fcd2 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e042      	b.n	80032e0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326c:	b29a      	uxth	r2, r3
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	3302      	adds	r3, #2
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	e01f      	b.n	80032ba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003282:	d007      	beq.n	8003294 <HAL_UART_Receive+0xda>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_UART_Receive+0xe8>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e008      	b.n	80032b4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	3301      	adds	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1b2      	bne.n	8003238 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d112      	bne.n	8003328 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_UART_Receive_DMA+0x26>
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00b      	b.n	800332a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	461a      	mov	r2, r3
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fcbe 	bl	8003ca0 <UART_Start_Receive_DMA>
 8003324:	4603      	mov	r3, r0
 8003326:	e000      	b.n	800332a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b09a      	sub	sp, #104	@ 0x68
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800334a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003350:	667b      	str	r3, [r7, #100]	@ 0x64
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800335a:	657a      	str	r2, [r7, #84]	@ 0x54
 800335c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003360:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e5      	bne.n	800333a <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3314      	adds	r3, #20
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	663b      	str	r3, [r7, #96]	@ 0x60
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3314      	adds	r3, #20
 800338c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800338e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e5      	bne.n	800336e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d119      	bne.n	80033de <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f023 0310 	bic.w	r3, r3, #16
 80033c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80033ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e5      	bne.n	80033aa <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e8:	2b40      	cmp	r3, #64	@ 0x40
 80033ea:	d136      	bne.n	800345a <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003402:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3314      	adds	r3, #20
 800340a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800340c:	61ba      	str	r2, [r7, #24]
 800340e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6979      	ldr	r1, [r7, #20]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	613b      	str	r3, [r7, #16]
   return(result);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e5      	bne.n	80033ec <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d018      	beq.n	800345a <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	2200      	movs	r2, #0
 800342e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe fa93 	bl	8001960 <HAL_DMA_Abort>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00c      	beq.n	800345a <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fca7 	bl	8001d98 <HAL_DMA_GetError>
 800344a:	4603      	mov	r3, r0
 800344c:	2b20      	cmp	r3, #32
 800344e:	d104      	bne.n	800345a <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2210      	movs	r2, #16
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e00a      	b.n	8003470 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3768      	adds	r7, #104	@ 0x68
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b0ba      	sub	sp, #232	@ 0xe8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80034b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_UART_IRQHandler+0x66>
 80034ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fd83 	bl	8003fe2 <UART_Receive_IT>
      return;
 80034dc:	e25b      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80de 	beq.w	80036a4 <HAL_UART_IRQHandler+0x22c>
 80034e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80d1 	beq.w	80036a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_UART_IRQHandler+0xae>
 800350e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_UART_IRQHandler+0xd2>
 8003532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_UART_IRQHandler+0xf6>
 8003556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <HAL_UART_IRQHandler+0x126>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f043 0208 	orr.w	r2, r3, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 81f2 	beq.w	800398c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_UART_IRQHandler+0x14e>
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fd0e 	bl	8003fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d0:	2b40      	cmp	r3, #64	@ 0x40
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_UART_IRQHandler+0x17a>
 80035ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04f      	beq.n	8003692 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fc16 	bl	8003e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d141      	bne.n	800368a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800361c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003632:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800363e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800364a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1d9      	bne.n	8003606 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365e:	4a7e      	ldr	r2, [pc, #504]	@ (8003858 <HAL_UART_IRQHandler+0x3e0>)
 8003660:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe f9ea 	bl	8001a40 <HAL_DMA_Abort_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800367c:	4610      	mov	r0, r2
 800367e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e00e      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f99e 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00a      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f99a 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e006      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f996 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800369e:	e175      	b.n	800398c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	bf00      	nop
    return;
 80036a2:	e173      	b.n	800398c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 814f 	bne.w	800394c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8148 	beq.w	800394c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8141 	beq.w	800394c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b40      	cmp	r3, #64	@ 0x40
 80036ec:	f040 80b6 	bne.w	800385c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8145 	beq.w	8003990 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800370a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800370e:	429a      	cmp	r2, r3
 8003710:	f080 813e 	bcs.w	8003990 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800371a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003726:	f000 8088 	beq.w	800383a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003756:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800375a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003762:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800376e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1d9      	bne.n	800372a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003786:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800379a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800379e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e1      	bne.n	8003776 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e3      	bne.n	80037b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380a:	f023 0310 	bic.w	r3, r3, #16
 800380e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800381c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800381e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800382a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e3      	bne.n	80037f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe f893 	bl	8001960 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003848:	b29b      	uxth	r3, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	b29b      	uxth	r3, r3
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8c1 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003856:	e09b      	b.n	8003990 <HAL_UART_IRQHandler+0x518>
 8003858:	08003eeb 	.word	0x08003eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003864:	b29b      	uxth	r3, r3
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 808e 	beq.w	8003994 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8089 	beq.w	8003994 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003898:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e3      	bne.n	8003882 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	623b      	str	r3, [r7, #32]
   return(result);
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3314      	adds	r3, #20
 80038da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038de:	633a      	str	r2, [r7, #48]	@ 0x30
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e3      	bne.n	80038ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003924:	61fa      	str	r2, [r7, #28]
 8003926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	617b      	str	r3, [r7, #20]
   return(result);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e3      	bne.n	8003900 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800393e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f847 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394a:	e023      	b.n	8003994 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_UART_IRQHandler+0x4f4>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fad4 	bl	8003f12 <UART_Transmit_IT>
    return;
 800396a:	e014      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00e      	beq.n	8003996 <HAL_UART_IRQHandler+0x51e>
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fb14 	bl	8003fb2 <UART_EndTransmit_IT>
    return;
 800398a:	e004      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
    return;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
      return;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
      return;
 8003994:	bf00      	nop
  }
}
 8003996:	37e8      	adds	r7, #232	@ 0xe8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b09c      	sub	sp, #112	@ 0x70
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d172      	bne.n	8003af2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a0e:	2200      	movs	r2, #0
 8003a10:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003a32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e5      	bne.n	8003a12 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a66:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e5      	bne.n	8003a7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d119      	bne.n	8003af2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0310 	bic.w	r3, r3, #16
 8003ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ade:	61fa      	str	r2, [r7, #28]
 8003ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	617b      	str	r3, [r7, #20]
   return(result);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af4:	2200      	movs	r2, #0
 8003af6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d106      	bne.n	8003b0e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b04:	4619      	mov	r1, r3
 8003b06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003b08:	f7ff ff66 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b0c:	e002      	b.n	8003b14 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003b0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003b10:	f7fc fd36 	bl	8000580 <HAL_UART_RxCpltCallback>
}
 8003b14:	bf00      	nop
 8003b16:	3770      	adds	r7, #112	@ 0x70
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d108      	bne.n	8003b4a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff ff48 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b48:	e002      	b.n	8003b50 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ff30 	bl	80039b0 <HAL_UART_RxHalfCpltCallback>
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b80      	cmp	r3, #128	@ 0x80
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b21      	cmp	r3, #33	@ 0x21
 8003b8a:	d108      	bne.n	8003b9e <UART_DMAError+0x46>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2200      	movs	r2, #0
 8003b96:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003b98:	68b8      	ldr	r0, [r7, #8]
 8003b9a:	f000 f91b 	bl	8003dd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b40      	cmp	r3, #64	@ 0x40
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b22      	cmp	r3, #34	@ 0x22
 8003bbe:	d108      	bne.n	8003bd2 <UART_DMAError+0x7a>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003bcc:	68b8      	ldr	r0, [r7, #8]
 8003bce:	f000 f929 	bl	8003e24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f043 0210 	orr.w	r2, r3, #16
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bde:	68b8      	ldr	r0, [r7, #8]
 8003be0:	f7ff fef0 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfc:	e03b      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d037      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fd fc63 	bl	80014d0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e03a      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d023      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b80      	cmp	r3, #128	@ 0x80
 8003c32:	d020      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b40      	cmp	r3, #64	@ 0x40
 8003c38:	d01d      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d116      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f8e0 	bl	8003e24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2208      	movs	r2, #8
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d0b4      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b098      	sub	sp, #96	@ 0x60
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2222      	movs	r2, #34	@ 0x22
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc8 <UART_Start_Receive_DMA+0x128>)
 8003cce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8003dcc <UART_Start_Receive_DMA+0x12c>)
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd0 <UART_Start_Receive_DMA+0x130>)
 8003cde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	f7fd fdd6 	bl	80018b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d42:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d76:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003d7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003daa:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6a39      	ldr	r1, [r7, #32]
 8003db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3760      	adds	r7, #96	@ 0x60
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	080039f1 	.word	0x080039f1
 8003dcc:	08003b1d 	.word	0x08003b1d
 8003dd0:	08003b59 	.word	0x08003b59

08003dd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	@ 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	61ba      	str	r2, [r7, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6979      	ldr	r1, [r7, #20]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003e18:	bf00      	nop
 8003e1a:	3724      	adds	r7, #36	@ 0x24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b095      	sub	sp, #84	@ 0x54
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d119      	bne.n	8003ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f023 0310 	bic.w	r3, r3, #16
 8003eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ebc:	61ba      	str	r2, [r7, #24]
 8003ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6979      	ldr	r1, [r7, #20]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ede:	bf00      	nop
 8003ee0:	3754      	adds	r7, #84	@ 0x54
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fd5d 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b21      	cmp	r3, #33	@ 0x21
 8003f24:	d13e      	bne.n	8003fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2e:	d114      	bne.n	8003f5a <UART_Transmit_IT+0x48>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d110      	bne.n	8003f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	1c9a      	adds	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]
 8003f58:	e008      	b.n	8003f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	1c59      	adds	r1, r3, #1
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6211      	str	r1, [r2, #32]
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10f      	bne.n	8003fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fce2 	bl	800399c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b08c      	sub	sp, #48	@ 0x30
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b22      	cmp	r3, #34	@ 0x22
 8003ff4:	f040 80ae 	bne.w	8004154 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004000:	d117      	bne.n	8004032 <UART_Receive_IT+0x50>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d113      	bne.n	8004032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	b29a      	uxth	r2, r3
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004030:	e026      	b.n	8004080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004044:	d007      	beq.n	8004056 <UART_Receive_IT+0x74>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <UART_Receive_IT+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e008      	b.n	8004076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004070:	b2da      	uxtb	r2, r3
 8004072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29b      	uxth	r3, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004090:	2b00      	cmp	r3, #0
 8004092:	d15d      	bne.n	8004150 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0220 	bic.w	r2, r2, #32
 80040a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d135      	bne.n	8004146 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	613b      	str	r3, [r7, #16]
   return(result);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004100:	623a      	str	r2, [r7, #32]
 8004102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	69f9      	ldr	r1, [r7, #28]
 8004106:	6a3a      	ldr	r2, [r7, #32]
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	61bb      	str	r3, [r7, #24]
   return(result);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d10a      	bne.n	8004138 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fc4a 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
 8004144:	e002      	b.n	800414c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc fa1a 	bl	8000580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e002      	b.n	8004156 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3730      	adds	r7, #48	@ 0x30
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b0c0      	sub	sp, #256	@ 0x100
 8004166:	af00      	add	r7, sp, #0
 8004168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	68d9      	ldr	r1, [r3, #12]
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	ea40 0301 	orr.w	r3, r0, r1
 8004188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	431a      	orrs	r2, r3
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041b8:	f021 010c 	bic.w	r1, r1, #12
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041c6:	430b      	orrs	r3, r1
 80041c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	6999      	ldr	r1, [r3, #24]
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	ea40 0301 	orr.w	r3, r0, r1
 80041e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b8f      	ldr	r3, [pc, #572]	@ (800442c <UART_SetConfig+0x2cc>)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d005      	beq.n	8004200 <UART_SetConfig+0xa0>
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004430 <UART_SetConfig+0x2d0>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d104      	bne.n	800420a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004200:	f7fe fd50 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8004204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004208:	e003      	b.n	8004212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800420a:	f7fe fd37 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 800420e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800421c:	f040 810c 	bne.w	8004438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800422a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800422e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004232:	4622      	mov	r2, r4
 8004234:	462b      	mov	r3, r5
 8004236:	1891      	adds	r1, r2, r2
 8004238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800423a:	415b      	adcs	r3, r3
 800423c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800423e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004242:	4621      	mov	r1, r4
 8004244:	eb12 0801 	adds.w	r8, r2, r1
 8004248:	4629      	mov	r1, r5
 800424a:	eb43 0901 	adc.w	r9, r3, r1
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800425a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800425e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004262:	4690      	mov	r8, r2
 8004264:	4699      	mov	r9, r3
 8004266:	4623      	mov	r3, r4
 8004268:	eb18 0303 	adds.w	r3, r8, r3
 800426c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004270:	462b      	mov	r3, r5
 8004272:	eb49 0303 	adc.w	r3, r9, r3
 8004276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800428a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800428e:	460b      	mov	r3, r1
 8004290:	18db      	adds	r3, r3, r3
 8004292:	653b      	str	r3, [r7, #80]	@ 0x50
 8004294:	4613      	mov	r3, r2
 8004296:	eb42 0303 	adc.w	r3, r2, r3
 800429a:	657b      	str	r3, [r7, #84]	@ 0x54
 800429c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042a4:	f7fb fff4 	bl	8000290 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <UART_SetConfig+0x2d4>)
 80042ae:	fba3 2302 	umull	r2, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	011c      	lsls	r4, r3, #4
 80042b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	1891      	adds	r1, r2, r2
 80042ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042d0:	415b      	adcs	r3, r3
 80042d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042d8:	4641      	mov	r1, r8
 80042da:	eb12 0a01 	adds.w	sl, r2, r1
 80042de:	4649      	mov	r1, r9
 80042e0:	eb43 0b01 	adc.w	fp, r3, r1
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f8:	4692      	mov	sl, r2
 80042fa:	469b      	mov	fp, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004306:	464b      	mov	r3, r9
 8004308:	eb4b 0303 	adc.w	r3, fp, r3
 800430c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800431c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004324:	460b      	mov	r3, r1
 8004326:	18db      	adds	r3, r3, r3
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
 800432a:	4613      	mov	r3, r2
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	647b      	str	r3, [r7, #68]	@ 0x44
 8004332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800433a:	f7fb ffa9 	bl	8000290 <__aeabi_uldivmod>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4611      	mov	r1, r2
 8004344:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <UART_SetConfig+0x2d4>)
 8004346:	fba3 2301 	umull	r2, r3, r3, r1
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2264      	movs	r2, #100	@ 0x64
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	1acb      	subs	r3, r1, r3
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800435a:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <UART_SetConfig+0x2d4>)
 800435c:	fba3 2302 	umull	r2, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004368:	441c      	add	r4, r3
 800436a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800436e:	2200      	movs	r2, #0
 8004370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	1891      	adds	r1, r2, r2
 8004382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004384:	415b      	adcs	r3, r3
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800438c:	4641      	mov	r1, r8
 800438e:	1851      	adds	r1, r2, r1
 8004390:	6339      	str	r1, [r7, #48]	@ 0x30
 8004392:	4649      	mov	r1, r9
 8004394:	414b      	adcs	r3, r1
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043a4:	4659      	mov	r1, fp
 80043a6:	00cb      	lsls	r3, r1, #3
 80043a8:	4651      	mov	r1, sl
 80043aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ae:	4651      	mov	r1, sl
 80043b0:	00ca      	lsls	r2, r1, #3
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	4642      	mov	r2, r8
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043c0:	464b      	mov	r3, r9
 80043c2:	460a      	mov	r2, r1
 80043c4:	eb42 0303 	adc.w	r3, r2, r3
 80043c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043e0:	460b      	mov	r3, r1
 80043e2:	18db      	adds	r3, r3, r3
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e6:	4613      	mov	r3, r2
 80043e8:	eb42 0303 	adc.w	r3, r2, r3
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043f6:	f7fb ff4b 	bl	8000290 <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <UART_SetConfig+0x2d4>)
 8004400:	fba3 1302 	umull	r1, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	2164      	movs	r1, #100	@ 0x64
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	3332      	adds	r3, #50	@ 0x32
 8004412:	4a08      	ldr	r2, [pc, #32]	@ (8004434 <UART_SetConfig+0x2d4>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f003 0207 	and.w	r2, r3, #7
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4422      	add	r2, r4
 8004426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004428:	e106      	b.n	8004638 <UART_SetConfig+0x4d8>
 800442a:	bf00      	nop
 800442c:	40011000 	.word	0x40011000
 8004430:	40011400 	.word	0x40011400
 8004434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443c:	2200      	movs	r2, #0
 800443e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800444a:	4642      	mov	r2, r8
 800444c:	464b      	mov	r3, r9
 800444e:	1891      	adds	r1, r2, r2
 8004450:	6239      	str	r1, [r7, #32]
 8004452:	415b      	adcs	r3, r3
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
 8004456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800445a:	4641      	mov	r1, r8
 800445c:	1854      	adds	r4, r2, r1
 800445e:	4649      	mov	r1, r9
 8004460:	eb43 0501 	adc.w	r5, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	00eb      	lsls	r3, r5, #3
 800446e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004472:	00e2      	lsls	r2, r4, #3
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	4643      	mov	r3, r8
 800447a:	18e3      	adds	r3, r4, r3
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004480:	464b      	mov	r3, r9
 8004482:	eb45 0303 	adc.w	r3, r5, r3
 8004486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044a6:	4629      	mov	r1, r5
 80044a8:	008b      	lsls	r3, r1, #2
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b0:	4621      	mov	r1, r4
 80044b2:	008a      	lsls	r2, r1, #2
 80044b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044b8:	f7fb feea 	bl	8000290 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4b60      	ldr	r3, [pc, #384]	@ (8004644 <UART_SetConfig+0x4e4>)
 80044c2:	fba3 2302 	umull	r2, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	011c      	lsls	r4, r3, #4
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044dc:	4642      	mov	r2, r8
 80044de:	464b      	mov	r3, r9
 80044e0:	1891      	adds	r1, r2, r2
 80044e2:	61b9      	str	r1, [r7, #24]
 80044e4:	415b      	adcs	r3, r3
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ec:	4641      	mov	r1, r8
 80044ee:	1851      	adds	r1, r2, r1
 80044f0:	6139      	str	r1, [r7, #16]
 80044f2:	4649      	mov	r1, r9
 80044f4:	414b      	adcs	r3, r1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004504:	4659      	mov	r1, fp
 8004506:	00cb      	lsls	r3, r1, #3
 8004508:	4651      	mov	r1, sl
 800450a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450e:	4651      	mov	r1, sl
 8004510:	00ca      	lsls	r2, r1, #3
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	4603      	mov	r3, r0
 8004518:	4642      	mov	r2, r8
 800451a:	189b      	adds	r3, r3, r2
 800451c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004520:	464b      	mov	r3, r9
 8004522:	460a      	mov	r2, r1
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004544:	4649      	mov	r1, r9
 8004546:	008b      	lsls	r3, r1, #2
 8004548:	4641      	mov	r1, r8
 800454a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800454e:	4641      	mov	r1, r8
 8004550:	008a      	lsls	r2, r1, #2
 8004552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004556:	f7fb fe9b 	bl	8000290 <__aeabi_uldivmod>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4611      	mov	r1, r2
 8004560:	4b38      	ldr	r3, [pc, #224]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004562:	fba3 2301 	umull	r2, r3, r3, r1
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	2264      	movs	r2, #100	@ 0x64
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	1acb      	subs	r3, r1, r3
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	3332      	adds	r3, #50	@ 0x32
 8004574:	4a33      	ldr	r2, [pc, #204]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004580:	441c      	add	r4, r3
 8004582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004586:	2200      	movs	r2, #0
 8004588:	673b      	str	r3, [r7, #112]	@ 0x70
 800458a:	677a      	str	r2, [r7, #116]	@ 0x74
 800458c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	1891      	adds	r1, r2, r2
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	415b      	adcs	r3, r3
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a0:	4641      	mov	r1, r8
 80045a2:	1851      	adds	r1, r2, r1
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	4649      	mov	r1, r9
 80045a8:	414b      	adcs	r3, r1
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045b8:	4659      	mov	r1, fp
 80045ba:	00cb      	lsls	r3, r1, #3
 80045bc:	4651      	mov	r1, sl
 80045be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c2:	4651      	mov	r1, sl
 80045c4:	00ca      	lsls	r2, r1, #3
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	4642      	mov	r2, r8
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045d2:	464b      	mov	r3, r9
 80045d4:	460a      	mov	r2, r1
 80045d6:	eb42 0303 	adc.w	r3, r2, r3
 80045da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045f4:	4649      	mov	r1, r9
 80045f6:	008b      	lsls	r3, r1, #2
 80045f8:	4641      	mov	r1, r8
 80045fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fe:	4641      	mov	r1, r8
 8004600:	008a      	lsls	r2, r1, #2
 8004602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004606:	f7fb fe43 	bl	8000290 <__aeabi_uldivmod>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004610:	fba3 1302 	umull	r1, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	2164      	movs	r1, #100	@ 0x64
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	3332      	adds	r3, #50	@ 0x32
 8004622:	4a08      	ldr	r2, [pc, #32]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	f003 020f 	and.w	r2, r3, #15
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4422      	add	r2, r4
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	bf00      	nop
 800463a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800463e:	46bd      	mov	sp, r7
 8004640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004644:	51eb851f 	.word	0x51eb851f

08004648 <atoi>:
 8004648:	220a      	movs	r2, #10
 800464a:	2100      	movs	r1, #0
 800464c:	f000 b938 	b.w	80048c0 <strtol>

08004650 <malloc>:
 8004650:	4b02      	ldr	r3, [pc, #8]	@ (800465c <malloc+0xc>)
 8004652:	4601      	mov	r1, r0
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	f000 b82d 	b.w	80046b4 <_malloc_r>
 800465a:	bf00      	nop
 800465c:	2000000c 	.word	0x2000000c

08004660 <free>:
 8004660:	4b02      	ldr	r3, [pc, #8]	@ (800466c <free+0xc>)
 8004662:	4601      	mov	r1, r0
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	f000 b9a7 	b.w	80049b8 <_free_r>
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c

08004670 <sbrk_aligned>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4e0f      	ldr	r6, [pc, #60]	@ (80046b0 <sbrk_aligned+0x40>)
 8004674:	460c      	mov	r4, r1
 8004676:	6831      	ldr	r1, [r6, #0]
 8004678:	4605      	mov	r5, r0
 800467a:	b911      	cbnz	r1, 8004682 <sbrk_aligned+0x12>
 800467c:	f000 f952 	bl	8004924 <_sbrk_r>
 8004680:	6030      	str	r0, [r6, #0]
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f94d 	bl	8004924 <_sbrk_r>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d103      	bne.n	8004696 <sbrk_aligned+0x26>
 800468e:	f04f 34ff 	mov.w	r4, #4294967295
 8004692:	4620      	mov	r0, r4
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	1cc4      	adds	r4, r0, #3
 8004698:	f024 0403 	bic.w	r4, r4, #3
 800469c:	42a0      	cmp	r0, r4
 800469e:	d0f8      	beq.n	8004692 <sbrk_aligned+0x22>
 80046a0:	1a21      	subs	r1, r4, r0
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 f93e 	bl	8004924 <_sbrk_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d1f2      	bne.n	8004692 <sbrk_aligned+0x22>
 80046ac:	e7ef      	b.n	800468e <sbrk_aligned+0x1e>
 80046ae:	bf00      	nop
 80046b0:	20004a94 	.word	0x20004a94

080046b4 <_malloc_r>:
 80046b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b8:	1ccd      	adds	r5, r1, #3
 80046ba:	f025 0503 	bic.w	r5, r5, #3
 80046be:	3508      	adds	r5, #8
 80046c0:	2d0c      	cmp	r5, #12
 80046c2:	bf38      	it	cc
 80046c4:	250c      	movcc	r5, #12
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	4606      	mov	r6, r0
 80046ca:	db01      	blt.n	80046d0 <_malloc_r+0x1c>
 80046cc:	42a9      	cmp	r1, r5
 80046ce:	d904      	bls.n	80046da <_malloc_r+0x26>
 80046d0:	230c      	movs	r3, #12
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	2000      	movs	r0, #0
 80046d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047b0 <_malloc_r+0xfc>
 80046de:	f000 f869 	bl	80047b4 <__malloc_lock>
 80046e2:	f8d8 3000 	ldr.w	r3, [r8]
 80046e6:	461c      	mov	r4, r3
 80046e8:	bb44      	cbnz	r4, 800473c <_malloc_r+0x88>
 80046ea:	4629      	mov	r1, r5
 80046ec:	4630      	mov	r0, r6
 80046ee:	f7ff ffbf 	bl	8004670 <sbrk_aligned>
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	4604      	mov	r4, r0
 80046f6:	d158      	bne.n	80047aa <_malloc_r+0xf6>
 80046f8:	f8d8 4000 	ldr.w	r4, [r8]
 80046fc:	4627      	mov	r7, r4
 80046fe:	2f00      	cmp	r7, #0
 8004700:	d143      	bne.n	800478a <_malloc_r+0xd6>
 8004702:	2c00      	cmp	r4, #0
 8004704:	d04b      	beq.n	800479e <_malloc_r+0xea>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4639      	mov	r1, r7
 800470a:	4630      	mov	r0, r6
 800470c:	eb04 0903 	add.w	r9, r4, r3
 8004710:	f000 f908 	bl	8004924 <_sbrk_r>
 8004714:	4581      	cmp	r9, r0
 8004716:	d142      	bne.n	800479e <_malloc_r+0xea>
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	1a6d      	subs	r5, r5, r1
 800471c:	4629      	mov	r1, r5
 800471e:	4630      	mov	r0, r6
 8004720:	f7ff ffa6 	bl	8004670 <sbrk_aligned>
 8004724:	3001      	adds	r0, #1
 8004726:	d03a      	beq.n	800479e <_malloc_r+0xea>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	442b      	add	r3, r5
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	f8d8 3000 	ldr.w	r3, [r8]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	bb62      	cbnz	r2, 8004790 <_malloc_r+0xdc>
 8004736:	f8c8 7000 	str.w	r7, [r8]
 800473a:	e00f      	b.n	800475c <_malloc_r+0xa8>
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	1b52      	subs	r2, r2, r5
 8004740:	d420      	bmi.n	8004784 <_malloc_r+0xd0>
 8004742:	2a0b      	cmp	r2, #11
 8004744:	d917      	bls.n	8004776 <_malloc_r+0xc2>
 8004746:	1961      	adds	r1, r4, r5
 8004748:	42a3      	cmp	r3, r4
 800474a:	6025      	str	r5, [r4, #0]
 800474c:	bf18      	it	ne
 800474e:	6059      	strne	r1, [r3, #4]
 8004750:	6863      	ldr	r3, [r4, #4]
 8004752:	bf08      	it	eq
 8004754:	f8c8 1000 	streq.w	r1, [r8]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4630      	mov	r0, r6
 800475e:	f000 f82f 	bl	80047c0 <__malloc_unlock>
 8004762:	f104 000b 	add.w	r0, r4, #11
 8004766:	1d23      	adds	r3, r4, #4
 8004768:	f020 0007 	bic.w	r0, r0, #7
 800476c:	1ac2      	subs	r2, r0, r3
 800476e:	bf1c      	itt	ne
 8004770:	1a1b      	subne	r3, r3, r0
 8004772:	50a3      	strne	r3, [r4, r2]
 8004774:	e7af      	b.n	80046d6 <_malloc_r+0x22>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	42a3      	cmp	r3, r4
 800477a:	bf0c      	ite	eq
 800477c:	f8c8 2000 	streq.w	r2, [r8]
 8004780:	605a      	strne	r2, [r3, #4]
 8004782:	e7eb      	b.n	800475c <_malloc_r+0xa8>
 8004784:	4623      	mov	r3, r4
 8004786:	6864      	ldr	r4, [r4, #4]
 8004788:	e7ae      	b.n	80046e8 <_malloc_r+0x34>
 800478a:	463c      	mov	r4, r7
 800478c:	687f      	ldr	r7, [r7, #4]
 800478e:	e7b6      	b.n	80046fe <_malloc_r+0x4a>
 8004790:	461a      	mov	r2, r3
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	42a3      	cmp	r3, r4
 8004796:	d1fb      	bne.n	8004790 <_malloc_r+0xdc>
 8004798:	2300      	movs	r3, #0
 800479a:	6053      	str	r3, [r2, #4]
 800479c:	e7de      	b.n	800475c <_malloc_r+0xa8>
 800479e:	230c      	movs	r3, #12
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 f80c 	bl	80047c0 <__malloc_unlock>
 80047a8:	e794      	b.n	80046d4 <_malloc_r+0x20>
 80047aa:	6005      	str	r5, [r0, #0]
 80047ac:	e7d6      	b.n	800475c <_malloc_r+0xa8>
 80047ae:	bf00      	nop
 80047b0:	20004a98 	.word	0x20004a98

080047b4 <__malloc_lock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	@ (80047bc <__malloc_lock+0x8>)
 80047b6:	f000 b8ef 	b.w	8004998 <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	20004bd8 	.word	0x20004bd8

080047c0 <__malloc_unlock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__malloc_unlock+0x8>)
 80047c2:	f000 b8ea 	b.w	800499a <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	20004bd8 	.word	0x20004bd8

080047cc <_strtol_l.constprop.0>:
 80047cc:	2b24      	cmp	r3, #36	@ 0x24
 80047ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d2:	4686      	mov	lr, r0
 80047d4:	4690      	mov	r8, r2
 80047d6:	d801      	bhi.n	80047dc <_strtol_l.constprop.0+0x10>
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d106      	bne.n	80047ea <_strtol_l.constprop.0+0x1e>
 80047dc:	f000 f8b2 	bl	8004944 <__errno>
 80047e0:	2316      	movs	r3, #22
 80047e2:	6003      	str	r3, [r0, #0]
 80047e4:	2000      	movs	r0, #0
 80047e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ea:	4834      	ldr	r0, [pc, #208]	@ (80048bc <_strtol_l.constprop.0+0xf0>)
 80047ec:	460d      	mov	r5, r1
 80047ee:	462a      	mov	r2, r5
 80047f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047f4:	5d06      	ldrb	r6, [r0, r4]
 80047f6:	f016 0608 	ands.w	r6, r6, #8
 80047fa:	d1f8      	bne.n	80047ee <_strtol_l.constprop.0+0x22>
 80047fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80047fe:	d12d      	bne.n	800485c <_strtol_l.constprop.0+0x90>
 8004800:	782c      	ldrb	r4, [r5, #0]
 8004802:	2601      	movs	r6, #1
 8004804:	1c95      	adds	r5, r2, #2
 8004806:	f033 0210 	bics.w	r2, r3, #16
 800480a:	d109      	bne.n	8004820 <_strtol_l.constprop.0+0x54>
 800480c:	2c30      	cmp	r4, #48	@ 0x30
 800480e:	d12a      	bne.n	8004866 <_strtol_l.constprop.0+0x9a>
 8004810:	782a      	ldrb	r2, [r5, #0]
 8004812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004816:	2a58      	cmp	r2, #88	@ 0x58
 8004818:	d125      	bne.n	8004866 <_strtol_l.constprop.0+0x9a>
 800481a:	786c      	ldrb	r4, [r5, #1]
 800481c:	2310      	movs	r3, #16
 800481e:	3502      	adds	r5, #2
 8004820:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004824:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004828:	2200      	movs	r2, #0
 800482a:	fbbc f9f3 	udiv	r9, ip, r3
 800482e:	4610      	mov	r0, r2
 8004830:	fb03 ca19 	mls	sl, r3, r9, ip
 8004834:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004838:	2f09      	cmp	r7, #9
 800483a:	d81b      	bhi.n	8004874 <_strtol_l.constprop.0+0xa8>
 800483c:	463c      	mov	r4, r7
 800483e:	42a3      	cmp	r3, r4
 8004840:	dd27      	ble.n	8004892 <_strtol_l.constprop.0+0xc6>
 8004842:	1c57      	adds	r7, r2, #1
 8004844:	d007      	beq.n	8004856 <_strtol_l.constprop.0+0x8a>
 8004846:	4581      	cmp	r9, r0
 8004848:	d320      	bcc.n	800488c <_strtol_l.constprop.0+0xc0>
 800484a:	d101      	bne.n	8004850 <_strtol_l.constprop.0+0x84>
 800484c:	45a2      	cmp	sl, r4
 800484e:	db1d      	blt.n	800488c <_strtol_l.constprop.0+0xc0>
 8004850:	fb00 4003 	mla	r0, r0, r3, r4
 8004854:	2201      	movs	r2, #1
 8004856:	f815 4b01 	ldrb.w	r4, [r5], #1
 800485a:	e7eb      	b.n	8004834 <_strtol_l.constprop.0+0x68>
 800485c:	2c2b      	cmp	r4, #43	@ 0x2b
 800485e:	bf04      	itt	eq
 8004860:	782c      	ldrbeq	r4, [r5, #0]
 8004862:	1c95      	addeq	r5, r2, #2
 8004864:	e7cf      	b.n	8004806 <_strtol_l.constprop.0+0x3a>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1da      	bne.n	8004820 <_strtol_l.constprop.0+0x54>
 800486a:	2c30      	cmp	r4, #48	@ 0x30
 800486c:	bf0c      	ite	eq
 800486e:	2308      	moveq	r3, #8
 8004870:	230a      	movne	r3, #10
 8004872:	e7d5      	b.n	8004820 <_strtol_l.constprop.0+0x54>
 8004874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004878:	2f19      	cmp	r7, #25
 800487a:	d801      	bhi.n	8004880 <_strtol_l.constprop.0+0xb4>
 800487c:	3c37      	subs	r4, #55	@ 0x37
 800487e:	e7de      	b.n	800483e <_strtol_l.constprop.0+0x72>
 8004880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004884:	2f19      	cmp	r7, #25
 8004886:	d804      	bhi.n	8004892 <_strtol_l.constprop.0+0xc6>
 8004888:	3c57      	subs	r4, #87	@ 0x57
 800488a:	e7d8      	b.n	800483e <_strtol_l.constprop.0+0x72>
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	e7e1      	b.n	8004856 <_strtol_l.constprop.0+0x8a>
 8004892:	1c53      	adds	r3, r2, #1
 8004894:	d108      	bne.n	80048a8 <_strtol_l.constprop.0+0xdc>
 8004896:	2322      	movs	r3, #34	@ 0x22
 8004898:	f8ce 3000 	str.w	r3, [lr]
 800489c:	4660      	mov	r0, ip
 800489e:	f1b8 0f00 	cmp.w	r8, #0
 80048a2:	d0a0      	beq.n	80047e6 <_strtol_l.constprop.0+0x1a>
 80048a4:	1e69      	subs	r1, r5, #1
 80048a6:	e006      	b.n	80048b6 <_strtol_l.constprop.0+0xea>
 80048a8:	b106      	cbz	r6, 80048ac <_strtol_l.constprop.0+0xe0>
 80048aa:	4240      	negs	r0, r0
 80048ac:	f1b8 0f00 	cmp.w	r8, #0
 80048b0:	d099      	beq.n	80047e6 <_strtol_l.constprop.0+0x1a>
 80048b2:	2a00      	cmp	r2, #0
 80048b4:	d1f6      	bne.n	80048a4 <_strtol_l.constprop.0+0xd8>
 80048b6:	f8c8 1000 	str.w	r1, [r8]
 80048ba:	e794      	b.n	80047e6 <_strtol_l.constprop.0+0x1a>
 80048bc:	080051e9 	.word	0x080051e9

080048c0 <strtol>:
 80048c0:	4613      	mov	r3, r2
 80048c2:	460a      	mov	r2, r1
 80048c4:	4601      	mov	r1, r0
 80048c6:	4802      	ldr	r0, [pc, #8]	@ (80048d0 <strtol+0x10>)
 80048c8:	6800      	ldr	r0, [r0, #0]
 80048ca:	f7ff bf7f 	b.w	80047cc <_strtol_l.constprop.0>
 80048ce:	bf00      	nop
 80048d0:	2000000c 	.word	0x2000000c

080048d4 <siprintf>:
 80048d4:	b40e      	push	{r1, r2, r3}
 80048d6:	b500      	push	{lr}
 80048d8:	b09c      	sub	sp, #112	@ 0x70
 80048da:	ab1d      	add	r3, sp, #116	@ 0x74
 80048dc:	9002      	str	r0, [sp, #8]
 80048de:	9006      	str	r0, [sp, #24]
 80048e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048e4:	4809      	ldr	r0, [pc, #36]	@ (800490c <siprintf+0x38>)
 80048e6:	9107      	str	r1, [sp, #28]
 80048e8:	9104      	str	r1, [sp, #16]
 80048ea:	4909      	ldr	r1, [pc, #36]	@ (8004910 <siprintf+0x3c>)
 80048ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f0:	9105      	str	r1, [sp, #20]
 80048f2:	6800      	ldr	r0, [r0, #0]
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	a902      	add	r1, sp, #8
 80048f8:	f000 f904 	bl	8004b04 <_svfiprintf_r>
 80048fc:	9b02      	ldr	r3, [sp, #8]
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	b01c      	add	sp, #112	@ 0x70
 8004904:	f85d eb04 	ldr.w	lr, [sp], #4
 8004908:	b003      	add	sp, #12
 800490a:	4770      	bx	lr
 800490c:	2000000c 	.word	0x2000000c
 8004910:	ffff0208 	.word	0xffff0208

08004914 <memset>:
 8004914:	4402      	add	r2, r0
 8004916:	4603      	mov	r3, r0
 8004918:	4293      	cmp	r3, r2
 800491a:	d100      	bne.n	800491e <memset+0xa>
 800491c:	4770      	bx	lr
 800491e:	f803 1b01 	strb.w	r1, [r3], #1
 8004922:	e7f9      	b.n	8004918 <memset+0x4>

08004924 <_sbrk_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d06      	ldr	r5, [pc, #24]	@ (8004940 <_sbrk_r+0x1c>)
 8004928:	2300      	movs	r3, #0
 800492a:	4604      	mov	r4, r0
 800492c:	4608      	mov	r0, r1
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	f7fc fcf6 	bl	8001320 <_sbrk>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_sbrk_r+0x1a>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_sbrk_r+0x1a>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	20004bd4 	.word	0x20004bd4

08004944 <__errno>:
 8004944:	4b01      	ldr	r3, [pc, #4]	@ (800494c <__errno+0x8>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	2000000c 	.word	0x2000000c

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4d0d      	ldr	r5, [pc, #52]	@ (8004988 <__libc_init_array+0x38>)
 8004954:	4c0d      	ldr	r4, [pc, #52]	@ (800498c <__libc_init_array+0x3c>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	2600      	movs	r6, #0
 800495c:	42a6      	cmp	r6, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	4d0b      	ldr	r5, [pc, #44]	@ (8004990 <__libc_init_array+0x40>)
 8004962:	4c0c      	ldr	r4, [pc, #48]	@ (8004994 <__libc_init_array+0x44>)
 8004964:	f000 fba8 	bl	80050b8 <_init>
 8004968:	1b64      	subs	r4, r4, r5
 800496a:	10a4      	asrs	r4, r4, #2
 800496c:	2600      	movs	r6, #0
 800496e:	42a6      	cmp	r6, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f855 3b04 	ldr.w	r3, [r5], #4
 8004978:	4798      	blx	r3
 800497a:	3601      	adds	r6, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004982:	4798      	blx	r3
 8004984:	3601      	adds	r6, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	08005324 	.word	0x08005324
 800498c:	08005324 	.word	0x08005324
 8004990:	08005324 	.word	0x08005324
 8004994:	08005328 	.word	0x08005328

08004998 <__retarget_lock_acquire_recursive>:
 8004998:	4770      	bx	lr

0800499a <__retarget_lock_release_recursive>:
 800499a:	4770      	bx	lr

0800499c <memcpy>:
 800499c:	440a      	add	r2, r1
 800499e:	4291      	cmp	r1, r2
 80049a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a4:	d100      	bne.n	80049a8 <memcpy+0xc>
 80049a6:	4770      	bx	lr
 80049a8:	b510      	push	{r4, lr}
 80049aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b2:	4291      	cmp	r1, r2
 80049b4:	d1f9      	bne.n	80049aa <memcpy+0xe>
 80049b6:	bd10      	pop	{r4, pc}

080049b8 <_free_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4605      	mov	r5, r0
 80049bc:	2900      	cmp	r1, #0
 80049be:	d041      	beq.n	8004a44 <_free_r+0x8c>
 80049c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c4:	1f0c      	subs	r4, r1, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bfb8      	it	lt
 80049ca:	18e4      	addlt	r4, r4, r3
 80049cc:	f7ff fef2 	bl	80047b4 <__malloc_lock>
 80049d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a48 <_free_r+0x90>)
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	b933      	cbnz	r3, 80049e4 <_free_r+0x2c>
 80049d6:	6063      	str	r3, [r4, #4]
 80049d8:	6014      	str	r4, [r2, #0]
 80049da:	4628      	mov	r0, r5
 80049dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049e0:	f7ff beee 	b.w	80047c0 <__malloc_unlock>
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	d908      	bls.n	80049fa <_free_r+0x42>
 80049e8:	6820      	ldr	r0, [r4, #0]
 80049ea:	1821      	adds	r1, r4, r0
 80049ec:	428b      	cmp	r3, r1
 80049ee:	bf01      	itttt	eq
 80049f0:	6819      	ldreq	r1, [r3, #0]
 80049f2:	685b      	ldreq	r3, [r3, #4]
 80049f4:	1809      	addeq	r1, r1, r0
 80049f6:	6021      	streq	r1, [r4, #0]
 80049f8:	e7ed      	b.n	80049d6 <_free_r+0x1e>
 80049fa:	461a      	mov	r2, r3
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	b10b      	cbz	r3, 8004a04 <_free_r+0x4c>
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	d9fa      	bls.n	80049fa <_free_r+0x42>
 8004a04:	6811      	ldr	r1, [r2, #0]
 8004a06:	1850      	adds	r0, r2, r1
 8004a08:	42a0      	cmp	r0, r4
 8004a0a:	d10b      	bne.n	8004a24 <_free_r+0x6c>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	4401      	add	r1, r0
 8004a10:	1850      	adds	r0, r2, r1
 8004a12:	4283      	cmp	r3, r0
 8004a14:	6011      	str	r1, [r2, #0]
 8004a16:	d1e0      	bne.n	80049da <_free_r+0x22>
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	6053      	str	r3, [r2, #4]
 8004a1e:	4408      	add	r0, r1
 8004a20:	6010      	str	r0, [r2, #0]
 8004a22:	e7da      	b.n	80049da <_free_r+0x22>
 8004a24:	d902      	bls.n	8004a2c <_free_r+0x74>
 8004a26:	230c      	movs	r3, #12
 8004a28:	602b      	str	r3, [r5, #0]
 8004a2a:	e7d6      	b.n	80049da <_free_r+0x22>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	1821      	adds	r1, r4, r0
 8004a30:	428b      	cmp	r3, r1
 8004a32:	bf04      	itt	eq
 8004a34:	6819      	ldreq	r1, [r3, #0]
 8004a36:	685b      	ldreq	r3, [r3, #4]
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	bf04      	itt	eq
 8004a3c:	1809      	addeq	r1, r1, r0
 8004a3e:	6021      	streq	r1, [r4, #0]
 8004a40:	6054      	str	r4, [r2, #4]
 8004a42:	e7ca      	b.n	80049da <_free_r+0x22>
 8004a44:	bd38      	pop	{r3, r4, r5, pc}
 8004a46:	bf00      	nop
 8004a48:	20004a98 	.word	0x20004a98

08004a4c <__ssputs_r>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	688e      	ldr	r6, [r1, #8]
 8004a52:	461f      	mov	r7, r3
 8004a54:	42be      	cmp	r6, r7
 8004a56:	680b      	ldr	r3, [r1, #0]
 8004a58:	4682      	mov	sl, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	4690      	mov	r8, r2
 8004a5e:	d82d      	bhi.n	8004abc <__ssputs_r+0x70>
 8004a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a68:	d026      	beq.n	8004ab8 <__ssputs_r+0x6c>
 8004a6a:	6965      	ldr	r5, [r4, #20]
 8004a6c:	6909      	ldr	r1, [r1, #16]
 8004a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a72:	eba3 0901 	sub.w	r9, r3, r1
 8004a76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a7a:	1c7b      	adds	r3, r7, #1
 8004a7c:	444b      	add	r3, r9
 8004a7e:	106d      	asrs	r5, r5, #1
 8004a80:	429d      	cmp	r5, r3
 8004a82:	bf38      	it	cc
 8004a84:	461d      	movcc	r5, r3
 8004a86:	0553      	lsls	r3, r2, #21
 8004a88:	d527      	bpl.n	8004ada <__ssputs_r+0x8e>
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f7ff fe12 	bl	80046b4 <_malloc_r>
 8004a90:	4606      	mov	r6, r0
 8004a92:	b360      	cbz	r0, 8004aee <__ssputs_r+0xa2>
 8004a94:	6921      	ldr	r1, [r4, #16]
 8004a96:	464a      	mov	r2, r9
 8004a98:	f7ff ff80 	bl	800499c <memcpy>
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	6126      	str	r6, [r4, #16]
 8004aaa:	6165      	str	r5, [r4, #20]
 8004aac:	444e      	add	r6, r9
 8004aae:	eba5 0509 	sub.w	r5, r5, r9
 8004ab2:	6026      	str	r6, [r4, #0]
 8004ab4:	60a5      	str	r5, [r4, #8]
 8004ab6:	463e      	mov	r6, r7
 8004ab8:	42be      	cmp	r6, r7
 8004aba:	d900      	bls.n	8004abe <__ssputs_r+0x72>
 8004abc:	463e      	mov	r6, r7
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	f000 faa8 	bl	8005018 <memmove>
 8004ac8:	68a3      	ldr	r3, [r4, #8]
 8004aca:	1b9b      	subs	r3, r3, r6
 8004acc:	60a3      	str	r3, [r4, #8]
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	4433      	add	r3, r6
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ada:	462a      	mov	r2, r5
 8004adc:	f000 fab6 	bl	800504c <_realloc_r>
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d1e0      	bne.n	8004aa8 <__ssputs_r+0x5c>
 8004ae6:	6921      	ldr	r1, [r4, #16]
 8004ae8:	4650      	mov	r0, sl
 8004aea:	f7ff ff65 	bl	80049b8 <_free_r>
 8004aee:	230c      	movs	r3, #12
 8004af0:	f8ca 3000 	str.w	r3, [sl]
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	e7e9      	b.n	8004ad6 <__ssputs_r+0x8a>
	...

08004b04 <_svfiprintf_r>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	4698      	mov	r8, r3
 8004b0a:	898b      	ldrh	r3, [r1, #12]
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	b09d      	sub	sp, #116	@ 0x74
 8004b10:	4607      	mov	r7, r0
 8004b12:	460d      	mov	r5, r1
 8004b14:	4614      	mov	r4, r2
 8004b16:	d510      	bpl.n	8004b3a <_svfiprintf_r+0x36>
 8004b18:	690b      	ldr	r3, [r1, #16]
 8004b1a:	b973      	cbnz	r3, 8004b3a <_svfiprintf_r+0x36>
 8004b1c:	2140      	movs	r1, #64	@ 0x40
 8004b1e:	f7ff fdc9 	bl	80046b4 <_malloc_r>
 8004b22:	6028      	str	r0, [r5, #0]
 8004b24:	6128      	str	r0, [r5, #16]
 8004b26:	b930      	cbnz	r0, 8004b36 <_svfiprintf_r+0x32>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	b01d      	add	sp, #116	@ 0x74
 8004b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b36:	2340      	movs	r3, #64	@ 0x40
 8004b38:	616b      	str	r3, [r5, #20]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3e:	2320      	movs	r3, #32
 8004b40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b48:	2330      	movs	r3, #48	@ 0x30
 8004b4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ce8 <_svfiprintf_r+0x1e4>
 8004b4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b52:	f04f 0901 	mov.w	r9, #1
 8004b56:	4623      	mov	r3, r4
 8004b58:	469a      	mov	sl, r3
 8004b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b5e:	b10a      	cbz	r2, 8004b64 <_svfiprintf_r+0x60>
 8004b60:	2a25      	cmp	r2, #37	@ 0x25
 8004b62:	d1f9      	bne.n	8004b58 <_svfiprintf_r+0x54>
 8004b64:	ebba 0b04 	subs.w	fp, sl, r4
 8004b68:	d00b      	beq.n	8004b82 <_svfiprintf_r+0x7e>
 8004b6a:	465b      	mov	r3, fp
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4638      	mov	r0, r7
 8004b72:	f7ff ff6b 	bl	8004a4c <__ssputs_r>
 8004b76:	3001      	adds	r0, #1
 8004b78:	f000 80a7 	beq.w	8004cca <_svfiprintf_r+0x1c6>
 8004b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b7e:	445a      	add	r2, fp
 8004b80:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b82:	f89a 3000 	ldrb.w	r3, [sl]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 809f 	beq.w	8004cca <_svfiprintf_r+0x1c6>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b96:	f10a 0a01 	add.w	sl, sl, #1
 8004b9a:	9304      	str	r3, [sp, #16]
 8004b9c:	9307      	str	r3, [sp, #28]
 8004b9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ba2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ba4:	4654      	mov	r4, sl
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bac:	484e      	ldr	r0, [pc, #312]	@ (8004ce8 <_svfiprintf_r+0x1e4>)
 8004bae:	f7fb fb1f 	bl	80001f0 <memchr>
 8004bb2:	9a04      	ldr	r2, [sp, #16]
 8004bb4:	b9d8      	cbnz	r0, 8004bee <_svfiprintf_r+0xea>
 8004bb6:	06d0      	lsls	r0, r2, #27
 8004bb8:	bf44      	itt	mi
 8004bba:	2320      	movmi	r3, #32
 8004bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bc0:	0711      	lsls	r1, r2, #28
 8004bc2:	bf44      	itt	mi
 8004bc4:	232b      	movmi	r3, #43	@ 0x2b
 8004bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bca:	f89a 3000 	ldrb.w	r3, [sl]
 8004bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bd0:	d015      	beq.n	8004bfe <_svfiprintf_r+0xfa>
 8004bd2:	9a07      	ldr	r2, [sp, #28]
 8004bd4:	4654      	mov	r4, sl
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f04f 0c0a 	mov.w	ip, #10
 8004bdc:	4621      	mov	r1, r4
 8004bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be2:	3b30      	subs	r3, #48	@ 0x30
 8004be4:	2b09      	cmp	r3, #9
 8004be6:	d94b      	bls.n	8004c80 <_svfiprintf_r+0x17c>
 8004be8:	b1b0      	cbz	r0, 8004c18 <_svfiprintf_r+0x114>
 8004bea:	9207      	str	r2, [sp, #28]
 8004bec:	e014      	b.n	8004c18 <_svfiprintf_r+0x114>
 8004bee:	eba0 0308 	sub.w	r3, r0, r8
 8004bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	9304      	str	r3, [sp, #16]
 8004bfa:	46a2      	mov	sl, r4
 8004bfc:	e7d2      	b.n	8004ba4 <_svfiprintf_r+0xa0>
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	1d19      	adds	r1, r3, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	9103      	str	r1, [sp, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bfbb      	ittet	lt
 8004c0a:	425b      	neglt	r3, r3
 8004c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c10:	9307      	strge	r3, [sp, #28]
 8004c12:	9307      	strlt	r3, [sp, #28]
 8004c14:	bfb8      	it	lt
 8004c16:	9204      	strlt	r2, [sp, #16]
 8004c18:	7823      	ldrb	r3, [r4, #0]
 8004c1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c1c:	d10a      	bne.n	8004c34 <_svfiprintf_r+0x130>
 8004c1e:	7863      	ldrb	r3, [r4, #1]
 8004c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c22:	d132      	bne.n	8004c8a <_svfiprintf_r+0x186>
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	9203      	str	r2, [sp, #12]
 8004c2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c30:	3402      	adds	r4, #2
 8004c32:	9305      	str	r3, [sp, #20]
 8004c34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004cf8 <_svfiprintf_r+0x1f4>
 8004c38:	7821      	ldrb	r1, [r4, #0]
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	f7fb fad7 	bl	80001f0 <memchr>
 8004c42:	b138      	cbz	r0, 8004c54 <_svfiprintf_r+0x150>
 8004c44:	9b04      	ldr	r3, [sp, #16]
 8004c46:	eba0 000a 	sub.w	r0, r0, sl
 8004c4a:	2240      	movs	r2, #64	@ 0x40
 8004c4c:	4082      	lsls	r2, r0
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	3401      	adds	r4, #1
 8004c52:	9304      	str	r3, [sp, #16]
 8004c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c58:	4824      	ldr	r0, [pc, #144]	@ (8004cec <_svfiprintf_r+0x1e8>)
 8004c5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c5e:	2206      	movs	r2, #6
 8004c60:	f7fb fac6 	bl	80001f0 <memchr>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d036      	beq.n	8004cd6 <_svfiprintf_r+0x1d2>
 8004c68:	4b21      	ldr	r3, [pc, #132]	@ (8004cf0 <_svfiprintf_r+0x1ec>)
 8004c6a:	bb1b      	cbnz	r3, 8004cb4 <_svfiprintf_r+0x1b0>
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	3307      	adds	r3, #7
 8004c70:	f023 0307 	bic.w	r3, r3, #7
 8004c74:	3308      	adds	r3, #8
 8004c76:	9303      	str	r3, [sp, #12]
 8004c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c7a:	4433      	add	r3, r6
 8004c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c7e:	e76a      	b.n	8004b56 <_svfiprintf_r+0x52>
 8004c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c84:	460c      	mov	r4, r1
 8004c86:	2001      	movs	r0, #1
 8004c88:	e7a8      	b.n	8004bdc <_svfiprintf_r+0xd8>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	3401      	adds	r4, #1
 8004c8e:	9305      	str	r3, [sp, #20]
 8004c90:	4619      	mov	r1, r3
 8004c92:	f04f 0c0a 	mov.w	ip, #10
 8004c96:	4620      	mov	r0, r4
 8004c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c9c:	3a30      	subs	r2, #48	@ 0x30
 8004c9e:	2a09      	cmp	r2, #9
 8004ca0:	d903      	bls.n	8004caa <_svfiprintf_r+0x1a6>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0c6      	beq.n	8004c34 <_svfiprintf_r+0x130>
 8004ca6:	9105      	str	r1, [sp, #20]
 8004ca8:	e7c4      	b.n	8004c34 <_svfiprintf_r+0x130>
 8004caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cae:	4604      	mov	r4, r0
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e7f0      	b.n	8004c96 <_svfiprintf_r+0x192>
 8004cb4:	ab03      	add	r3, sp, #12
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	462a      	mov	r2, r5
 8004cba:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <_svfiprintf_r+0x1f0>)
 8004cbc:	a904      	add	r1, sp, #16
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	f3af 8000 	nop.w
 8004cc4:	1c42      	adds	r2, r0, #1
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	d1d6      	bne.n	8004c78 <_svfiprintf_r+0x174>
 8004cca:	89ab      	ldrh	r3, [r5, #12]
 8004ccc:	065b      	lsls	r3, r3, #25
 8004cce:	f53f af2d 	bmi.w	8004b2c <_svfiprintf_r+0x28>
 8004cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cd4:	e72c      	b.n	8004b30 <_svfiprintf_r+0x2c>
 8004cd6:	ab03      	add	r3, sp, #12
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	462a      	mov	r2, r5
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <_svfiprintf_r+0x1f0>)
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f000 f879 	bl	8004dd8 <_printf_i>
 8004ce6:	e7ed      	b.n	8004cc4 <_svfiprintf_r+0x1c0>
 8004ce8:	080052e9 	.word	0x080052e9
 8004cec:	080052f3 	.word	0x080052f3
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	08004a4d 	.word	0x08004a4d
 8004cf8:	080052ef 	.word	0x080052ef

08004cfc <_printf_common>:
 8004cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	4616      	mov	r6, r2
 8004d02:	4698      	mov	r8, r3
 8004d04:	688a      	ldr	r2, [r1, #8]
 8004d06:	690b      	ldr	r3, [r1, #16]
 8004d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bfb8      	it	lt
 8004d10:	4613      	movlt	r3, r2
 8004d12:	6033      	str	r3, [r6, #0]
 8004d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d18:	4607      	mov	r7, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	b10a      	cbz	r2, 8004d22 <_printf_common+0x26>
 8004d1e:	3301      	adds	r3, #1
 8004d20:	6033      	str	r3, [r6, #0]
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	0699      	lsls	r1, r3, #26
 8004d26:	bf42      	ittt	mi
 8004d28:	6833      	ldrmi	r3, [r6, #0]
 8004d2a:	3302      	addmi	r3, #2
 8004d2c:	6033      	strmi	r3, [r6, #0]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	f015 0506 	ands.w	r5, r5, #6
 8004d34:	d106      	bne.n	8004d44 <_printf_common+0x48>
 8004d36:	f104 0a19 	add.w	sl, r4, #25
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	6832      	ldr	r2, [r6, #0]
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dc26      	bgt.n	8004d92 <_printf_common+0x96>
 8004d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	3b00      	subs	r3, #0
 8004d4c:	bf18      	it	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	0692      	lsls	r2, r2, #26
 8004d52:	d42b      	bmi.n	8004dac <_printf_common+0xb0>
 8004d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d58:	4641      	mov	r1, r8
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	47c8      	blx	r9
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d01e      	beq.n	8004da0 <_printf_common+0xa4>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	6922      	ldr	r2, [r4, #16]
 8004d66:	f003 0306 	and.w	r3, r3, #6
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	bf02      	ittt	eq
 8004d6e:	68e5      	ldreq	r5, [r4, #12]
 8004d70:	6833      	ldreq	r3, [r6, #0]
 8004d72:	1aed      	subeq	r5, r5, r3
 8004d74:	68a3      	ldr	r3, [r4, #8]
 8004d76:	bf0c      	ite	eq
 8004d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d7c:	2500      	movne	r5, #0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bfc4      	itt	gt
 8004d82:	1a9b      	subgt	r3, r3, r2
 8004d84:	18ed      	addgt	r5, r5, r3
 8004d86:	2600      	movs	r6, #0
 8004d88:	341a      	adds	r4, #26
 8004d8a:	42b5      	cmp	r5, r6
 8004d8c:	d11a      	bne.n	8004dc4 <_printf_common+0xc8>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e008      	b.n	8004da4 <_printf_common+0xa8>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4652      	mov	r2, sl
 8004d96:	4641      	mov	r1, r8
 8004d98:	4638      	mov	r0, r7
 8004d9a:	47c8      	blx	r9
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d103      	bne.n	8004da8 <_printf_common+0xac>
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	3501      	adds	r5, #1
 8004daa:	e7c6      	b.n	8004d3a <_printf_common+0x3e>
 8004dac:	18e1      	adds	r1, r4, r3
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	2030      	movs	r0, #48	@ 0x30
 8004db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004db6:	4422      	add	r2, r4
 8004db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	e7c7      	b.n	8004d54 <_printf_common+0x58>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	4641      	mov	r1, r8
 8004dca:	4638      	mov	r0, r7
 8004dcc:	47c8      	blx	r9
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d0e6      	beq.n	8004da0 <_printf_common+0xa4>
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7d9      	b.n	8004d8a <_printf_common+0x8e>
	...

08004dd8 <_printf_i>:
 8004dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	7e0f      	ldrb	r7, [r1, #24]
 8004dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004de0:	2f78      	cmp	r7, #120	@ 0x78
 8004de2:	4691      	mov	r9, r2
 8004de4:	4680      	mov	r8, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	469a      	mov	sl, r3
 8004dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dee:	d807      	bhi.n	8004e00 <_printf_i+0x28>
 8004df0:	2f62      	cmp	r7, #98	@ 0x62
 8004df2:	d80a      	bhi.n	8004e0a <_printf_i+0x32>
 8004df4:	2f00      	cmp	r7, #0
 8004df6:	f000 80d2 	beq.w	8004f9e <_printf_i+0x1c6>
 8004dfa:	2f58      	cmp	r7, #88	@ 0x58
 8004dfc:	f000 80b9 	beq.w	8004f72 <_printf_i+0x19a>
 8004e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e08:	e03a      	b.n	8004e80 <_printf_i+0xa8>
 8004e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e0e:	2b15      	cmp	r3, #21
 8004e10:	d8f6      	bhi.n	8004e00 <_printf_i+0x28>
 8004e12:	a101      	add	r1, pc, #4	@ (adr r1, 8004e18 <_printf_i+0x40>)
 8004e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e85 	.word	0x08004e85
 8004e20:	08004e01 	.word	0x08004e01
 8004e24:	08004e01 	.word	0x08004e01
 8004e28:	08004e01 	.word	0x08004e01
 8004e2c:	08004e01 	.word	0x08004e01
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	08004e01 	.word	0x08004e01
 8004e38:	08004e01 	.word	0x08004e01
 8004e3c:	08004e01 	.word	0x08004e01
 8004e40:	08004e01 	.word	0x08004e01
 8004e44:	08004f85 	.word	0x08004f85
 8004e48:	08004eaf 	.word	0x08004eaf
 8004e4c:	08004f3f 	.word	0x08004f3f
 8004e50:	08004e01 	.word	0x08004e01
 8004e54:	08004e01 	.word	0x08004e01
 8004e58:	08004fa7 	.word	0x08004fa7
 8004e5c:	08004e01 	.word	0x08004e01
 8004e60:	08004eaf 	.word	0x08004eaf
 8004e64:	08004e01 	.word	0x08004e01
 8004e68:	08004e01 	.word	0x08004e01
 8004e6c:	08004f47 	.word	0x08004f47
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6032      	str	r2, [r6, #0]
 8004e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e80:	2301      	movs	r3, #1
 8004e82:	e09d      	b.n	8004fc0 <_printf_i+0x1e8>
 8004e84:	6833      	ldr	r3, [r6, #0]
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	1d19      	adds	r1, r3, #4
 8004e8a:	6031      	str	r1, [r6, #0]
 8004e8c:	0606      	lsls	r6, r0, #24
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0xbc>
 8004e90:	681d      	ldr	r5, [r3, #0]
 8004e92:	e003      	b.n	8004e9c <_printf_i+0xc4>
 8004e94:	0645      	lsls	r5, r0, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0xb8>
 8004e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	da03      	bge.n	8004ea8 <_printf_i+0xd0>
 8004ea0:	232d      	movs	r3, #45	@ 0x2d
 8004ea2:	426d      	negs	r5, r5
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ea8:	4859      	ldr	r0, [pc, #356]	@ (8005010 <_printf_i+0x238>)
 8004eaa:	230a      	movs	r3, #10
 8004eac:	e011      	b.n	8004ed2 <_printf_i+0xfa>
 8004eae:	6821      	ldr	r1, [r4, #0]
 8004eb0:	6833      	ldr	r3, [r6, #0]
 8004eb2:	0608      	lsls	r0, r1, #24
 8004eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004eb8:	d402      	bmi.n	8004ec0 <_printf_i+0xe8>
 8004eba:	0649      	lsls	r1, r1, #25
 8004ebc:	bf48      	it	mi
 8004ebe:	b2ad      	uxthmi	r5, r5
 8004ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ec2:	4853      	ldr	r0, [pc, #332]	@ (8005010 <_printf_i+0x238>)
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	bf14      	ite	ne
 8004ec8:	230a      	movne	r3, #10
 8004eca:	2308      	moveq	r3, #8
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ed2:	6866      	ldr	r6, [r4, #4]
 8004ed4:	60a6      	str	r6, [r4, #8]
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	bfa2      	ittt	ge
 8004eda:	6821      	ldrge	r1, [r4, #0]
 8004edc:	f021 0104 	bicge.w	r1, r1, #4
 8004ee0:	6021      	strge	r1, [r4, #0]
 8004ee2:	b90d      	cbnz	r5, 8004ee8 <_printf_i+0x110>
 8004ee4:	2e00      	cmp	r6, #0
 8004ee6:	d04b      	beq.n	8004f80 <_printf_i+0x1a8>
 8004ee8:	4616      	mov	r6, r2
 8004eea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eee:	fb03 5711 	mls	r7, r3, r1, r5
 8004ef2:	5dc7      	ldrb	r7, [r0, r7]
 8004ef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ef8:	462f      	mov	r7, r5
 8004efa:	42bb      	cmp	r3, r7
 8004efc:	460d      	mov	r5, r1
 8004efe:	d9f4      	bls.n	8004eea <_printf_i+0x112>
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d10b      	bne.n	8004f1c <_printf_i+0x144>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	07df      	lsls	r7, r3, #31
 8004f08:	d508      	bpl.n	8004f1c <_printf_i+0x144>
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	6861      	ldr	r1, [r4, #4]
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	bfde      	ittt	le
 8004f12:	2330      	movle	r3, #48	@ 0x30
 8004f14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f1c:	1b92      	subs	r2, r2, r6
 8004f1e:	6122      	str	r2, [r4, #16]
 8004f20:	f8cd a000 	str.w	sl, [sp]
 8004f24:	464b      	mov	r3, r9
 8004f26:	aa03      	add	r2, sp, #12
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f7ff fee6 	bl	8004cfc <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d14a      	bne.n	8004fca <_printf_i+0x1f2>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	b004      	add	sp, #16
 8004f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f043 0320 	orr.w	r3, r3, #32
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	4833      	ldr	r0, [pc, #204]	@ (8005014 <_printf_i+0x23c>)
 8004f48:	2778      	movs	r7, #120	@ 0x78
 8004f4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	6831      	ldr	r1, [r6, #0]
 8004f52:	061f      	lsls	r7, r3, #24
 8004f54:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f58:	d402      	bmi.n	8004f60 <_printf_i+0x188>
 8004f5a:	065f      	lsls	r7, r3, #25
 8004f5c:	bf48      	it	mi
 8004f5e:	b2ad      	uxthmi	r5, r5
 8004f60:	6031      	str	r1, [r6, #0]
 8004f62:	07d9      	lsls	r1, r3, #31
 8004f64:	bf44      	itt	mi
 8004f66:	f043 0320 	orrmi.w	r3, r3, #32
 8004f6a:	6023      	strmi	r3, [r4, #0]
 8004f6c:	b11d      	cbz	r5, 8004f76 <_printf_i+0x19e>
 8004f6e:	2310      	movs	r3, #16
 8004f70:	e7ac      	b.n	8004ecc <_printf_i+0xf4>
 8004f72:	4827      	ldr	r0, [pc, #156]	@ (8005010 <_printf_i+0x238>)
 8004f74:	e7e9      	b.n	8004f4a <_printf_i+0x172>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f023 0320 	bic.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	e7f6      	b.n	8004f6e <_printf_i+0x196>
 8004f80:	4616      	mov	r6, r2
 8004f82:	e7bd      	b.n	8004f00 <_printf_i+0x128>
 8004f84:	6833      	ldr	r3, [r6, #0]
 8004f86:	6825      	ldr	r5, [r4, #0]
 8004f88:	6961      	ldr	r1, [r4, #20]
 8004f8a:	1d18      	adds	r0, r3, #4
 8004f8c:	6030      	str	r0, [r6, #0]
 8004f8e:	062e      	lsls	r6, r5, #24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0x1c0>
 8004f94:	6019      	str	r1, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <_printf_i+0x1c6>
 8004f98:	0668      	lsls	r0, r5, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0x1bc>
 8004f9c:	8019      	strh	r1, [r3, #0]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	4616      	mov	r6, r2
 8004fa4:	e7bc      	b.n	8004f20 <_printf_i+0x148>
 8004fa6:	6833      	ldr	r3, [r6, #0]
 8004fa8:	1d1a      	adds	r2, r3, #4
 8004faa:	6032      	str	r2, [r6, #0]
 8004fac:	681e      	ldr	r6, [r3, #0]
 8004fae:	6862      	ldr	r2, [r4, #4]
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7fb f91c 	bl	80001f0 <memchr>
 8004fb8:	b108      	cbz	r0, 8004fbe <_printf_i+0x1e6>
 8004fba:	1b80      	subs	r0, r0, r6
 8004fbc:	6060      	str	r0, [r4, #4]
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fc8:	e7aa      	b.n	8004f20 <_printf_i+0x148>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4649      	mov	r1, r9
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	47d0      	blx	sl
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d0ad      	beq.n	8004f34 <_printf_i+0x15c>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	079b      	lsls	r3, r3, #30
 8004fdc:	d413      	bmi.n	8005006 <_printf_i+0x22e>
 8004fde:	68e0      	ldr	r0, [r4, #12]
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	4298      	cmp	r0, r3
 8004fe4:	bfb8      	it	lt
 8004fe6:	4618      	movlt	r0, r3
 8004fe8:	e7a6      	b.n	8004f38 <_printf_i+0x160>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4632      	mov	r2, r6
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d09d      	beq.n	8004f34 <_printf_i+0x15c>
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	9903      	ldr	r1, [sp, #12]
 8004ffe:	1a5b      	subs	r3, r3, r1
 8005000:	42ab      	cmp	r3, r5
 8005002:	dcf2      	bgt.n	8004fea <_printf_i+0x212>
 8005004:	e7eb      	b.n	8004fde <_printf_i+0x206>
 8005006:	2500      	movs	r5, #0
 8005008:	f104 0619 	add.w	r6, r4, #25
 800500c:	e7f5      	b.n	8004ffa <_printf_i+0x222>
 800500e:	bf00      	nop
 8005010:	080052fa 	.word	0x080052fa
 8005014:	0800530b 	.word	0x0800530b

08005018 <memmove>:
 8005018:	4288      	cmp	r0, r1
 800501a:	b510      	push	{r4, lr}
 800501c:	eb01 0402 	add.w	r4, r1, r2
 8005020:	d902      	bls.n	8005028 <memmove+0x10>
 8005022:	4284      	cmp	r4, r0
 8005024:	4623      	mov	r3, r4
 8005026:	d807      	bhi.n	8005038 <memmove+0x20>
 8005028:	1e43      	subs	r3, r0, #1
 800502a:	42a1      	cmp	r1, r4
 800502c:	d008      	beq.n	8005040 <memmove+0x28>
 800502e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005036:	e7f8      	b.n	800502a <memmove+0x12>
 8005038:	4402      	add	r2, r0
 800503a:	4601      	mov	r1, r0
 800503c:	428a      	cmp	r2, r1
 800503e:	d100      	bne.n	8005042 <memmove+0x2a>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800504a:	e7f7      	b.n	800503c <memmove+0x24>

0800504c <_realloc_r>:
 800504c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005050:	4680      	mov	r8, r0
 8005052:	4615      	mov	r5, r2
 8005054:	460c      	mov	r4, r1
 8005056:	b921      	cbnz	r1, 8005062 <_realloc_r+0x16>
 8005058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800505c:	4611      	mov	r1, r2
 800505e:	f7ff bb29 	b.w	80046b4 <_malloc_r>
 8005062:	b92a      	cbnz	r2, 8005070 <_realloc_r+0x24>
 8005064:	f7ff fca8 	bl	80049b8 <_free_r>
 8005068:	2400      	movs	r4, #0
 800506a:	4620      	mov	r0, r4
 800506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005070:	f000 f81a 	bl	80050a8 <_malloc_usable_size_r>
 8005074:	4285      	cmp	r5, r0
 8005076:	4606      	mov	r6, r0
 8005078:	d802      	bhi.n	8005080 <_realloc_r+0x34>
 800507a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800507e:	d8f4      	bhi.n	800506a <_realloc_r+0x1e>
 8005080:	4629      	mov	r1, r5
 8005082:	4640      	mov	r0, r8
 8005084:	f7ff fb16 	bl	80046b4 <_malloc_r>
 8005088:	4607      	mov	r7, r0
 800508a:	2800      	cmp	r0, #0
 800508c:	d0ec      	beq.n	8005068 <_realloc_r+0x1c>
 800508e:	42b5      	cmp	r5, r6
 8005090:	462a      	mov	r2, r5
 8005092:	4621      	mov	r1, r4
 8005094:	bf28      	it	cs
 8005096:	4632      	movcs	r2, r6
 8005098:	f7ff fc80 	bl	800499c <memcpy>
 800509c:	4621      	mov	r1, r4
 800509e:	4640      	mov	r0, r8
 80050a0:	f7ff fc8a 	bl	80049b8 <_free_r>
 80050a4:	463c      	mov	r4, r7
 80050a6:	e7e0      	b.n	800506a <_realloc_r+0x1e>

080050a8 <_malloc_usable_size_r>:
 80050a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ac:	1f18      	subs	r0, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bfbc      	itt	lt
 80050b2:	580b      	ldrlt	r3, [r1, r0]
 80050b4:	18c0      	addlt	r0, r0, r3
 80050b6:	4770      	bx	lr

080050b8 <_init>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr

080050c4 <_fini>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	bf00      	nop
 80050c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ca:	bc08      	pop	{r3}
 80050cc:	469e      	mov	lr, r3
 80050ce:	4770      	bx	lr
